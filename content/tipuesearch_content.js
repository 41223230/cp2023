var tipuesearch = {"pages": [{'title': 'First', 'text': 'About \n  https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'First.html'}, {'title': 'w1', 'text': '心得：學期開學第一周，一開始對於這門課內容不知道要上甚麼，但是經過老師介紹了replit和githb之後，了解了他們的用途以及之後課程使用，這讓我對這門課印象深刻。 \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w2~w3', 'text': '心得：在這兩周過程中，我們創建了replit和github帳號，也將這兩個app成功的連結。接下來是創建自己的倉儲，過程當中發生系統間的權限上的問題也成功排除。接下來還有講解網路設定，過程也有說到系上整個的網路是怎麼作業，以及上課時的設定 \n \n 網路設定 \n \n \n', 'tags': '', 'url': 'w2~w3.html'}, {'title': 'w4~w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n 解釋 ： \n \n 這是一個使用C語言編寫的程式，它使用了標準的stdio.h標頭文件，並包含了一個主函式main。\n\n1. `#include <stdio.h>`：這行指令包含了標準輸入/輸出函式庫，這是C語言中用於處理輸入和輸出的函式庫。\n\n2. `int main()`：這是C程式的進入點，所有的執行都從這裡開始。它返回一個整數值，通常是0，表示程式執行成功。\n\n3. `FILE *gnuplotPipe = popen("gnuplot -persistent", "w");`：這行程式碼使用popen函式啟動一個Gnuplot進程，並返回一個文件指標（FILE *gnuplotPipe），該指標用於向Gnuplot進程寫入命令。這個Gnuplot進程使用-persistent選項，表示它將保持打開，而不是在每次繪圖後自動關閉。\n\n4. `if (!gnuplotPipe) { fprintf(stderr, "Failed to start Gnuplot.\\n"); return 1; }`：這是一個錯誤檢查，確保成功啟動了Gnuplot進程。如果popen失敗，則向標準錯誤流（stderr）輸出錯誤消息，並返回1表示程式執行失敗。\n\n5. `fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");`：這行程式碼向Gnuplot進程發送命令，設置輸出的圖形格式為PNG，指定字體為默認字體，大小為800x400。\n\n6. `fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");`：這行程式碼指定輸出圖形的文件路徑和名稱。\n\n7. `fprintf(gnuplotPipe, "plot sin(x)");`：這行程式碼發送Gnuplot繪圖命令，這裡是繪製sin(x)函數。\n\n8. `pclose(gnuplotPipe);`：這行程式碼關閉與Gnuplot進程的連接，確保在結束時清理相關資源。\n\n9. `return 0;`：主函式執行成功，返回0表示程式執行成功。 \n \n 心得：進入了第四、五周，除了建立了自己的考試帳號，也將自己的網站加設上了密碼，還有在replit中設定g nuplot環境設定，來完成課堂上的作業。 \n \n \n', 'tags': '', 'url': 'w4~w5.html'}, {'title': 'w6', 'text': '台灣國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// cc roc_flag.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n    // red rectangle area\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // blue rectangle area\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    float angle = 0;\n    int fromX, fromY;\n    int toX, toY;\n    for (int i=0; i<24; i++){\n        angle += 5*M_PI*2/12;\n        //printf("%.3f", angle);\n        toX = center_x + cos(angle)*sun_radius;\n        toY = center_y + sin(angle)*sun_radius;\n        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖\n        if (i!=0){\n            gdImageLine(img, fromX, fromY, toX, toY, color);\n        }\n        fromX = toX;\n        fromY = toY;\n   }\n}\n \n \n \n \n 美國國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_United_States\n// https://www.britannica.com/topic/flag-of-the-United-States-of-America\n// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars\n    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars\n    int star_start_x = (int)(0.0616 * height); // Starting X position for stars\n    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x;\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // Fill the star with white color\n    gdImageFilledPolygon(img, points, 10, color);\n}\n \n \n 台灣正式國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '日本國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <gdfonts.h>\n\nvoid drawJapaneseFlag() {\n    int flagWidth = 300;\n    int flagHeight = 200;\n\n    gdImagePtr img;\n    FILE *pngout; // Corrected the FILE pointer declaration\n\n    img = gdImageCreateTrueColor(flagWidth, flagHeight);\n\n    // 設置白色背景\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    gdImageFill(img, 0, 0, white);\n\n    // 設置紅色\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n\n    // 繪製紅色圓圈\n    int circleRadius = 50;\n    int circleCenterX = flagWidth / 2;\n    int circleCenterY = flagHeight / 2;\n\n    gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red); // Corrected the ellipse dimensions\n\n    // 輸出 PNG 文件\n    pngout = fopen("japanese_flag.png", "wb");\n    gdImagePng(img, pngout);\n\n    // 釋放內存\n    gdImageDestroy(img);\n    fclose(pngout);\n}\n\nint main() {\n    drawJapaneseFlag();\n    return 0;\n} \n 解釋： \n 這是一個使用C語言和gd庫來繪製日本國旗的程式。gd是一個用於圖形繪製的函式庫，而這個程式的目的是創建一個PNG圖像，其中包含日本國旗的圖案。\n\n1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <gdfonts.h>`：包含gd函式庫中的字型定義。\n\n4. `void drawJapaneseFlag()`：定義了一個名為`drawJapaneseFlag`的函式，用於繪製日本國旗。\n\n5. `int flagWidth = 300;` 和 `int flagHeight = 200;`：定義了國旗的寬度和高度。\n\n6. `gdImagePtr img;`：聲明了一個指向gdImage的指標，這將用於創建和處理圖像。\n\n7. `FILE *pngout;`：聲明了一個指向文件的指標，用於將最終的PNG圖像寫入文件。\n\n8. `img = gdImageCreateTrueColor(flagWidth, flagHeight);`：使用`gdImageCreateTrueColor`函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n9. `int white = gdImageColorAllocate(img, 255, 255, 255);`：為白色分配一個顏色索引。\n\n10. `gdImageFill(img, 0, 0, white);`：使用`gdImageFill`函式將整個圖像填充為白色。\n\n11. `int red = gdImageColorAllocate(img, 255, 0, 0);`：為紅色分配一個顏色索引。\n\n12. `int circleRadius = 50;`、`int circleCenterX = flagWidth / 2;` 和 `int circleCenterY = flagHeight / 2;`：定義了圓圈的半徑和中心座標。\n\n13. `gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red);`：使用`gdImageFilledEllipse`函式在圖像上畫一個填充紅色的橢圓（圓圈）。\n\n14. `pngout = fopen("japanese_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n15. `gdImagePng(img, pngout);`：使用`gdImagePng`函式將圖像寫入已打開的文件。\n\n16. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n17. `fclose(pngout);`：關閉文件。\n\n18. `int main()`：主函式。\n\n19. `drawJapaneseFlag();`：調用`drawJapaneseFlag`函式，生成並保存日本國旗圖像。\n\n20. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n \n \n 中國五星旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// Function declarations\nvoid draw_chinese_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n// Flag dimensions\nint width = 300; // Flag width\nint height = 200; // Flag height\n\n// Create a true-color image\ngdImagePtr im = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(im, 0);\n\n// Draw the Chinese flag on the image\ndraw_chinese_flag(im);\n\n// Output the image to a PNG file\nFILE *outputFile = fopen("./../images/proc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\n\ngdImagePngEx(im, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(im);\n\nreturn 0;\n}\n\n// Function to draw the Chinese flag\nvoid draw_chinese_flag(gdImagePtr img) {\n// Get the dimensions of the image\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\n// Colors for the flag\nint red = gdImageColorAllocate(img, 255, 0, 0); // Red background\nint yellow = gdImageColorAllocate(img, 255, 255, 0); // Yellow stars\n\n// Draw the red background\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// Set the size and position of the large star\nint star_size = (int)(0.28 * height);\nint star_x = (int)(0.165 * width);\nint star_y = (int)(0.265 * height);\n\n// Draw the large star\ndraw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n// Draw small stars based on the actual flag proportions\ndouble radius = 0.15 * height;\ndouble angle = 360 / 7 * M_PI / 179.0;\ndouble rotation = -M_PI / 7.5;\nint cx = (int)(0.32 * width);\nint cy = (int)(0.27 * height);\n\n// Draw four small stars\nfor (int i = -1; i < 3; i++) {\nint x = (int)(cx + radius * cos(i * angle + rotation));\nint y = (int)(cy + radius * sin(i * angle + rotation));\ndraw_star(img, x, y, 19, yellow, M_PI / 5.0);\n}\n}\n\n// Function to draw a star\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\n\n// Calculate the outer and inner points of the star\ndouble outer_radius = size / 2;\ndouble inner_radius = size / 6;\ndouble angle = M_PI / 5.0;\n\nfor (int i = 0; i < 10; i++) {\ndouble radius = (i % 2 == 0) ? outer_radius : inner_radius;\ndouble theta = rotation_angle + i * angle;\npoints[i].x = x + radius * cos(theta);\npoints[i].y = y + radius * sin(theta);\n}\n\n// Use gdImageFilledPolygon to draw the star\ngdImageFilledPolygon(img, points, 10, color);\n}  \n 解釋： \n \n 這是一個使用C語言和gd圖形函式庫來繪製中國國旗的程式。程式首先創建了一個300x200的真彩色圖像，然後繪製了中國國旗的圖案，最後將圖像保存為PNG文件。\n\n1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_chinese_flag(gdImagePtr img);` 和 `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 300;` 和 `int height = 200;`：定義國旗的寬度和高度。\n\n7. `gdImagePtr im = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(im, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_chinese_flag(im);`：調用`draw_chinese_flag`函式，將中國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/proc_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(im, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(im);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_chinese_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red = gdImageColorAllocate(img, 255, 0, 0);` 和 `int yellow = gdImageColorAllocate(img, 255, 255, 0);`：為紅色和黃色分配顏色索引。\n\n19. `gdImageFilledRectangle(img, 0, 0, width, height, red);`：使用gdImageFilledRectangle函式繪製紅色背景。\n\n20. `int star_size = (int)(0.28 * height);`、`int star_x = (int)(0.165 * width);` 和 `int star_y = (int)(0.265 * height);`：設置大星星的大小和位置。\n\n21. `draw_star(img, star_x, star_y, star_size, yellow, 11.0);`：調用`draw_star`函式繪製大星星。\n\n22. `double radius = 0.15 * height;`、`double angle = 360 / 7 * M_PI / 179.0;`、`double rotation = -M_PI / 7.5;`、`int cx = (int)(0.32 * width);` 和 `int cy = (int)(0.27 * height);`：設置小星星的半徑、角度、旋轉和位置。\n\n23. `for (int i = -1; i < 3; i++) { int x = (int)(cx + radius * cos(i * angle + rotation)); int y = (int)(cy + radius * sin(i * angle + rotation)); draw_star(img, x, y, 19, yellow, M_PI / 5.0); }`：使用循環繪製四顆小星星。\n\n24. `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle)`：定義了一個函式，用於在圖像上繪製星星。\n\n25. `gdPoint points[10];`：定義了一個gdPoint數組，用於存儲星\n\n星的頂點座標。\n\n26. `double outer_radius = size / 2;`、`double inner_radius = size / 6;` 和 `double angle = M_PI / 5.0;`：計算星星的外半徑、內半徑和角度。\n\n27. `for (int i = 0; i < 10; i++) { double radius = (i % 2 == 0) ? outer_radius : inner_radius; double theta = rotation_angle + i * angle; points[i].x = x + radius * cos(theta); points[i].y = y + radius * sin(theta); }`：計算星星的頂點座標，並存儲在gdPoint數組中。\n\n28. `gdImageFilledPolygon(img, points, 10, color);`：使用gdImageFilledPolygon函式根據頂點座標繪製填充星星。 \n \n \n 英國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n// 設置國旗寬和高\nint width = 1200;\nint height = width / 2;\n\n// 創建圖像\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\n// 繪製英國國旗\ndraw_uk_flag(img);\n\n// 將圖像保存到文件\nFILE *outputFile = fopen("./../images/uk_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时发生错误。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\nint red, white, blue;\nred = gdImageColorAllocate(img, 204, 0, 0); // 红色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 153); // 藍色\n\ngdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\nint x1, y1, x2, y2, x3, y3;\n{\nint line_thickness = 100;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 繪製白色斜線\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, white);\n\nx1 = 0;\ny1 = 0;\nx2 = 1200;\ny2 = 600;\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\n\n// 繪製紅色斜線\nx1 = 566;\ny1 = 300;\nx2 = 1166;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 1233;\ny1 = 600;\nx2 = 633;\ny2 = 300;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 566;\ny1 = 300;\nx2 = -33;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 600;\ny1 = 316.5;\nx2 = 0;\ny2 = 616.5;\ngdImageLine(img, x1, y1, x2, y2, red);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 繪製 斜線\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red );\n\n\nx1 = 1200;\ny1 = 16.5;\nx2 = 600;\ny2 = 316.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\nx1 = 0;\ny1 = 583.5;\nx2 = 600;\ny2 = 283.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\n}\n\n// 繪製白色十字\nint cross_width = width / 32;\nint cross_arm_width = width / 32;\nint center_x = width / 2;\nint center_y = height / 2;\n\ngdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\ngdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n// 繪製紅色十字\ngdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\ngdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n 解釋： \n 這是一個使用C語言和gd圖形函式庫來繪製英國國旗的程式。程式首先創建了一個1200x600的真彩色圖像，然後繪製了英國國旗的圖案，最後將圖像保存為PNG文件。\n\n1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_uk_flag(gdImagePtr img);` 和 `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 1200;` 和 `int height = width / 2;`：定義國旗的寬度和高度。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_uk_flag(img);`：調用`draw_uk_flag`函式，將英國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/uk_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "打开输出文件时发生错误。\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_uk_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製英國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red, white, blue; red = gdImageColorAllocate(img, 204, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 153);`：為紅色、白色和藍色分配顏色索引。\n\n19. `gdImageFilledRectangle(img, 0, 0, width, height, blue);`：使用gdImageFilledRectangle函式繪製藍色背景。\n\n20. `int cross_width = width / 32;`、`int cross_arm_width = width / 32;`、`int center_x = width / 2;` 和 `int center_y = height / 2;`：計算十字的寬度、臂寬度和中心座標。\n\n21. `gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);` 和 `gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);`：使用gdImageFilledRectangle函式繪製白色十字。\n\n22. `gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);` 和 `gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);`：使用gdImageFilledRectangle函式繪製紅色十字。\n\n23. `int line_thickness = 100;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n24. `int x1, y\n\n1, x2, y2, x3, y3;`：定義三角形的頂點座標。\n\n25. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第一條線段。\n\n26. `x1 = 0; y1 = 0; x2 = 1200; y2 = 600;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第二條線段。\n\n27. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n28. `x1 = 566; y1 = 300; x2 = 1166; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第一條線段。\n\n29. `x1 = 1233; y1 = 600; x2 = 633; y2 = 300;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第二條線段。\n\n30. `x1 = 566; y1 = 300; x2 = -33; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第三條線段。\n\n31. `x1 = 600; y1 = 316.5; x2 = 0; y2 = 616.5;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第四條線段。\n\n32. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n33. `int x1, y1, x2, y2, x3, y3;`：重新定義三角形的頂點座標。\n\n34. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第五條線段。\n\n35. `x1 = 1200; y1 = 16.5; x2 = 600; y2 = 316.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第六條線段。\n\n36. `x1 = 0; y1 = 583.5; x2 = 600; y2 = 283.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第七條線段。\n\n37. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n38. `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color)`：定義了一個填充三角形的函式。\n\n39. `gdPoint points[3];`：定義了一個gdPoint數組，用於存儲三角形的頂點座標。\n\n40. `points[0].x = x1; points[0].y = y1;`、`points[1].x = x2; points[1].y = y2;` 和 `points[2].x = x3; points[2].y = y3;`：將頂點座標存儲在gdPoint數組中。\n\n41. `gdImageFilledPolygon(img, points, 3, color);`：使用gdImageFilledPolygon函式填充三角形。 \n \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8~9', 'text': '這兩周講解使用近端來編輯倉儲，內容大多繁雜，就算記住了操作的流程， 我完全不知道背後的意思是甚麼， 再加上近端編輯只能在學校使用，原因是網路設定上需要使用學校的固定ip，這樣大大限制了能使用的地點。這兩周上下來，只有感受到一大票內容是快速帶過，連想都來不及想就進入了下一階段，這樣是真的學不好。 \n', 'tags': '', 'url': 'w8~9.html'}, {'title': 'w10~11', 'text': '這兩周在講解我們使用replit、s1511、localhost，哪一種方式讓自己方便，在多方嘗試下來，我還是覺得我對於使用replit上更加熟悉，首先它本身在設計上就以為主方便，但唯一美中不足的點是他在使用時需要網路，且聽說明年會進行更改到時要維護倉儲只能選擇更加麻煩的 s1511和localhost來使用。兩周下來感覺我們之前所學的只是冰山一角的東西，replit對我來說可能有些東西也是不熟，但是現在又多了s1511和localhost，讓我自己感覺到自己的學識淺薄，不管是一些專業術語的英文還是整組的程式，也是大多都看不懂，整個上下來是真的好難心態疲勞。 \n \n', 'tags': '', 'url': 'w10~11.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE* outputFile = fopen("hellogd.png", "wb");  // Corrected FILE* declaration\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);\n\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);\n\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);\n\n    // 畫直線\n    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width / 4;\n    points[0].y = (int)height * 3 / 4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width / 3;\n    points2[0].y = (int)height / 2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '課堂考試第一題 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\n\nint main() {\nint width = 1200;\nint height = (int)(width * 2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\nint sun_radius = (int)(width / 8);\nint white_circle_dia = sun_radius;\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\nred = gdImageColorAllocate(img, 255, 0, 0);\nwhite = gdImageColorAllocate(img, 255, 255, 255);\nblue = gdImageColorAllocate(img, 0, 0, 149);\n\ngdImageFilledRectangle(img, 0, 0, width, height, red);\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n// 不含太陽的部分\n\n// 連接第二組ABED的白線\nint ax = 429;\nint ay = 125;\nint bx = 279;\nint by = 165;\nint ex = 170;\nint ey = 274;\nint dx = 170;\nint dy = 274;\n\ngdImageLine(img, ax, ay, bx, by, white);\ngdImageLine(img, bx, by, ex, ey, white);\ngdImageLine(img, ex, ey, dx, dy, white);\ngdImageLine(img, dx, dy, ax, ay, white);\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`：定義國旗的寬度和高度，根據指定的長寬比例計算。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_roc_flag(img);`：調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_roc_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中華民國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red, white, blue;`：定義紅色、白色和藍色的顏色索引。\n\n19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`：計算中心點的座標，使得白日位於青天面積正中央。\n\n20. `int sun_radius = (int)(width/8);`、`int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`：計算中央白日圓形、中央藍色圓形的半徑或直徑。\n\n21. `red = gdImageColorAllocate(img, 255, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`：為紅色、白色和藍色分配顏色索引。\n\n22. `gdImageFilledRectangle(img, 0, 0, width, height, red);` 和 `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`：分別使用gdImageFilledRectangle函式填充紅色和藍色的區 \n \n \n 上課第二堂求四個焦點 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n{int x1 = 429;\nint y1 = 125;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{int x1 = 170;\nint y1 = 274;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint x1 = 170;\nint y1 = 274;\nint x2 = 429;\nint y2 = 125;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n\n// 定義座標結構\ntypedef struct {\ndouble x;\ndouble y;\n} Point;\n\n// 計算圓與線的交點\nvoid circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n// 直線斜率\ndouble m = (y2 - y1) / (x2 - x1);\n\n// 直線方程式中的常數項\ndouble b = y1 - m * x1;\n\n// 圓與直線交點的計算\ndouble A = 1 + pow(m, 2);\ndouble B = 2 * (m * b - m * k - h);\ndouble C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n// 判斷交點個數\ndouble discriminant = pow(B, 2) - 4 * A * C;\nif (discriminant > 0) {\ndouble x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);\ndouble y_intersect1 = m * x_intersect1 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);\n\ndouble x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);\ndouble y_intersect2 = m * x_intersect2 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);\n} else if (discriminant == 0) {\ndouble x_intersect = -B / (2 * A);\ndouble y_intersect = m * x_intersect + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);\n} else {\nprintf("No points.\\n");\n}\n\n}\n\n\n// 圓的參數\ndouble circle_x = (int)(width/4); // 圓心 x 座標\ndouble circle_y = (int)(height/4); // 圓心 y 座標\ndouble radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑\n\n// 兩點座標\n\n\n\ndouble x3 = 170;\ndouble y3 = 274;\ndouble x4 = 279;\ndouble y4 = 165;\n\ncircleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n\ndouble x5 = 279;\ndouble y5 = 165;\ndouble x6 = 429;\ndouble y6 = 125;\n\ncircleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n} \n 解釋： \n 1. `#include <stdio.h>`: 引入標準輸入/輸出函式庫。\n2. `#include <gd.h>`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。\n3. `#include <math.h>`: 引入math函式庫，這裡主要使用了數學計算相關的函式。\n\n4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`: 函式聲明。\n\n5. `int main() {`: 主函式開始。\n\n6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`: 設置國旗的寬度和高度，符合3:2的寬高比。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`: 創建一個指定寬度和高度的真彩色圖像。\n\n8. `gdImageAlphaBlending(img, 0);`: 設置圖像的Alpha混合模式為關閉。\n\n9. `draw_roc_flag(img);`: 調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");`: 打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`: 檢查文件是否成功打開，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`: 使用gdImagePngEx函式將圖像寫入已打開的文件，指定壓縮級別為9。\n\n13. `fclose(outputFile);`: 關閉文件。\n\n14. `gdImageDestroy(img);`: 釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`: 主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_roc_flag(gdImagePtr img) {`: 定義了一個函式，用於在圖像上繪製中華民國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`: 獲取圖像的寬度和高度。\n\n18. `int red, white, blue;`: 定義紅色、白色和藍色的顏色索引。\n\n19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`: 計算中心點的座標，使白日位於青天面積正中央。\n\n20. `int sun_radius = (int)(width/8);`: 計算中央白日圓形的半徑。\n\n21. `int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`: 計算中央白日圓形直徑和中央藍色圓形半徑。\n\n22. `red = gdImageColorAllocate(img, 255, 0, 0);`, `white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`: 為紅色、白色和藍色分配顏色索引。\n\n23. `gdImageFilledRectangle(img, 0, 0, width, height, red);`: 用紅色填充整個圖像。\n\n24. `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`: 用藍色填充圖像的左上角區域，即青天。\n\n25. `{int x1 = 429; int y1 = 125; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製一條連接兩點的白色線。\n\n26. `{int x1 = 170; int y1 = 274; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製第二條連 \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'W16', 'text': '#include <stdio.h>\n#include <gd.h>\n\n// Function to draw the mass-spring-damper system\nvoid draw_system(const char* filename) {\n    int width = 600;\n    int height = 300;\n    int x_margin = 50;\n    int y_margin = 50;\n    int mass_radius = 20;\n    int spring_width = 4;\n    int damper_width = 4;\n\n    gdImagePtr img = gdImageCreate(width, height);\n    int background_color = gdImageColorAllocate(img, 255, 255, 255);\n    int mass_color = gdImageColorAllocate(img, 0, 0, 0);\n    int spring_color = gdImageColorAllocate(img, 0, 0, 0);\n    int damper_color = gdImageColorAllocate(img, 0, 0, 0);\n    int wall_color = gdImageColorAllocate(img, 0, 0, 0);\n\n    // Draw left wall\n    gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);\n\n    // Draw mass 1\n    int x1 = x_margin + 2 * mass_radius;\n    int y1 = height / 2;\n    gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);\n\n    // Draw spring 1\n    int spring1_start_x = x_margin;\n    int spring1_end_x = x1 - mass_radius;\n    int spring1_y = y1;\n    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);\n    gdImageSetThickness(img, spring_width);\n    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw damper 1\n    int damper1_start_x = x_margin / 2;\n    int damper1_end_x = x1 - mass_radius;\n    int damper1_y = y1;\n    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);\n    gdImageSetThickness(img, damper_width);\n    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw mass 2\n    int x2 = width - x_margin - 2 * mass_radius;\n    int y2 = height / 2;\n    gdImageFilledEllipse(img, x2, y2, mass_radius, mass_radius, mass_color);\n\n    // Draw spring 2\n    int spring2_start_x = x2 + mass_radius;\n    int spring2_end_x = width - x_margin;\n    int spring2_y = y2;\n    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);\n    gdImageSetThickness(img, spring_width);\n    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw damper 2\n    int damper2_start_x = width - x_margin + mass_radius;\n    int damper2_end_x = x2 + mass_radius;\n    int damper2_y = y2;\n    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);\n    gdImageSetThickness(img, damper_width);\n    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw right wall\n    gdImageLine(img, width - x_margin, y_margin, width - x_margin, height - y_margin, wall_color);\n\n    // Save the image to a file\n    FILE *output_file = fopen(filename, "wb");\n    gdImagePng(img, output_file);\n    fclose(output_file);\n\n    // Free the memory used by the image\n    gdImageDestroy(img);\n}\n\nint main() {\n    draw_system("mass_spring_damper_system.png");\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`: 引入標準輸入/輸出函式庫。\n\n2. `#include <gd.h>`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。\n\n3. `void draw_system(const char* filename) {`: 定義了一個名為`draw_system`的函式，用於繪製質點-彈簧-減震器系統。\n\n4. `int width = 600;`, `int height = 300;`: 定義圖像的寬度和高度。\n\n5. `int x_margin = 50;`, `int y_margin = 50;`: 定義圖像邊緣的水平和垂直邊距。\n\n6. `int mass_radius = 20;`, `int spring_width = 4;`, `int damper_width = 4;`: 定義質點、彈簧和減震器的相關尺寸。\n\n7. `gdImagePtr img = gdImageCreate(width, height);`: 創建一個指定寬度和高度的圖像。\n\n8. `int background_color = gdImageColorAllocate(img, 255, 255, 255);`, `int mass_color = gdImageColorAllocate(img, 0, 0, 0);`, `int spring_color = gdImageColorAllocate(img, 0, 0, 0);`, `int damper_color = gdImageColorAllocate(img, 0, 0, 0);`, `int wall_color = gdImageColorAllocate(img, 0, 0, 0);`: 分別為背景、質點、彈簧、減震器和牆分配顏色。\n\n9. `gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);`: 畫左牆，從圖像的左邊緣到底部。\n\n10. `int x1 = x_margin + 2 * mass_radius;`, `int y1 = height / 2;`: 設置質點1的座標。\n\n11. `gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);`: 在圖像上畫一個填充的橢圓，代表質點1。\n\n12. `int spring1_start_x = x_margin;`, `int spring1_end_x = x1 - mass_radius;`, `int spring1_y = y1;`: 設置彈簧1的起點、終點和y座標。\n\n13. `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`: 畫彈簧1。\n\n14. `gdImageSetThickness(img, spring_width);`, `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`, `gdImageSetThickness(img, 1);`: 設置彈簧1的寬度，畫彈簧，然後將寬度恢復為1。\n\n15. `int damper1_start_x = x_margin / 2;`, `int damper1_end_x = x1 - mass_radius;`, `int damper1_y = y1;`: 設置減震器1的起點、終點和y座標。\n\n16. `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`: 畫減震器1。\n\n17. `gdImageSetThickness(img, damper_width);`, `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`, `gdImageSetThickness(img, 1);`: 設置減震器1的寬度，畫減震器，然後將寬度恢復為1。\n\n18. 類似地，繪製了質點2、彈簧2和減震器2的元素，坐標分別為`x2`、`y2`、`spring2_start_x`、`spring2_end_x` \n \n #include <stdio.h>\n \n// System parameters\n#define M1 2.0\n#define M2 3.0\n#define K1 0.5\n#define K2 1.0\n#define K3 15.0\n#define C1 0.25\n#define C2 0.33\n#define C3 0.5\n \n// Function to calculate the derivative of the state\nvoid calculate_derivative(double t, double state[4], double derivative[4]) {\n    derivative[0] = state[2];  // dx1/dt = v1\n    derivative[1] = state[3];  // dx2/dt = v2\n \n    double delta_x = state[0] - state[1];\n \n    // dv1/dt\n    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;\n \n    // dv2/dt\n    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;\n}\n \n// Euler\'s Method for solving the system\nvoid euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {\n    FILE *output_file;\n    output_file = fopen("trajectory_data.txt", "w");\n \n    double t = t_initial;\n    double state[4];\n    for (int i = 0; i < 4; ++i) {\n        state[i] = initial_conditions[i];\n    }\n \n    while (t <= t_final) {\n        fprintf(output_file, "%f %f %f %f %f\\n", t, state[0], state[1], state[2], state[3]);\n \n        double derivative[4];\n        calculate_derivative(t, state, derivative);\n \n        for (int i = 0; i < 4; ++i) {\n            state[i] += derivative[i] * dt;\n        }\n \n        t += dt;\n    }\n \n    fclose(output_file);\n}\n \nint main() {\n    // Define the initial conditions\n    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2\n \n    // Time parameters\n    double t_initial = 0.0;\n    double t_final = 10.0;\n    double dt = 0.01;\n \n    // Solve the system using Euler\'s Method\n    euler_method(t_initial, t_final, dt, initial_conditions);\n \n    return 0;\n}\n \n \n \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'C_EX', 'text': '1 \n #include <stdio.h>\n\nint main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n\n/* 输出 a, b, c 到屏幕 */\nprintf("a = %3.1f, b = %3.1f, c = %d\\n", a, b, c);\n\nreturn 0;\n} \n \n 2 \n /* ====================\n   字元範例 1\n   ==================== */\n#include <stdio.h>\n\nint main()\n{\n    char x, y;\n\n    x = \'a\';\n    y = (char)97;\n\n    /* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\n    printf("x = %c, y = %c, ASCII of y = %d", x, y, y);\n\n    return 0;\n}\n \n \n 3 \n #include <stdio.h>\n\nint main()\n{\n    int a = 64;\n    int b = 0x40; // 以十六进制表示\n    long c = 64L;\n\n    // 打印变量的值\n    printf("%d, %d, %ld", a, b, c);\n\n    return 0;\n} \n \n 4 \n #include <stdio.h>\n\nint main()\n{\n    int a = 10, b = 5;\n\n    // 第一组比较\n    printf("a == b is %d\\n", a == b);\n    printf("a > b is %d\\n", a > b);\n    printf("a < b is %d\\n", a < b);\n    printf("a >= b is %d\\n", a >= b);\n    printf("a <= b is %d\\n", a <= b);\n    printf("a != b is %d\\n", a != b);\n\n    printf("\\n");\n\n    // 修改 b 的值\n    b = 10;\n\n    // 第二组比较\n    printf("a == b is %d\\n", a == b);\n    printf("a > b is %d\\n", a > b);\n    printf("a < b is %d\\n", a < b);\n    printf("a >= b is %d\\n", a >= b);\n    printf("a <= b is %d\\n", a <= b);\n    printf("a != b is %d\\n", a != b);\n\n    return 0;\n} \n \n 5 \n #include <stdio.h>\n\nvoid main()\n{\nint a;\n\n// 第一次输出\na = 3;\nprintf("%d\\n", !a); // 逻辑非运算，a为真，所以输出0\n\n// 第二次输出\na = 0;\nprintf("%d\\n", !a); // 逻辑非运算，a为假，所以输出1\n} \n \n 6 \n #include <stdio.h>\n\nvoid main()\n{\n    char a;\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of int is %zu\\n", sizeof(int));\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of char a is %zu\\n", sizeof(a));\n} \n \n 7 \n #include <stdio.h>\n\n/* ====================\n计算长方形面积, 需传入长与宽.\n==================== */\nint rect(int x, int y)\n{\n    int result;\n    result = x * y;\n    return result; /* 返回 result */\n}\n\n/* ====================\n主函数\n==================== */\nint main()\n{\n    int x = 8, y = 4;\n    int a;\n    a = rect(x, y);\n    printf("8*4 的面积是 %d", a);\n    return 0;\n} \n \n 8 \n #include <stdio.h>\nfloat circle( int r ); /* 宣告 circle 的 prototype */\nvoid main()\n{\nfloat answer;\nanswer = circle(8);\nprintf( " 圓周長度是 %f", answer );\n}\n/* ====================\n circle 函數, 計算 circle 的圓周長\n==================== */\nfloat circle( int r )\n{\nfloat result;\nresult = 3.14159 * (double)1001 * r;\nreturn ( result );\n} \n \n 9 \n #include <stdio.h>\n\nint main()\n{\n    char ch;\n\n    printf("输入一个字符：");\n\n    // 检查 scanf 的返回值，确保成功读取一个字符\n    if (scanf(" %c", &ch) != 1) {\n        printf("读取字符失败\\n");\n        return 1; // 或者采取其他错误处理措施\n    }\n\n    if (ch == \'a\') {\n        printf("您按下了 \'a\'\\n");\n    }\n\n    return 0;\n} \n \n 10 \n #include <stdio.h>\n\nvoid main()\n{\n    int i;\n\n    // 提示用户输入一个整数\n    printf("100：");\n\n    // 读取用户输入的整数\n    scanf("%d", &i);\n\n    // 判断输入的整数，并输出相应的消息\n    if (i < 100)\n    {\n        printf("i < 100\\n");\n    }\n    else\n    {\n        if ((i >= 100) && (i < 200))\n        {\n            printf("i >= 100 且 i < 200\\n");\n        }\n        else\n        {\n            printf("i >= 200\\n");\n        }\n    }\n} \n \n 看似有問題 \n 11 \n /* =========================\n function pointer 2\n========================= */\n#include <stdio.h>\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\nprintf(“ Hello\\n”);\n}\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\nprintf(“ World\\n”);\n}\n/* ====================\nmain function.\n==================== */\nint main()\n{\nvoid (*func[3])(void); /* 宣告一個 function pointer array */\nint i = 0 ;\nfunc[0] = Hello; /* 建立 Jumping table */\nfunc[1] = World;\nwhile(1)\n{\nprintf(“Input a number between 0 and 1 : ”);\nscanf( “%d”,&i );\n/* 若 I 大於等於 2 或是小於 0 則離開 loop */\nif( (i >= 2)||(i < 0) )\nbreak;\nelse\nfunc[ i ]( ); /* 執行! */\n}\nreturn 0;\n} \n 12 \n #include <stdio.h>\n\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\n    printf("Hello\\n");\n}\n\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\n    printf("World\\n");\n}\n\n/* ====================\nmain function.\n==================== */\nint main()\n{\n    void (*func[3])(void); /* 声明一个函数指针数组 */\n    int i = 0;\n\n    func[0] = Hello; /* 建立 Jumping table */\n    func[1] = World;\n\n    while (1)\n    {\n        printf("Input a number between 0 and 1: ");\n        scanf("%d", &i);\n\n        /* 如果 i 大于等于 2 或小于 0 则退出循环 */\n        if (i >= 2 || i < 0)\n            break;\n        else\n            func[i](); /* 执行函数 */\n    }\n\n    return 0;\n} \n \n 13 \n #include <stdio.h>\n\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\n    printf("Hello\\n");\n}\n\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\n    printf("World\\n");\n}\n\n/* ====================\nmain function.\n==================== */\nint main()\n{\n    void (*func[3])(void); /* 声明一个函数指针数组 */\n    int i = 0;\n\n    func[0] = Hello; /* 建立 Jumping table */\n    func[1] = World;\n\n    while (1)\n    {\n        printf("Input a number between 0 and 1: ");\n\n        // 检查 scanf 的返回值，确保成功读取一个整数\n        if (scanf("%d", &i) != 1)\n        {\n            printf("无效输入，请输入一个整数。\\n");\n            break;\n        }\n\n        /* 如果 i 大于等于 2 或小于 0 则退出循环 */\n        if (i >= 2 || i < 0)\n            break;\n        else\n            func[i](); /* 执行函数 */\n    }\n\n    return 0;\n} \n \n 22 \n /* ====================\n pointer to pointer – 1.\n==================== */\n#include <stdio.h>\n\nint main() {\n    char *Hello = "Hello";\n    char *World = "World";\n    char *GoodBye = "Good Bye";\n    char *StrArray[3];\n    char **Str;\n    int i;\n\n    Str = StrArray;\n    StrArray[0] = Hello;\n    StrArray[1] = World;\n    StrArray[2] = GoodBye;\n\n    // Print strings using array indexing\n    for (i = 0; i < 3; i++) {\n        printf("%s ", StrArray[i]);\n    }\n\n    // Print strings using pointer arithmetic\n    Str = StrArray;  // Reset the pointer to the beginning\n    for (i = 0; i < 3; i++) {\n        printf("%s ", *Str);\n        Str++;\n    }\n\n    return 0;\n} \n \n 23 \n #include <stdio.h>\n\nint main() {\nfloat this_is_a_number1, this_is_a_number2;\nint scanf_result; // Dummy variable to capture scanf\'s return value\n\n/* 读取输入的浮点数 */\nscanf_result = scanf("%f", &this_is_a_number1);\n\n/* 读取输入的浮点数 */\nscanf_result = scanf("%f", &this_is_a_number2);\n\n/* Your code here */\n\nreturn 0;\n} \n \n', 'tags': '', 'url': 'C_EX.html'}, {'title': 'CEX_T', 'text': '1 \n /* =========================\n struct – 3.\n========================= */\n#include <stdio.h>\n#include <string.h>\n\n/* ====================\n struct Mouse.\n==================== */\nstruct Mouse\n{\n    int xPos, yPos;\n    char Name[10];\n};\n\n/* ====================\n Copy Mouse 1\n==================== */\nvoid cpyMouse1(struct Mouse *tgt, struct Mouse *src)\n{\n    tgt->xPos = src->xPos;\n    tgt->yPos = src->yPos;\n    strcpy(tgt->Name, src->Name);\n}\n\n/* ====================\n main function.\n==================== */\nint main()\n{\n    struct Mouse myMouse, yourMouse;\n\n    yourMouse.xPos = 10;\n    yourMouse.yPos = 20;\n    strcpy(yourMouse.Name, "Mickey");\n\n    cpyMouse1(&myMouse, &yourMouse);\n\n    printf("Name: %s, X: %d, Y: %d\\n", myMouse.Name, myMouse.xPos, myMouse.yPos);\n\n    return 0;\n} \n \n 2 \n /* =========================\n #define 的範例 2.\n========================= */\n#include <stdio.h>\n\n#define TRUE 1\n#define FALSE 0\n#define BOOL int\n\n/* ====================\n如果傳入值大於 10, 則傳回 TRUE\n==================== */\nBOOL is_greater_than_10(int i)\n{\n    if (i > 10)\n        return TRUE;\n    else\n        return FALSE;\n}\n\n/* ====================\n main function.\n==================== */\nint main()\n{\n    int i;\n    BOOL result;\n\n    printf("Input a number: ");\n\n    // 檢查 scanf 的返回值\n    if (scanf("%d", &i) != 1) {\n        printf("Error reading input.\\n");\n        return 1;  // 返回非零值表示錯誤\n    }\n\n    result = is_greater_than_10(i);\n\n    if (result == TRUE)\n        printf("Greater than 10!\\n"); /* 大於 10 */\n    else\n        printf("Not greater than 10!\\n"); /* 不大於 10 */\n\n    return 0;\n} \n \n 3 \n /* ====================\n & operator.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int *pointer_a, a;\n    pointer_a = &a;\n    a = 10;\n\n    printf("%d, %d\\n", a, *pointer_a);\n\n    return 0;\n} \n \n 4 \n /* ====================\npointer – 6\n==================== */\n#include <stdio.h>\n\nint main()\n{\nchar *str = "Eric";\n\nprintf("%c\\n", *(str + 0)); /* 也可寫 printf("%c", str[0] ); */\nprintf("%c\\n", *(str + 1)); /* 也可寫 printf("%c", str[1] ); */\nprintf("%c\\n", *(str + 2)); /* 也可寫 printf("%c", str[2] ); */\nprintf("%c\\n", *(str + 3)); /* 也可寫 printf("%c", str[3] ); */\n\nreturn 0;\n} \n \n 5 \n /* ====================\n 2d array.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int array[3][3];\n    int x, y;\n\n    array[0][0] = 1;\n    array[0][1] = 2;\n    array[0][2] = 3;\n    array[1][0] = 4;\n    array[1][1] = 5;\n    array[1][2] = 6;\n    array[2][0] = 7;\n    array[2][1] = 8;\n    array[2][2] = 9;\n\n    for (x = 0; x < 3; x++)\n    {\n        for (y = 0; y < 3; y++)\n        {\n            printf("%d,", array[x][y]);\n        }\n    }\n\n    return 0;\n} \n \n 6 \n /* ====================\n array - 1.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int grade[5]; /* size = 5 的 array */\n    int i;\n\n    grade[0] = 75; /* 1st element */\n    grade[1] = 80; /* 2nd element */\n    grade[2] = 85; /* 3rd element */\n    grade[3] = 70; /* 4th element */\n    grade[4] = 90; /* 5th element */\n\n    for (i = 0; i < 5; i++)\n    {\n        printf("Number %d = %d\\n", i, grade[i]);\n    }\n\n    return 0;\n} \n \n 7 \n /* ====================\n do - while.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int i, j;\n    i = 0;\n    j = 10; /* 迴圈外先設定初值 */\n\n    do\n    {\n        printf("i = %d, ", i);\n        printf("j = %d\\n", j);\n        i++;\n        j++;\n    } while (i < 6); /* 檢查條件的地方 */\n\n    return 0;\n} \n \n 8 \n /* ====================\n99 乘法.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int x, y;\n\n    for (x = 1; x <= 9; x++)\n    {\n        for (y = 1; y <= 9; y++)\n        {\n            printf("%2d ", x * y);  /* 使用 %2d 以確保數字的對齊性 */\n        }\n        printf("\\n");\n    }\n\n    return 0;\n} \n \n 9 \n /* ====================\n Program "continue"\n ==================== */\n#include <stdio.h>\n\nint main()\n{\n    int i;\n\n    for (i = 0; i < 10; i++)\n    {\n        if ((i == 1) || (i == 2) || (i == 3))\n        {\n            continue; /* 忽略以後的 program, 回到 for. */\n        }\n        printf("i = %d\\n", i);\n    }\n\n    return 0;\n} \n \n 10 \n /* ====================\nswitch - case 的範例 3.\n==================== */\n#include <stdio.h>\n\nint main()\n{\nchar c;\n\nprintf("Input a char: ");\n\n// 檢查 scanf 的返回值\nif (scanf("%c", &c) != 1)\n{\nprintf("Error reading input.\\n");\nreturn 1; // 返回非零值表示錯誤\n}\n\nswitch (c)\n{\ncase \'a\':\nprintf("You pressed a\\n");\nbreak;\ncase \'b\':\nprintf("You pressed b\\n");\nbreak;\ncase \'c\':\nprintf("You pressed c\\n");\nbreak;\ndefault:\nprintf("Unrecognized input\\n");\nbreak;\n}\n\nreturn 0;\n} \n \n', 'tags': '', 'url': 'CEX_T.html'}, {'title': 'ANSIC', 'text': '1 \n #include <stdio.h>\n#include <string.h>\n\nint main() {\n    int n, x = 0;\n\n    printf("\\n\\n Check whether a given number is an ugly number:\\n");\n    printf("----------------------------------------------------\\n");\n\n    // 检查 scanf 的返回值\n    if (scanf("%d", &n) != 1) {\n        printf("Input is not a valid integer.\\n");\n        return 1;  // 退出程序，表示出现错误\n    }\n\n    if (n <= 0) {\n        printf("Input a correct number.\\n");\n    } else {\n        while (n != 1) {\n            if (n % 5 == 0) {\n                n /= 5;\n            } else if (n % 3 == 0) {\n                n /= 3;\n            } else if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                printf("It is not an ugly number.\\n");\n                x = 1;\n                break;\n            }\n        }\n\n        if (x == 0) {\n            printf("It is an ugly number.\\n");\n        }\n    }\n\n    return 0;\n} \n \n 2 \n #include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t epoch = 0;\n\n    printf("\\n自纪元开始以来的秒数：%ld\\n", (long)epoch);\n    printf("对应的日期和时间：%s\\n", asctime(gmtime(&epoch)));\n\n    return 0;\n} \n \n 3 \n #define __STDC_WANT_LIB_EXT1__ 1\n#include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t t = time(NULL);\n    printf("\\nThe calendar time expressed as a local Time is :");   \n    printf("\\nUTC:   %s", asctime(gmtime(&t)));\n    printf("local: %s\\n", asctime(localtime(&t)));\n\n#ifdef __STDC_LIB_EXT1__\n    struct tm buf;\n    char str[26];\n\n    asctime_s(str, sizeof str, gmtime_s(&t, &buf));\n    printf("UTC:   %s", str);\n\n    asctime_s(str, sizeof str, localtime_s(&t, &buf));\n    printf("local: %s", str);\n#endif\n\n    return 0;\n} \n \n 4 \n #include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    // 设置时区为“Asia/Calcutta”\n    setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);   \n\n    // 获取并打印当前日期和时间\n    struct tm tm = *localtime(&(time_t){time(NULL)});\n    printf("\\n今天是 :            %s", asctime(&tm));\n    printf("(夏令时 %s)\\n", tm.tm_isdst ? "生效中" : "未生效");\n\n    // 将月份减去 24，表示 24 个月前的日期和时间\n    tm.tm_mon -= 24;  \n\n    // 重新计算时间\n    mktime(&tm);       \n\n    // 获取并打印 24 个月前的日期和时间\n    printf("\\n24个月前的日期是 : %s", asctime(&tm));\n    printf("(夏令时 %s)\\n\\n", tm.tm_isdst ? "生效中" : "未生效");\n\n    return 0;\n} \n \n 5 \n #include <stdio.h>\n#include <limits.h>\n\ndouble powxn(double x, int n) {\n    double k;\n    if (n == 0) return 1;\n    k = powxn(x * x, n / 2);\n    if (n % 2) k = k * x;\n    return k;\n}\n\nint main(void)\n{\n    double x = 7.0;\n    int n = 2;\n    printf("\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ",powxn(x, n));\n    x = 6.2;\n    n = 3;\n    printf("\\n\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ",powxn(x, n));\n    return 0;\n} \n \n 6 \n //Source: https://bit.ly/2KNsta8\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nchar* fractionToDecimal(int numerator, int denominator) {\n    char *p;\n    int psz, n, *dec, dsz, x;\n    long long num, den, k, f;\n    int i, repeat_at;\n    int neg = 0;\n\n    psz = dsz = 100; n = x = 0;\n    p = malloc(psz * sizeof(char));\n\n    neg = ((numerator > 0 && denominator < 0) ||\n           (numerator < 0 && denominator > 0)) ? 1 : 0;\n    num = numerator;\n    den = denominator;\n    num = (num < 0) ? -num : num;\n    den = (den < 0) ? -den : den;\n\n    k = num / den;\n    f = num % den;\n\n    if (neg && (k || f)) p[n ++] = \'-\';\n\n    n += sprintf(&p[n], "%lld", k);\n    if (!f) {\n        p[n] = 0;\n        return p;\n    }\n\n    p[n ++] = \'.\';\n\n    dec = malloc(dsz * sizeof(int));\n\n    repeat_at = -1;\n    if (f < 0) f = -f;\n    while (f) {\n        for (i = 0; i < x; i += 2) {\n            if (dec[i] == f) {\n                repeat_at = i;\n                goto done;\n            }\n        }\n        if (x + 1 >= dsz) {\n            dsz *= 2;\n            dec = realloc(dec, dsz * sizeof(int));\n        }\n        dec[x ++] = f;\n        f *= 10;\n        k = f / den;\n        dec[x ++] = k;\n        f = f % den;\n    }\n\ndone:\n    for (i = 0; i < x; i += 2) {\n        if (n + 3 > psz) {\n            psz *= 2;\n            p = realloc(p, psz * sizeof(char));\n        }\n        if (repeat_at == i) {\n            p[n ++] = \'(\';\n        }\n        p[n ++] = \'0\' + dec[i + 1];\n    }\n    if (repeat_at != -1) p[n ++] = \')\';\n    p[n ++] = 0;\n\n    free(dec);\n\n    return p;\n}\n\nint main(void)\n{\n    int n = 3;\n    int d = 2;\n    printf("\\nn = %d, d = %d  ", n, d);\n    printf("\\nFractional part: %s ", fractionToDecimal(n, d));\n\n    n = 4;\n    d = 7;\n    printf("\\n\\nn = %d, d = %d  ", n, d);\n    printf("\\nFractional part: %s ", fractionToDecimal(n, d));\n\n    return 0;\n} \n \n 7 \n #include <stdio.h>\n\nint main() {\n    int fno, sno, *ptr, *qtr, sum;  // 宣告整數變數 fno, sno, sum，以及整數指標 ptr, qtr\n\n    printf("\\n\\n Pointer : Add two numbers :\\n");\n    printf("--------------------------------\\n");\n\n    printf(" Input the first number : ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &fno) != 1) {\n        fprintf(stderr, "Error: Invalid input for the first number.\\n");\n        return 1;\n    }\n\n    printf(" Input the second number : ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &sno) != 1) {\n        fprintf(stderr, "Error: Invalid input for the second number.\\n");\n        return 1;\n    }\n\n    ptr = &fno;  // 將 fno 的地址賦值給指標 ptr\n    qtr = &sno;  // 將 sno 的地址賦值給指標 qtr\n\n    sum = *ptr + *qtr;  // 解參考 ptr 和 qtr，取得值並計算它們的和\n\n    printf(" The sum of the entered numbers is : %d\\n\\n", sum);  // 輸出輸入數字的總和\n\n    return 0;\n} \n \n 8 \n #include <stdio.h>\n\nint main() {\n    int arr[10];  // 宣告一個大小為10的整數數組，用於存儲使用者輸入的整數\n    int i;\n\n    // 提示用戶輸入十個整數\n    printf("\\n\\nRead and Print elements of an array:\\n");\n    printf("-----------------------------------------\\n");\n    printf("Input 10 elements in the array :\\n");\n\n    // 使用迴圈接受用戶輸入，並將整數存入數組\n    for (i = 0; i < 10; i++) {\n        printf("element - %d : ", i);\n\n        // 檢查 scanf 的返回值，確保成功讀取一個整數\n        if (scanf("%d", &arr[i]) != 1) {\n            fprintf(stderr, "Error: Invalid input for element %d.\\n", i);\n            return 1;  // 如果輸入無效，返回錯誤碼\n        }\n    }\n\n    // 顯示數組中的所有元素\n    printf("\\nElements in array are: ");\n    for (i = 0; i < 10; i++) {\n        printf("%d  ", arr[i]);\n    }\n\n    printf("\\n");\n    return 0;\n} \n \n 9 \n #include <stdio.h>\n\nint main() {\n    int days, years, weeks;\n\n    days = 1329; // 總天數\n\n    // 將天數轉換為年、週和天\n    years = days / 365;  // 計算年數\n    weeks = (days % 365) / 7;  // 計算週數\n    days = days % 7;  // 計算剩餘的天數\n\n    // 輸出結果\n    printf("Years: %d\\n", years);\n    printf("Weeks: %d\\n", weeks);\n    printf("Days: %d\\n", days);\n\n    return 0;\n} \n \n 10 \n #include <stdio.h>\n\nint main() {\n    double wi1, ci1, wi2, ci2, result; // 宣告變數，用於存儲物品的重量和數量\n\n    // 提示用戶輸入物品1的重量\n    printf("Weight - Item1: ");\n    if (scanf("%lf", &wi1) != 1) {\n        fprintf(stderr, "Error: Invalid input for weight of item1.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品1的數量\n    printf("No. of item1: ");\n    if (scanf("%lf", &ci1) != 1) {\n        fprintf(stderr, "Error: Invalid input for count of item1.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品2的重量\n    printf("Weight - Item2: ");\n    if (scanf("%lf", &wi2) != 1) {\n        fprintf(stderr, "Error: Invalid input for weight of item2.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品2的數量\n    printf("No. of item2: ");\n    if (scanf("%lf", &ci2) != 1) {\n        fprintf(stderr, "Error: Invalid input for count of item2.\\n");\n        return 1;\n    }\n\n    // 計算平均值\n    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);\n\n    // 輸出平均值\n    printf("Average Value = %f\\n", result);\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'ANSIC_T', 'text': '1 \n #include <stdio.h>\n\nint main() {\n    int x;    // 用於存儲總里程的變數，以公里為單位\n    float y;  // 用於存儲總耗油量的變數，以升為單位\n\n    // 提示用戶輸入總里程並存入 \'x\'\n    printf("Input total distance in km: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &x) != 1) {\n        fprintf(stderr, "Error: Invalid input for total distance.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入總耗油量並存入 \'y\'\n    printf("Input total fuel spent in liters: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個浮點數\n    if (scanf("%f", &y) != 1) {\n        fprintf(stderr, "Error: Invalid input for total fuel spent.\\n");\n        return 1;\n    }\n\n    // 計算並打印平均油耗\n    printf("Average consumption (km/lt) %.3f ", x / y);\n    printf("\\n");\n\n    return 0;\n} \n \n 2 \n #include <stdio.h>\n\nint main() {\n    float x, y, z, P; // 宣告變數，用於存儲三角形的邊長和周長\n\n    // 提示用戶輸入三個邊長並存入 \'x\', \'y\', 和 \'z\'\n    printf("\\nInput the first number: ");\n    if (scanf("%f", &x) != 1) {\n        fprintf(stderr, "Error: Invalid input for the first number.\\n");\n        return 1;\n    }\n\n    printf("\\nInput the second number: ");\n    if (scanf("%f", &y) != 1) {\n        fprintf(stderr, "Error: Invalid input for the second number.\\n");\n        return 1;\n    }\n\n    printf("\\nInput the third number: ");\n    if (scanf("%f", &z) != 1) {\n        fprintf(stderr, "Error: Invalid input for the third number.\\n");\n        return 1;\n    }\n\n    if (x < (y + z) && y < (x + z) && z < (y + x)) // 檢查是否可以構成三角形\n    {\n        P = x + y + z; // 計算周長\n        printf("\\nPerimeter  = %.1f\\n", P); // 輸出周長\n    } else {\n        printf("Not possible to create a triangle..!"); // 如果無法構成三角形，輸出相應的信息\n    }\n\n    return 0;\n} \n \n 3 \n #include <stdio.h>\n\nint main() {\n    int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和\n\n    // 提示用戶輸入五個數字並存入數組\n    for (j = 0; j < 5; j++) {\n        printf("\\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));\n        if (scanf("%d", &numbers[j]) != 1) {\n            fprintf(stderr, "Error: Invalid input for the %s number.\\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));\n            return 1;\n        }\n    }\n\n    for (j = 0; j < 5; j++) {\n        if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數\n        {\n            total += numbers[j]; // 將奇數添加到總和中\n        }\n    }\n\n    printf("\\nSum of all odd values: %d", total); // 輸出所有奇數的總和\n    return 0;\n} \n \n 4 \n #include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nint divide_two(int dividend_num, int divisor_num) {\n    int sign = (float)dividend_num / divisor_num > 0 ? 1 : -1;\n    unsigned int dvd = dividend_num > 0 ? dividend_num : -dividend_num;\n    unsigned int dvs = divisor_num > 0 ? divisor_num : -divisor_num;\n    unsigned int bit_num[33];\n    unsigned int i = 0;\n    long long d = dvs;\n\n    bit_num[i] = d;\n    while (d <= dvd) {\n        bit_num[++i] = d = d << 1;\n    }\n    i--;\n\n    unsigned int result = 0;\n    while (dvd >= dvs) {\n        if (dvd >= bit_num[i]) {\n            dvd -= bit_num[i];\n            result += (1 << i);\n        } else {\n            i--;\n        }\n    }\n\n    if (result > INT_MAX && sign > 0) {\n        return INT_MAX;\n    }\n    return (int)result * sign;\n}\n\nint main(void) {\n    int dividend_num = 15;\n    int divisor_num = 3;\n    printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));\n    return 0;\n} \n \n 5 \n #include <stdio.h>\n\n// inline function to check if a given integer is even\ninline int is_even(int n) {\n    return n % 2 == 0;\n}\n\nint main() {\n    int num;\n\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &num) != 1) {\n        fprintf(stderr, "Error: Invalid input. Please enter a valid integer.\\n");\n        return 1;\n    }\n\n    if (is_even(num)) {\n        printf("%d is even.\\n", num);\n    } else {\n        printf("%d is odd.\\n", num);\n    }\n\n    return 0;\n} \n \n 6 \n #include <stdio.h>\n\n\ninline float celsius_To_Fahrenheit(float celsius) {\n  return (celsius * 9 / 5) + 32;\n}\ninline float fahrenheit_To_Celsius(float fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nint main() {\n  float celsius = 40;\n  float fahrenheit = 89.60;\n  printf("%.2f Celsius is equal to %.2f Fahrenheit\\n", celsius, celsius_To_Fahrenheit(celsius));\n  printf("\\n%.2f Fahrenheit is equal to %.2f Celsius\\n", fahrenheit,\n    fahrenheit_To_Celsius(fahrenheit));\n  return 0;\n} \n \n 7 \n #include <stdio.h>\n\nint main() {\n    int a, b;\n\n    // Prompt user for input\n    printf("Input two pairs values (integer values):\\n");\n\n    // Read two integer values from user and store them in \'a\' and \'b\'\n    if (scanf("%d %d", &a, &b) != 2) {\n        fprintf(stderr, "Error: Invalid input. Please enter two integer values.\\n");\n        return 1;  // Return an error code for invalid input\n    }\n\n    // Check if \'a\' is not equal to \'b\'\n    if (a != b) {\n        // Check if \'b\' is greater than \'a\'\n        if (b > a) {\n            printf("Ascending order\\n");  // Print message for ascending order\n        } else {\n            printf("Descending order\\n");  // Print message for descending order\n        }\n    }\n\n    return 0;  // End of program\n} \n \n 8 \n #include <stdio.h>\n\nint main(void) {\n    unsigned char char1, char2, char3, char4, char5, char6, char7, char8;\n\n    // Print table header\n    printf("|---------------------------------------------------------------------------------------------------------|\\n");\n    printf("|extended ASCII table - excluding control characters                                                      |\\n");\n    printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\\n");\n    printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\\n");\n\n    // Loop through characters\n    for (int i = 0; i < 32; i++) {\n        // Calculate characters for different ranges\n        char1 = i;\n        char2 = i + 32;\n        char3 = i + 64;\n        char4 = i + 96;\n        char5 = i + 128;  // extended ASCII characters\n        char6 = i + 160;\n        char7 = i + 192;\n        char8 = i + 224;\n\n        // Print characters and their decimal and hexadecimal representations\n        printf("|  %c %3d %#x ", char2, char2, char2);\n        printf("|  %c %3d %#x ", char3, char3, char3);\n\n        // Special case for DEL character\n        if (char4 == 127) {\n            printf("|%s %3d %#x |", "DEL", char4, char4);\n        } else {\n            printf("|  %c %3d %#x |", char4, char4, char4);\n        }\n\n        // Print extended ASCII characters for the current system.\n        printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\\n",\n               char5, char5, char5,\n               char6, char6, char6,\n               char7, char7, char7,\n               char8, char8, char8);\n    }\n\n    return 0;  // Indicate successful execution of the program\n} \n \n 9 \n #include <stdio.h>\n\nint main() {\n    int x; // Declare variable x\n\n    // Print header for the table\n    printf("x+1\\tx+3\\tx+5\\tx+7\\n\\n");\n    printf("---------------------------\\n");\n\n    // Loop to generate and print table values\n    for (x = 1; x <= 15; x += 3)\n        printf("%d\\t%d\\t%d\\t%d\\n", x, (x + 2), (x + 4), (x + 6));\n\n    return 0; // Indicate successful program execution\n} \n \n 10 \n #include <stdio.h>\n\nint main() {\n    // 声明变量\n    float principal_amt, rate_of_interest, days, interest;\n    const int yearInDays = 365; // 用于转换利率的常量\n\n    // 提示用户输入贷款金额\n    printf("输入贷款金额 (输入 0 退出): ");\n    if (scanf("%f", &principal_amt) != 1) {\n        fprintf(stderr, "Error: Invalid input for loan amount.\\n");\n        return 1;\n    }\n\n    // 主循环用于处理贷款\n    while ((int)principal_amt != 0) \n    {\n        // 提示用户输入利率\n        printf("输入利率: ");\n        if (scanf("%f", &rate_of_interest) != 1) {\n            fprintf(stderr, "Error: Invalid input for interest rate.\\n");\n            return 1;\n        }\n\n        // 提示用户输入贷款期限（天）\n        printf("输入贷款期限（天）: ");\n        if (scanf("%f", &days) != 1) {\n            fprintf(stderr, "Error: Invalid input for loan term.\\n");\n            return 1;\n        }\n\n        // 计算利息\n        interest = (principal_amt * rate_of_interest * days) / yearInDays;\n\n        // 显示利息金额\n        printf("利息金额为 $%.2f\\n", interest);\n\n        // 提示用户输入下一个贷款金额\n        printf("\\n\\n输入贷款金额 (输入 0 退出): ");\n        if (scanf("%f", &principal_amt) != 1) {\n            fprintf(stderr, "Error: Invalid input for loan amount.\\n");\n            return 1;\n        }\n    }\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'ANSIC_T.html'}, {'title': '期末總結', 'text': '上完課程後我覺得我個人分數60分。每周的上課進度和作業，我會的就盡量做不懂的就去請教會的同組同學，雖然這樣也導致同組同學花更多時間在教我，但比起甚麼都不會放棄來的好。我對於這類的課程相對來說非常不熟悉，就算是在高職有上過C++的課程聽了之後還是不解，所以在這門課我已經是想盡方法去完成作業跟進度，還請老師高抬貴手別當我感謝。 \n A: 是否按照進度明確標示倉儲的改版歷程。是，有照進度標示。 \n B: 是否根據\xa0IPv4 與 IPv6\xa0網路環境設定進行作法討論。是，有錄製影片。 \n \n \n C: 是否就\xa0Replit、s.cycu.org 與 localhost\xa0情境下對個人與分組倉儲進行設定操作。 \n \n \n D: 是否完成 上課內容 中的 Exercises?是，但第九周的課程內容不大了解 \n E: 是否完成\xa0 w2-w5 \xa0 週任務中的 Exercises。是，成品放在個人網址上了。 \n F: 是否完成\xa0 w6-w7 \xa0 週任務中的練習一與練習二。是，成品放在個人網址上了。 \n G: 是否完成 C 結合 gd 繪圖程式庫, 畫出\xa0 PROC ( 規格 ), \xa0 United Kingdom ( 規格 ), \xa0 Japan ( 規格 ) 。是，成品放在個人網址上了。 \n H: 是否完成 w16 Final Project。是，但不知道是否正確完成。 \n \n \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};