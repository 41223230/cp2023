var tipuesearch = {"pages": [{'title': 'First', 'text': 'About \n  https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'First.html'}, {'title': 'w1', 'text': '心得：學期開學第一周，一開始對於這門課內容不知道要上甚麼，但是經過老師介紹了replit和githb之後，了解了他們的用途以及之後課程使用，這讓我對這門課印象深刻。 \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w2~w3', 'text': '心得：在這兩周過程中，我們創建了replit和github帳號，也將這兩個app成功的連結。接下來是創建自己的倉儲，過程當中發生系統間的權限上的問題也成功排除。接下來還有講解網路設定，過程也有說到系上整個的網路是怎麼作業，以及上課時的設定 \n \n 網路設定 \n \n \n', 'tags': '', 'url': 'w2~w3.html'}, {'title': 'w4~w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n 解釋 ： \n \n 這是一個使用C語言編寫的程式，它使用了標準的stdio.h標頭文件，並包含了一個主函式main。\n\n1. `#include <stdio.h>`：這行指令包含了標準輸入/輸出函式庫，這是C語言中用於處理輸入和輸出的函式庫。\n\n2. `int main()`：這是C程式的進入點，所有的執行都從這裡開始。它返回一個整數值，通常是0，表示程式執行成功。\n\n3. `FILE *gnuplotPipe = popen("gnuplot -persistent", "w");`：這行程式碼使用popen函式啟動一個Gnuplot進程，並返回一個文件指標（FILE *gnuplotPipe），該指標用於向Gnuplot進程寫入命令。這個Gnuplot進程使用-persistent選項，表示它將保持打開，而不是在每次繪圖後自動關閉。\n\n4. `if (!gnuplotPipe) { fprintf(stderr, "Failed to start Gnuplot.\\n"); return 1; }`：這是一個錯誤檢查，確保成功啟動了Gnuplot進程。如果popen失敗，則向標準錯誤流（stderr）輸出錯誤消息，並返回1表示程式執行失敗。\n\n5. `fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");`：這行程式碼向Gnuplot進程發送命令，設置輸出的圖形格式為PNG，指定字體為默認字體，大小為800x400。\n\n6. `fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");`：這行程式碼指定輸出圖形的文件路徑和名稱。\n\n7. `fprintf(gnuplotPipe, "plot sin(x)");`：這行程式碼發送Gnuplot繪圖命令，這裡是繪製sin(x)函數。\n\n8. `pclose(gnuplotPipe);`：這行程式碼關閉與Gnuplot進程的連接，確保在結束時清理相關資源。\n\n9. `return 0;`：主函式執行成功，返回0表示程式執行成功。 \n \n 心得：進入了第四、五周，除了建立了自己的考試帳號，也將自己的網站加設上了密碼，還有在replit中設定g nuplot環境設定，來完成課堂上的作業。 \n \n \n', 'tags': '', 'url': 'w4~w5.html'}, {'title': 'w6', 'text': '台灣國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// cc roc_flag.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n    // red rectangle area\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // blue rectangle area\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    float angle = 0;\n    int fromX, fromY;\n    int toX, toY;\n    for (int i=0; i<24; i++){\n        angle += 5*M_PI*2/12;\n        //printf("%.3f", angle);\n        toX = center_x + cos(angle)*sun_radius;\n        toY = center_y + sin(angle)*sun_radius;\n        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖\n        if (i!=0){\n            gdImageLine(img, fromX, fromY, toX, toY, color);\n        }\n        fromX = toX;\n        fromY = toY;\n   }\n}\n \n \n \n \n 美國國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_United_States\n// https://www.britannica.com/topic/flag-of-the-United-States-of-America\n// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars\n    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars\n    int star_start_x = (int)(0.0616 * height); // Starting X position for stars\n    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x;\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // Fill the star with white color\n    gdImageFilledPolygon(img, points, 10, color);\n}\n \n \n 台灣正式國旗 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '日本國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <gdfonts.h>\n\nvoid drawJapaneseFlag() {\n    int flagWidth = 300;\n    int flagHeight = 200;\n\n    gdImagePtr img;\n    FILE *pngout; // Corrected the FILE pointer declaration\n\n    img = gdImageCreateTrueColor(flagWidth, flagHeight);\n\n    // 設置白色背景\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    gdImageFill(img, 0, 0, white);\n\n    // 設置紅色\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n\n    // 繪製紅色圓圈\n    int circleRadius = 50;\n    int circleCenterX = flagWidth / 2;\n    int circleCenterY = flagHeight / 2;\n\n    gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red); // Corrected the ellipse dimensions\n\n    // 輸出 PNG 文件\n    pngout = fopen("japanese_flag.png", "wb");\n    gdImagePng(img, pngout);\n\n    // 釋放內存\n    gdImageDestroy(img);\n    fclose(pngout);\n}\n\nint main() {\n    drawJapaneseFlag();\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <gdfonts.h>`：包含gd函式庫中的字型定義。\n\n4. `void drawJapaneseFlag()`：定義了一個名為`drawJapaneseFlag`的函式，用於繪製日本國旗。\n\n5. `int flagWidth = 300;` 和 `int flagHeight = 200;`：定義了國旗的寬度和高度。\n\n6. `gdImagePtr img;`：聲明了一個指向gdImage的指標，這將用於創建和處理圖像。\n\n7. `FILE *pngout;`：聲明了一個指向文件的指標，用於將最終的PNG圖像寫入文件。\n\n8. `img = gdImageCreateTrueColor(flagWidth, flagHeight);`：使用`gdImageCreateTrueColor`函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n9. `int white = gdImageColorAllocate(img, 255, 255, 255);`：為白色分配一個顏色索引。\n\n10. `gdImageFill(img, 0, 0, white);`：使用`gdImageFill`函式將整個圖像填充為白色。\n\n11. `int red = gdImageColorAllocate(img, 255, 0, 0);`：為紅色分配一個顏色索引。\n\n12. `int circleRadius = 50;`、`int circleCenterX = flagWidth / 2;` 和 `int circleCenterY = flagHeight / 2;`：定義了圓圈的半徑和中心座標。\n\n13. `gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red);`：使用`gdImageFilledEllipse`函式在圖像上畫一個填充紅色的橢圓（圓圈）。\n\n14. `pngout = fopen("japanese_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n15. `gdImagePng(img, pngout);`：使用`gdImagePng`函式將圖像寫入已打開的文件。\n\n16. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n17. `fclose(pngout);`：關閉文件。\n\n18. `int main()`：主函式。\n\n19. `drawJapaneseFlag();`：調用`drawJapaneseFlag`函式，生成並保存日本國旗圖像。\n\n20. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n \n \n 中國五星旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// Function declarations\nvoid draw_chinese_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n// Flag dimensions\nint width = 300; // Flag width\nint height = 200; // Flag height\n\n// Create a true-color image\ngdImagePtr im = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(im, 0);\n\n// Draw the Chinese flag on the image\ndraw_chinese_flag(im);\n\n// Output the image to a PNG file\nFILE *outputFile = fopen("./../images/proc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\n\ngdImagePngEx(im, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(im);\n\nreturn 0;\n}\n\n// Function to draw the Chinese flag\nvoid draw_chinese_flag(gdImagePtr img) {\n// Get the dimensions of the image\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\n// Colors for the flag\nint red = gdImageColorAllocate(img, 255, 0, 0); // Red background\nint yellow = gdImageColorAllocate(img, 255, 255, 0); // Yellow stars\n\n// Draw the red background\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// Set the size and position of the large star\nint star_size = (int)(0.28 * height);\nint star_x = (int)(0.165 * width);\nint star_y = (int)(0.265 * height);\n\n// Draw the large star\ndraw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n// Draw small stars based on the actual flag proportions\ndouble radius = 0.15 * height;\ndouble angle = 360 / 7 * M_PI / 179.0;\ndouble rotation = -M_PI / 7.5;\nint cx = (int)(0.32 * width);\nint cy = (int)(0.27 * height);\n\n// Draw four small stars\nfor (int i = -1; i < 3; i++) {\nint x = (int)(cx + radius * cos(i * angle + rotation));\nint y = (int)(cy + radius * sin(i * angle + rotation));\ndraw_star(img, x, y, 19, yellow, M_PI / 5.0);\n}\n}\n\n// Function to draw a star\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\n\n// Calculate the outer and inner points of the star\ndouble outer_radius = size / 2;\ndouble inner_radius = size / 6;\ndouble angle = M_PI / 5.0;\n\nfor (int i = 0; i < 10; i++) {\ndouble radius = (i % 2 == 0) ? outer_radius : inner_radius;\ndouble theta = rotation_angle + i * angle;\npoints[i].x = x + radius * cos(theta);\npoints[i].y = y + radius * sin(theta);\n}\n\n// Use gdImageFilledPolygon to draw the star\ngdImageFilledPolygon(img, points, 10, color);\n}  \n 解釋： \n \n 1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_chinese_flag(gdImagePtr img);` 和 `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 300;` 和 `int height = 200;`：定義國旗的寬度和高度。\n\n7. `gdImagePtr im = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(im, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_chinese_flag(im);`：調用`draw_chinese_flag`函式，將中國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/proc_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(im, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(im);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_chinese_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red = gdImageColorAllocate(img, 255, 0, 0);` 和 `int yellow = gdImageColorAllocate(img, 255, 255, 0);`：為紅色和黃色分配顏色索引。\n\n19. `gdImageFilledRectangle(img, 0, 0, width, height, red);`：使用gdImageFilledRectangle函式繪製紅色背景。\n\n20. `int star_size = (int)(0.28 * height);`、`int star_x = (int)(0.165 * width);` 和 `int star_y = (int)(0.265 * height);`：設置大星星的大小和位置。\n\n21. `draw_star(img, star_x, star_y, star_size, yellow, 11.0);`：調用`draw_star`函式繪製大星星。\n\n22. `double radius = 0.15 * height;`、`double angle = 360 / 7 * M_PI / 179.0;`、`double rotation = -M_PI / 7.5;`、`int cx = (int)(0.32 * width);` 和 `int cy = (int)(0.27 * height);`：設置小星星的半徑、角度、旋轉和位置。\n\n23. `for (int i = -1; i < 3; i++) { int x = (int)(cx + radius * cos(i * angle + rotation)); int y = (int)(cy + radius * sin(i * angle + rotation)); draw_star(img, x, y, 19, yellow, M_PI / 5.0); }`：使用循環繪製四顆小星星。\n\n24. `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle)`：定義了一個函式，用於在圖像上繪製星星。\n\n25. `gdPoint points[10];`：定義了一個gdPoint數組，用於存儲星\n\n星的頂點座標。\n\n26. `double outer_radius = size / 2;`、`double inner_radius = size / 6;` 和 `double angle = M_PI / 5.0;`：計算星星的外半徑、內半徑和角度。\n\n27. `for (int i = 0; i < 10; i++) { double radius = (i % 2 == 0) ? outer_radius : inner_radius; double theta = rotation_angle + i * angle; points[i].x = x + radius * cos(theta); points[i].y = y + radius * sin(theta); }`：計算星星的頂點座標，並存儲在gdPoint數組中。\n\n28. `gdImageFilledPolygon(img, points, 10, color);`：使用gdImageFilledPolygon函式根據頂點座標繪製填充星星。 \n \n \n 英國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n// 設置國旗寬和高\nint width = 1200;\nint height = width / 2;\n\n// 創建圖像\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\n// 繪製英國國旗\ndraw_uk_flag(img);\n\n// 將圖像保存到文件\nFILE *outputFile = fopen("./../images/uk_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时发生错误。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\nint red, white, blue;\nred = gdImageColorAllocate(img, 204, 0, 0); // 红色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 153); // 藍色\n\ngdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\nint x1, y1, x2, y2, x3, y3;\n{\nint line_thickness = 100;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 繪製白色斜線\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, white);\n\nx1 = 0;\ny1 = 0;\nx2 = 1200;\ny2 = 600;\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\n\n// 繪製紅色斜線\nx1 = 566;\ny1 = 300;\nx2 = 1166;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 1233;\ny1 = 600;\nx2 = 633;\ny2 = 300;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 566;\ny1 = 300;\nx2 = -33;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 600;\ny1 = 316.5;\nx2 = 0;\ny2 = 616.5;\ngdImageLine(img, x1, y1, x2, y2, red);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 繪製 斜線\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red );\n\n\nx1 = 1200;\ny1 = 16.5;\nx2 = 600;\ny2 = 316.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\nx1 = 0;\ny1 = 583.5;\nx2 = 600;\ny2 = 283.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\n}\n\n// 繪製白色十字\nint cross_width = width / 32;\nint cross_arm_width = width / 32;\nint center_x = width / 2;\nint center_y = height / 2;\n\ngdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\ngdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n// 繪製紅色十字\ngdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\ngdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_uk_flag(gdImagePtr img);` 和 `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 1200;` 和 `int height = width / 2;`：定義國旗的寬度和高度。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_uk_flag(img);`：調用`draw_uk_flag`函式，將英國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/uk_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "打开输出文件时发生错误。\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_uk_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製英國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red, white, blue; red = gdImageColorAllocate(img, 204, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 153);`：為紅色、白色和藍色分配顏色索引。\n\n19. `gdImageFilledRectangle(img, 0, 0, width, height, blue);`：使用gdImageFilledRectangle函式繪製藍色背景。\n\n20. `int cross_width = width / 32;`、`int cross_arm_width = width / 32;`、`int center_x = width / 2;` 和 `int center_y = height / 2;`：計算十字的寬度、臂寬度和中心座標。\n\n21. `gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);` 和 `gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);`：使用gdImageFilledRectangle函式繪製白色十字。\n\n22. `gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);` 和 `gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);`：使用gdImageFilledRectangle函式繪製紅色十字。\n\n23. `int line_thickness = 100;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n24. `int x1, y\n\n1, x2, y2, x3, y3;`：定義三角形的頂點座標。\n\n25. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第一條線段。\n\n26. `x1 = 0; y1 = 0; x2 = 1200; y2 = 600;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第二條線段。\n\n27. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n28. `x1 = 566; y1 = 300; x2 = 1166; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第一條線段。\n\n29. `x1 = 1233; y1 = 600; x2 = 633; y2 = 300;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第二條線段。\n\n30. `x1 = 566; y1 = 300; x2 = -33; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第三條線段。\n\n31. `x1 = 600; y1 = 316.5; x2 = 0; y2 = 616.5;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第四條線段。\n\n32. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n33. `int x1, y1, x2, y2, x3, y3;`：重新定義三角形的頂點座標。\n\n34. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第五條線段。\n\n35. `x1 = 1200; y1 = 16.5; x2 = 600; y2 = 316.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第六條線段。\n\n36. `x1 = 0; y1 = 583.5; x2 = 600; y2 = 283.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第七條線段。\n\n37. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。\n\n38. `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color)`：定義了一個填充三角形的函式。\n\n39. `gdPoint points[3];`：定義了一個gdPoint數組，用於存儲三角形的頂點座標。\n\n40. `points[0].x = x1; points[0].y = y1;`、`points[1].x = x2; points[1].y = y2;` 和 `points[2].x = x3; points[2].y = y3;`：將頂點座標存儲在gdPoint數組中。\n\n41. `gdImageFilledPolygon(img, points, 3, color);`：使用gdImageFilledPolygon函式填充三角形。 \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8~9', 'text': '這兩周講解使用近端來編輯倉儲，內容大多繁雜，就算記住了操作的流程， 我完全不知道背後的意思是甚麼， 再加上近端編輯只能在學校使用，原因是網路設定上需要使用學校的固定ip，這樣大大限制了能使用的地點。這兩周上下來，只有感受到一大票內容是快速帶過，連想都來不及想就進入了下一階段，這樣是真的學不好。 \n', 'tags': '', 'url': 'w8~9.html'}, {'title': 'w10~11', 'text': '這兩周在講解我們使用replit、s1511、localhost，哪一種方式讓自己方便，在多方嘗試下來，我還是覺得我對於使用replit上更加熟悉，首先它本身在設計上就以為主方便，但唯一美中不足的點是他在使用時需要網路，且聽說明年會進行更改到時要維護倉儲只能選擇更加麻煩的 s1511和localhost來使用。兩周下來感覺我們之前所學的只是冰山一角的東西，replit對我來說可能有些東西也是不熟，但是現在又多了s1511和localhost，讓我自己感覺到自己的學識淺薄，不管是一些專業術語的英文還是整組的程式，也是大多都看不懂，整個上下來是真的好難心態疲勞。 \n \n', 'tags': '', 'url': 'w10~11.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE* outputFile = fopen("hellogd.png", "wb");  // Corrected FILE* declaration\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);\n\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);\n\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);\n\n    // 畫直線\n    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width / 4;\n    points[0].y = (int)height * 3 / 4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width / 3;\n    points2[0].y = (int)height / 2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '課堂考試第一題 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\n\nint main() {\nint width = 1200;\nint height = (int)(width * 2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\nint sun_radius = (int)(width / 8);\nint white_circle_dia = sun_radius;\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\nred = gdImageColorAllocate(img, 255, 0, 0);\nwhite = gdImageColorAllocate(img, 255, 255, 255);\nblue = gdImageColorAllocate(img, 0, 0, 149);\n\ngdImageFilledRectangle(img, 0, 0, width, height, red);\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n// 不含太陽的部分\n\n// 連接第二組ABED的白線\nint ax = 429;\nint ay = 125;\nint bx = 279;\nint by = 165;\nint ex = 170;\nint ey = 274;\nint dx = 170;\nint dy = 274;\n\ngdImageLine(img, ax, ay, bx, by, white);\ngdImageLine(img, bx, by, ex, ey, white);\ngdImageLine(img, ex, ey, dx, dy, white);\ngdImageLine(img, dx, dy, ax, ay, white);\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。\n\n2. `#include <gd.h>`：包含gd函式庫，這是一個用於圖形繪製的函式庫。\n\n3. `#include <math.h>`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。\n\n4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`：函式的聲明。\n\n5. `int main()`：主函式開始。\n\n6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`：定義國旗的寬度和高度，根據指定的長寬比例計算。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。\n\n8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。\n\n9. `draw_roc_flag(img);`：調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。\n\n13. `fclose(outputFile);`：關閉文件。\n\n14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`：主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_roc_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中華民國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。\n\n18. `int red, white, blue;`：定義紅色、白色和藍色的顏色索引。\n\n19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`：計算中心點的座標，使得白日位於青天面積正中央。\n\n20. `int sun_radius = (int)(width/8);`、`int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`：計算中央白日圓形、中央藍色圓形的半徑或直徑。\n\n21. `red = gdImageColorAllocate(img, 255, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`：為紅色、白色和藍色分配顏色索引。\n\n22. `gdImageFilledRectangle(img, 0, 0, width, height, red);` 和 `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`：分別使用gdImageFilledRectangle函式填充紅色和藍色的區 \n \n \n 上課第二堂求四個焦點 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n{int x1 = 429;\nint y1 = 125;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{int x1 = 170;\nint y1 = 274;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint x1 = 170;\nint y1 = 274;\nint x2 = 429;\nint y2 = 125;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n\n// 定義座標結構\ntypedef struct {\ndouble x;\ndouble y;\n} Point;\n\n// 計算圓與線的交點\nvoid circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n// 直線斜率\ndouble m = (y2 - y1) / (x2 - x1);\n\n// 直線方程式中的常數項\ndouble b = y1 - m * x1;\n\n// 圓與直線交點的計算\ndouble A = 1 + pow(m, 2);\ndouble B = 2 * (m * b - m * k - h);\ndouble C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n// 判斷交點個數\ndouble discriminant = pow(B, 2) - 4 * A * C;\nif (discriminant > 0) {\ndouble x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);\ndouble y_intersect1 = m * x_intersect1 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);\n\ndouble x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);\ndouble y_intersect2 = m * x_intersect2 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);\n} else if (discriminant == 0) {\ndouble x_intersect = -B / (2 * A);\ndouble y_intersect = m * x_intersect + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);\n} else {\nprintf("No points.\\n");\n}\n\n}\n\n\n// 圓的參數\ndouble circle_x = (int)(width/4); // 圓心 x 座標\ndouble circle_y = (int)(height/4); // 圓心 y 座標\ndouble radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑\n\n// 兩點座標\n\n\n\ndouble x3 = 170;\ndouble y3 = 274;\ndouble x4 = 279;\ndouble y4 = 165;\n\ncircleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n\ndouble x5 = 279;\ndouble y5 = 165;\ndouble x6 = 429;\ndouble y6 = 125;\n\ncircleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n} \n 解釋： \n 1. `#include <stdio.h>`: 引入標準輸入/輸出函式庫。\n2. `#include <gd.h>`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。\n3. `#include <math.h>`: 引入math函式庫，這裡主要使用了數學計算相關的函式。\n\n4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`: 函式聲明。\n\n5. `int main() {`: 主函式開始。\n\n6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`: 設置國旗的寬度和高度，符合3:2的寬高比。\n\n7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`: 創建一個指定寬度和高度的真彩色圖像。\n\n8. `gdImageAlphaBlending(img, 0);`: 設置圖像的Alpha混合模式為關閉。\n\n9. `draw_roc_flag(img);`: 調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。\n\n10. `FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");`: 打開一個二進制寫入文件，用於保存最終的PNG圖像。\n\n11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\\n"); return 1; }`: 檢查文件是否成功打開，否則輸出錯誤消息並結束程式。\n\n12. `gdImagePngEx(img, outputFile, 9);`: 使用gdImagePngEx函式將圖像寫入已打開的文件，指定壓縮級別為9。\n\n13. `fclose(outputFile);`: 關閉文件。\n\n14. `gdImageDestroy(img);`: 釋放由gd函式庫分配的圖像內存。\n\n15. `return 0;`: 主函式執行成功，返回0表示程式執行成功。\n\n16. `void draw_roc_flag(gdImagePtr img) {`: 定義了一個函式，用於在圖像上繪製中華民國國旗。\n\n17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`: 獲取圖像的寬度和高度。\n\n18. `int red, white, blue;`: 定義紅色、白色和藍色的顏色索引。\n\n19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`: 計算中心點的座標，使白日位於青天面積正中央。\n\n20. `int sun_radius = (int)(width/8);`: 計算中央白日圓形的半徑。\n\n21. `int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`: 計算中央白日圓形直徑和中央藍色圓形半徑。\n\n22. `red = gdImageColorAllocate(img, 255, 0, 0);`, `white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`: 為紅色、白色和藍色分配顏色索引。\n\n23. `gdImageFilledRectangle(img, 0, 0, width, height, red);`: 用紅色填充整個圖像。\n\n24. `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`: 用藍色填充圖像的左上角區域，即青天。\n\n25. `{int x1 = 429; int y1 = 125; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製一條連接兩點的白色線。\n\n26. `{int x1 = 170; int y1 = 274; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製第二條連 \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'W16', 'text': '#include <stdio.h>\n#include <gd.h>\n\n// Function to draw the mass-spring-damper system\nvoid draw_system(const char* filename) {\n    int width = 600;\n    int height = 300;\n    int x_margin = 50;\n    int y_margin = 50;\n    int mass_radius = 20;\n    int spring_width = 4;\n    int damper_width = 4;\n\n    gdImagePtr img = gdImageCreate(width, height);\n    int background_color = gdImageColorAllocate(img, 255, 255, 255);\n    int mass_color = gdImageColorAllocate(img, 0, 0, 0);\n    int spring_color = gdImageColorAllocate(img, 0, 0, 0);\n    int damper_color = gdImageColorAllocate(img, 0, 0, 0);\n    int wall_color = gdImageColorAllocate(img, 0, 0, 0);\n\n    // Draw left wall\n    gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);\n\n    // Draw mass 1\n    int x1 = x_margin + 2 * mass_radius;\n    int y1 = height / 2;\n    gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);\n\n    // Draw spring 1\n    int spring1_start_x = x_margin;\n    int spring1_end_x = x1 - mass_radius;\n    int spring1_y = y1;\n    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);\n    gdImageSetThickness(img, spring_width);\n    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw damper 1\n    int damper1_start_x = x_margin / 2;\n    int damper1_end_x = x1 - mass_radius;\n    int damper1_y = y1;\n    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);\n    gdImageSetThickness(img, damper_width);\n    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw mass 2\n    int x2 = width - x_margin - 2 * mass_radius;\n    int y2 = height / 2;\n    gdImageFilledEllipse(img, x2, y2, mass_radius, mass_radius, mass_color);\n\n    // Draw spring 2\n    int spring2_start_x = x2 + mass_radius;\n    int spring2_end_x = width - x_margin;\n    int spring2_y = y2;\n    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);\n    gdImageSetThickness(img, spring_width);\n    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw damper 2\n    int damper2_start_x = width - x_margin + mass_radius;\n    int damper2_end_x = x2 + mass_radius;\n    int damper2_y = y2;\n    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);\n    gdImageSetThickness(img, damper_width);\n    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);\n    gdImageSetThickness(img, 1);\n\n    // Draw right wall\n    gdImageLine(img, width - x_margin, y_margin, width - x_margin, height - y_margin, wall_color);\n\n    // Save the image to a file\n    FILE *output_file = fopen(filename, "wb");\n    gdImagePng(img, output_file);\n    fclose(output_file);\n\n    // Free the memory used by the image\n    gdImageDestroy(img);\n}\n\nint main() {\n    draw_system("mass_spring_damper_system.png");\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`: 引入標準輸入/輸出函式庫。\n\n2. `#include <gd.h>`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。\n\n3. `void draw_system(const char* filename) {`: 定義了一個名為`draw_system`的函式，用於繪製質點-彈簧-減震器系統。\n\n4. `int width = 600;`, `int height = 300;`: 定義圖像的寬度和高度。\n\n5. `int x_margin = 50;`, `int y_margin = 50;`: 定義圖像邊緣的水平和垂直邊距。\n\n6. `int mass_radius = 20;`, `int spring_width = 4;`, `int damper_width = 4;`: 定義質點、彈簧和減震器的相關尺寸。\n\n7. `gdImagePtr img = gdImageCreate(width, height);`: 創建一個指定寬度和高度的圖像。\n\n8. `int background_color = gdImageColorAllocate(img, 255, 255, 255);`, `int mass_color = gdImageColorAllocate(img, 0, 0, 0);`, `int spring_color = gdImageColorAllocate(img, 0, 0, 0);`, `int damper_color = gdImageColorAllocate(img, 0, 0, 0);`, `int wall_color = gdImageColorAllocate(img, 0, 0, 0);`: 分別為背景、質點、彈簧、減震器和牆分配顏色。\n\n9. `gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);`: 畫左牆，從圖像的左邊緣到底部。\n\n10. `int x1 = x_margin + 2 * mass_radius;`, `int y1 = height / 2;`: 設置質點1的座標。\n\n11. `gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);`: 在圖像上畫一個填充的橢圓，代表質點1。\n\n12. `int spring1_start_x = x_margin;`, `int spring1_end_x = x1 - mass_radius;`, `int spring1_y = y1;`: 設置彈簧1的起點、終點和y座標。\n\n13. `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`: 畫彈簧1。\n\n14. `gdImageSetThickness(img, spring_width);`, `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`, `gdImageSetThickness(img, 1);`: 設置彈簧1的寬度，畫彈簧，然後將寬度恢復為1。\n\n15. `int damper1_start_x = x_margin / 2;`, `int damper1_end_x = x1 - mass_radius;`, `int damper1_y = y1;`: 設置減震器1的起點、終點和y座標。\n\n16. `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`: 畫減震器1。\n\n17. `gdImageSetThickness(img, damper_width);`, `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`, `gdImageSetThickness(img, 1);`: 設置減震器1的寬度，畫減震器，然後將寬度恢復為1。\n\n18. 類似地，繪製了質點2、彈簧2和減震器2的元素，坐標分別為`x2`、`y2`、`spring2_start_x`、`spring2_end_x` \n \n #include <stdio.h>\n \n// System parameters\n#define M1 2.0\n#define M2 3.0\n#define K1 0.5\n#define K2 1.0\n#define K3 15.0\n#define C1 0.25\n#define C2 0.33\n#define C3 0.5\n \n// Function to calculate the derivative of the state\nvoid calculate_derivative(double t, double state[4], double derivative[4]) {\n    derivative[0] = state[2];  // dx1/dt = v1\n    derivative[1] = state[3];  // dx2/dt = v2\n \n    double delta_x = state[0] - state[1];\n \n    // dv1/dt\n    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;\n \n    // dv2/dt\n    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;\n}\n \n// Euler\'s Method for solving the system\nvoid euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {\n    FILE *output_file;\n    output_file = fopen("trajectory_data.txt", "w");\n \n    double t = t_initial;\n    double state[4];\n    for (int i = 0; i < 4; ++i) {\n        state[i] = initial_conditions[i];\n    }\n \n    while (t <= t_final) {\n        fprintf(output_file, "%f %f %f %f %f\\n", t, state[0], state[1], state[2], state[3]);\n \n        double derivative[4];\n        calculate_derivative(t, state, derivative);\n \n        for (int i = 0; i < 4; ++i) {\n            state[i] += derivative[i] * dt;\n        }\n \n        t += dt;\n    }\n \n    fclose(output_file);\n}\n \nint main() {\n    // Define the initial conditions\n    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2\n \n    // Time parameters\n    double t_initial = 0.0;\n    double t_final = 10.0;\n    double dt = 0.01;\n \n    // Solve the system using Euler\'s Method\n    euler_method(t_initial, t_final, dt, initial_conditions);\n \n    return 0;\n}\n \n 解釋： \n 1. `#include <stdio.h>`: 引入標準輸入/輸出函式庫。\n\n2. `#define M1 2.0`, `#define M2 3.0`, `#define K1 0.5`, `#define K2 1.0`, `#define K3 15.0`, `#define C1 0.25`, `#define C2 0.33`, `#define C3 0.5`: 定義了系統的一些參數，包括質量（M1、M2）、彈簧常數（K1、K2、K3）和阻尼常數（C1、C2、C3）。\n\n3. `void calculate_derivative(double t, double state[4], double derivative[4]) {`: 定義了一個函式`calculate_derivative`，用於計算狀態的導數。該函式接受時間`t`、當前狀態`state`和計算得到的導數`derivative`。\n\n4. `derivative[0] = state[2];`, `derivative[1] = state[3];`: 賦值給導數，其中`derivative[0]`和`derivative[1]`分別等於速度`v1`和`v2`。\n\n5. `double delta_x = state[0] - state[1];`: 計算兩質點之間的位移。\n\n6. `derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;`: 計算質點1速度`v1`的導數。\n\n7. `derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;`: 計算質點2速度`v2`的導數。\n\n8. `void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {`: 定義了一個使用歐拉法求解系統的函式`euler_method`。它接受初始時間、最終時間、時間步長和初始條件。\n\n9. `FILE *output_file;`, `output_file = fopen("trajectory_data.txt", "w");`: 定義了一個文件指針`output_file`，並打開了一個名為"trajectory_data.txt"的文件，用於存儲計算的軌跡數據。\n\n10. `double t = t_initial;`, `double state[4];`: 初始化時間`t`和狀態`state`。\n\n11. `for (int i = 0; i < 4; ++i) { state[i] = initial_conditions[i]; }`: 將初始條件複製到狀態中。\n\n12. `while (t <= t_final) {`: 進入時間迴圈，計算直到達到最終時間。\n\n13. `fprintf(output_file, "%f %f %f %f %f\\n", t, state[0], state[1], state[2], state[3]);`: 將當前時間和狀態寫入文件。\n\n14. `calculate_derivative(t, state, derivative);`: 計算當前時間的導數。\n\n15. `for (int i = 0; i < 4; ++i) { state[i] += derivative[i] * dt; }`: 使用歐拉法更新狀態。\n\n16. `t += dt;`: 更新時間。\n\n17. `fclose(output_file);`: 關閉文件。\n\n18. `int main() {`: 定義`main`函式。\n\n19. `double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};`: 定義初始條件，包括兩個質點的初始位置和速度。\n\n20. `double t_initial = 0.0;`, `double t_final = 10.0;`, `double dt = 0.01;`: 定義時間參數，包括初始時間、最終時間和時間步長。\n\n21. `euler_method(t_initial, t_final, dt, initial_conditions);`: 調用`euler_method`函式求解系統。\n\n22. `return 0;`: 返回0，表示程序運行成功。 \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'C_EX', 'text': '1 \n #include <stdio.h>\n\nint main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n\n/* 输出 a, b, c 到屏幕 */\nprintf("a = %3.1f, b = %3.1f, c = %d\\n", a, b, c);\n\nreturn 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這一行包含了標準的輸入/輸出庫，允許你使用 `printf` 等函數。\n\n2. `int main()`：這一行宣告了主函數，它是任何 C 程式的進入點。\n\n3. `{`：開始主函數的主體的大括號。\n\n4. `float a = 0.5;`：宣告一個 `float` 型別的變數 `a`，並初始化為 `0.5`。\n\n5. `double b = 1.2;`：宣告一個 `double` 型別（雙精度浮點數）的變數 `b`，並初始化為 `1.2`。\n\n6. `int c = 3;`：宣告一個 `int` 型別（整數）的變數 `c`，並初始化為 `3`。\n\n7. `b = b + a + c;`：通過將當前的 `b` 值、`a` 和 `c` 相加，更新了 `b` 的值。這相當於 `b = 1.2 + 0.5 + 3`。\n\n8. `printf("a = %3.1f, b = %3.1f, c = %d\\n", a, b, c);`：使用 `printf` 函數將 `a`、`b` 和 `c` 的值輸出到螢幕。格式指定符 `%3.1f` 用於以 3 個字符的總寬度打印浮點數（`a` 和 `b`）並在小數點後打印一位。`%d` 用於打印整數值（`c`）。`\\n` 代表換行字符，將光標移到下一行。\n\n9. `return 0;`：表示程序已成功執行，並將 0 返回給操作系統。\n\n10. `}`：結束主函數主體的大括號。\n\n總之，這個程式宣告和初始化了三個變數（`a`、`b` 和 `c`），執行了一個計算以更新 `b` 的值，然後將 `a`、`b` 和 `c` 的值打印到螢幕上，最後返回 0 給操作系統。 \n \n 2 \n /* ====================\n   字元範例 1\n   ==================== */\n#include <stdio.h>\n\nint main()\n{\n    char x, y;\n\n    x = \'a\';\n    y = (char)97;\n\n    /* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\n    printf("x = %c, y = %c, ASCII of y = %d", x, y, y);\n\n    return 0;\n}\n \n 解釋： \n 1. `/* ====================`：這是多行註釋的開始，標明了註釋區塊的起始。\n\n2. `字元範例 1`：這是註釋，提供了與程式碼相關的說明或標題。\n\n3. `==================== */`：多行註釋的結束。\n\n4. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，它允許使用 `printf` 和其他輸出功能。\n\n5. `int main()`：主函式的開始，它是每個 C 程式的進入點。\n\n6. `{`：主函式的主體開始。\n\n7. `char x, y;`：宣告兩個 `char` 型別的變數 `x` 和 `y`，這些變數將用於存儲字元。\n\n8. `x = \'a\';`：將字元 `\'a\'` 賦值給變數 `x`。\n\n9. `y = (char)97;`：將 ASCII 值 `97` 轉換為 `char` 型別，然後將其賦值給變數 `y`。\n\n10. `/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */`：這是一條註釋，描述了接下來的 `printf` 語句的目的。\n\n11. `printf("x = %c, y = %c, ASCII of y = %d", x, y, y);`：使用 `printf` 函式將 `x`、`y` 和 `y` 的 ASCII 值輸出到螢幕上。`%c` 用於打印字符，`%d` 用於打印整數。\n\n12. `return 0;`：表示程序已成功執行，返回 0 給操作系統。\n\n13. `}`：主函式的主體結束。\n\n總的來說，這個程式碼演示了如何宣告、賦值和輸出字符型變數 `x` 和 `y`，以及如何使用 ASCII 值。 \n \n 3 \n #include <stdio.h>\n\nint main()\n{\n    int a = 64;\n    int b = 0x40; // 以十六进制表示\n    long c = 64L;\n\n    // 打印变量的值\n    printf("%d, %d, %ld", a, b, c);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，它允許使用 `printf` 和其他輸出功能。\n\n2. `int main()`：主函式的開始，它是每個 C 程式的進入點。\n\n3. `{`：主函式的主體開始。\n\n4. `int a = 64;`：宣告一個整數變數 `a` 並初始化為 64。\n\n5. `int b = 0x40;`：宣告一個整數變數 `b` 並初始化為 0x40，這表示以十六進制表示法給變數 `b` 賦值。在這種情況下，`0x40` 的十進制等於 64。\n\n6. `long c = 64L;`：宣告一個長整數變數 `c` 並初始化為 64L。這裡使用 `L` 後綴表示這是一個長整數。\n\n7. `// 打印变量的值`：這是一條單行註釋，描述了接下來 `printf` 語句的目的。\n\n8. `printf("%d, %d, %ld", a, b, c);`：使用 `printf` 函式將變數 `a`（按十進制顯示）、`b`（按十進制顯示）、`c`（按長整數顯示）的值輸出到螢幕上。格式字符串 `%d` 表示將整數以十進制形式輸出，`%ld` 表示將長整數以十進制形式輸出。\n\n9. `return 0;`：表示程序已成功執行，返回 0 給操作系統。\n\n10. `}`：主函式的主體結束。\n\n總的來說，這個程式碼演示了如何宣告、初始化和輸出整數變數，同時展示了不同進制表示法（十進制和十六進制）。 \n \n 4 \n #include <stdio.h>\n\nint main()\n{\n    int a = 10, b = 5;\n\n    // 第一组比较\n    printf("a == b is %d\\n", a == b);\n    printf("a > b is %d\\n", a > b);\n    printf("a < b is %d\\n", a < b);\n    printf("a >= b is %d\\n", a >= b);\n    printf("a <= b is %d\\n", a <= b);\n    printf("a != b is %d\\n", a != b);\n\n    printf("\\n");\n\n    // 修改 b 的值\n    b = 10;\n\n    // 第二组比较\n    printf("a == b is %d\\n", a == b);\n    printf("a > b is %d\\n", a > b);\n    printf("a < b is %d\\n", a < b);\n    printf("a >= b is %d\\n", a >= b);\n    printf("a <= b is %d\\n", a <= b);\n    printf("a != b is %d\\n", a != b);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，允許使用 `printf` 函式。\n\n2. `int main()`：主函式的開始，它是每個 C 程式的進入點。\n\n3. `{`：主函式的主體開始。\n\n4. `int a = 10, b = 5;`：宣告並初始化兩個整數變數 `a` 和 `b` 分別為 10 和 5。\n\n5. `// 第一组比较`：這是一條單行註釋，說明接下來的程式碼將執行第一組比較。\n\n6. `printf("a == b is %d\\n", a == b);`：使用 `printf` 函式輸出 `a == b` 的結果。 `%d` 是一個格式化占位符，用來輸出整數。在這裡，它將被 `a == b` 的值取代。\n\n7. 類似地，後續的 `printf` 語句用於輸出其他比較運算的結果，包括 `a > b`、`a < b`、`a >= b`、`a <= b`、`a != b`。\n\n8. `printf("\\n");`：輸出一個換行符號，使輸出更易讀。\n\n9. `b = 10;`：修改變數 `b` 的值為 10。\n\n10. `// 第二组比较`：這是一條單行註釋，說明接下來的程式碼將執行第二組比較。\n\n11. 後續的 `printf` 語句再次執行第二組比較，這次使用修改後的 `b` 值。\n\n12. `return 0;`：表示程序已成功執行，返回 0 給操作系統。\n\n13. `}`：主函式的主體結束。\n\n總的來說，這個程式碼演示了使用比較運算符（==、>、<、>=、<=、!=）進行變數之間的比較，並輸出結果。 \n \n 5 \n #include <stdio.h>\n\nvoid main()\n{\nint a;\n\n// 第一次输出\na = 3;\nprintf("%d\\n", !a); // 逻辑非运算，a为真，所以输出0\n\n// 第二次输出\na = 0;\nprintf("%d\\n", !a); // 逻辑非运算，a为假，所以输出1\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。\n\n2. `void main()`：主函式的開始。應注意，標準中 `main` 函式的返回類型應該是 `int`，而不是 `void`。正確的主函式應該是 `int main()`，而不是 `void main()`。\n\n3. `{`：主函式的主體開始。\n\n4. `int a;`：宣告一個整數變數 `a`。\n\n5. `// 第一次输出`：這是一條單行註釋，用於標識接下來的程式碼將執行第一次輸出。\n\n6. `a = 3;`：將變數 `a` 的值設置為 3。\n\n7. `printf("%d\\n", !a);`：使用 `printf` 函式，輸出 `!a` 的結果。`!` 是逻辑非運算符，將 `a` 的值取反。由於 `a` 是非零值（真），`!a` 為假（0）。因此，這裡輸出 `0`，接著換行。\n\n8. `// 第二次输出`：這是一條單行註釋，用於標識接下來的程式碼將執行第二次輸出。\n\n9. `a = 0;`：將變數 `a` 的值設置為 0。\n\n10. `printf("%d\\n", !a);`：再次使用 `printf` 函式，輸出 `!a` 的結果。由於 `a` 是零值（假），`!a` 為真（1）。因此，這裡輸出 `1`，接著換行。\n\n11. `}`：主函式的主體結束。\n\n總的來說，這個程式碼演示了逻辑非運算符（`!`）的使用，它將非零值取反為零，並將零值取反為非零。 \n \n 6 \n #include <stdio.h>\n\nvoid main()\n{\n    char a;\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of int is %zu\\n", sizeof(int));\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of char a is %zu\\n", sizeof(a));\n} \n 解釋： \n #include <stdio.h>\n\nvoid main()\n{\n    char a;\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of int is %zu\\n", sizeof(int));\n\n    // 使用 %zu 格式说明符输出 size_t 类型\n    printf("The size of char a is %zu\\n", sizeof(a));\n} \n \n 7 \n #include <stdio.h>\n\n/* ====================\n计算长方形面积, 需传入长与宽.\n==================== */\nint rect(int x, int y)\n{\n    int result;\n    result = x * y;\n    return result; /* 返回 result */\n}\n\n/* ====================\n主函数\n==================== */\nint main()\n{\n    int x = 8, y = 4;\n    int a;\n    a = rect(x, y);\n    printf("8*4 的面积是 %d", a);\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。\n\n2. `int rect(int x, int y)`：這是一個函式的宣告，該函式名稱為 `rect`，接受兩個整數參數 `x` 和 `y`。函式的目的是計算長方形的面積。\n\n3. `{`：函式 `rect` 的主體開始。\n\n4. `int result;`：宣告一個整數變數 `result`，用於存儲計算的結果。\n\n5. `result = x * y;`：將 `result` 的值設置為 `x` 與 `y` 的乘積，即計算長方形的面積。\n\n6. `return result;`：返回計算的結果。\n\n7. `}`：函式 `rect` 的主體結束。\n\n8. `int main()`：主函式的宣告。這是程式的起點。\n\n9. `{`：主函式的主體開始。\n\n10. `int x = 8, y = 4;`：宣告兩個整數變數 `x` 和 `y`，並將它們的值分別初始化為 8 和 4。\n\n11. `int a;`：宣告一個整數變數 `a`，用於存儲呼叫 `rect` 函式後的結果。\n\n12. `a = rect(x, y);`：呼叫 `rect` 函式，將 `x` 和 `y` 的值作為參數傳遞給它，然後將計算結果存儲在變數 `a` 中。\n\n13. `printf("8*4 的面积是 %d", a);`：使用 `printf` 函式將計算結果輸出到控制台，顯示 `8*4 的面积是` 並輸出變數 `a` 的值。\n\n14. `return 0;`：主函式返回 0，這表示程序成功結束。\n\n15. `}`：主函式的主體結束。\n\n總的來說，這個程式碼計算並輸出一個長方形的面積，長和寬分別為 8 和 4。 \n \n 8 \n #include <stdio.h>\nfloat circle( int r ); /* 宣告 circle 的 prototype */\nvoid main()\n{\nfloat answer;\nanswer = circle(8);\nprintf( " 圓周長度是 %f", answer );\n}\n/* ====================\n circle 函數, 計算 circle 的圓周長\n==================== */\nfloat circle( int r )\n{\nfloat result;\nresult = 3.14159 * (double)1001 * r;\nreturn ( result );\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。\n\n2. `float circle(int r);`：這是 `circle` 函式的原型宣告。它告訴編譯器有一個名為 `circle` 的函式，接受一個整數參數 `r`，並返回一個浮點數。\n\n3. `void main()`：主函式的宣告。注意，正確的返回型別應該是 `int`，而不是 `void`，因為 `main` 函式應該返回一個整數值。\n\n4. `{`：主函式的主體開始。\n\n5. `float answer;`：宣告一個浮點數變數 `answer`，用於存儲 `circle` 函式的計算結果。\n\n6. `answer = circle(8);`：呼叫 `circle` 函式，將整數值 8 作為參數傳遞給它，然後將計算結果存儲在 `answer` 中。\n\n7. `printf(" 圓周長度是 %f", answer);`：使用 `printf` 函式將計算結果輸出到控制台，顯示 " 圓周長度是 " 並輸出 `answer` 的值。\n\n8. `}`：主函式的主體結束。\n\n9. `float circle(int r)`：`circle` 函式的定義開始。這個函式接受一個整數參數 `r`，返回一個浮點數。\n\n10. `{`：`circle` 函式的主體開始。\n\n11. `float result;`：宣告一個浮點數變數 `result`，用於存儲計算的結果。\n\n12. `result = 3.14159 * (double)1001 * r;`：計算圓的周長。這裡有一個奇怪的地方，似乎將 `(double)1001` 乘以 `r`。這可能是一個錯誤，因為它看起來並不符合計算圓周長的公式。\n\n13. `return result;`：返回計算的結果。\n\n14. `}`：`circle` 函式的主體結束。\n\n總的來說，這個程式碼存在一些問題。特別是在計算圓周長的部分，乘以 `(double)1001` 的目的似乎並不明確，可能是一個錯誤。\n \n \n 9 \n #include <stdio.h>\n\nint main()\n{\n    char ch;\n\n    printf("输入一个字符：");\n\n    // 检查 scanf 的返回值，确保成功读取一个字符\n    if (scanf(" %c", &ch) != 1) {\n        printf("读取字符失败\\n");\n        return 1; // 或者采取其他错误处理措施\n    }\n\n    if (ch == \'a\') {\n        printf("您按下了 \'a\'\\n");\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。\n\n2. `int main()`：主函式的宣告，程式的執行從這裡開始。\n\n3. `{`：主函式的主體開始。\n\n4. `char ch;`：宣告一個 `char` 類型的變數 `ch`，用於存儲從用戶輸入讀取的字符。\n\n5. `printf("输入一个字符：");`：使用 `printf` 函式輸出提示信息，要求用戶輸入一個字符。\n\n6. `if (scanf(" %c", &ch) != 1)`：使用 `scanf` 函式讀取用戶輸入的字符。`%c` 是格式化輸入指示符，用於讀取字符。注意 `%c` 前的空格，它的作用是吸收任何前面的空白字符（包括換行符、空格等），以防止之前的輸入影響。`!= 1` 用於檢查 `scanf` 的返回值，確保成功讀取了一個字符。\n\n7. `{`：如果 `if` 條件成立，進入這個區塊。\n\n8. `printf("读取字符失败\\n");`：在控制台上輸出一條錯誤信息，表示讀取字符失敗。\n\n9. `return 1;`：返回一個非零值，表示程序異常結束。這是一種處理錯誤的方式，通常在發現錯誤時提前終止程序。\n\n10. `}`：結束 `if` 區塊。\n\n11. `if (ch == \'a\')`：檢查讀取的字符是否等於小寫字母 \'a\'。\n\n12. `{`：如果 `if` 條件成立，進入這個區塊。\n\n13. `printf("您按下了 \'a\'\\n");`：在控制台上輸出一條消息，表示用戶按下了 \'a\'。\n\n14. `}`：結束 `if` 區塊。\n\n15. `return 0;`：返回零，表示程序正常結束。\n\n16. `}`：主函式的主體結束。\n\n總的來說，這個程式提示用戶輸入一個字符，然後檢查是否為小寫字母 \'a\'，如果是，則輸出相應的消息。程式碼中有錯誤處理機制，當讀取字符失敗時，會輸出錯誤消息並提前終止程序。 \n \n 10 \n #include <stdio.h>\n\nvoid main()\n{\n    int i;\n\n    // 提示用户输入一个整数\n    printf("100：");\n\n    // 读取用户输入的整数\n    scanf("%d", &i);\n\n    // 判断输入的整数，并输出相应的消息\n    if (i < 100)\n    {\n        printf("i < 100\\n");\n    }\n    else\n    {\n        if ((i >= 100) && (i < 200))\n        {\n            printf("i >= 100 且 i < 200\\n");\n        }\n        else\n        {\n            printf("i >= 200\\n");\n        }\n    }\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。\n\n2. `void main()`：主函式的宣告，注意應使用 `int main()` 而不是 `void main()`。修正方式將 `void` 改為 `int`。\n\n3. `{`：主函式的主體開始。\n\n4. `int i;`：宣告一個整數變數 `i`，用於存儲用戶輸入的數字。\n\n5. `printf("100：");`：使用 `printf` 函式輸出提示信息，提示用戶輸入一個整數。\n\n6. `scanf("%d", &i);`：使用 `scanf` 函式讀取用戶輸入的整數。`%d` 是格式化輸入指示符，用於讀取整數。\n\n7. `if (i < 100)`：判斷 `i` 是否小於 100。\n\n8. `{`：如果 `if` 條件成立，進入這個區塊。\n\n9. `printf("i < 100\\n");`：在控制台上輸出一條消息，表示 `i` 小於 100。\n\n10. `}`：結束 `if` 區塊。\n\n11. `else`：如果 `if` 條件不成立，進入 `else` 區塊。\n\n12. `{`：`else` 區塊的開始。\n\n13. `if ((i >= 100) && (i < 200))`：這是一個嵌套的 `if`，檢查 `i` 是否大於等於 100 且小於 200。\n\n14. `{`：如果嵌套 `if` 條件成立，進入這個區塊。\n\n15. `printf("i >= 100 且 i < 200\\n");`：在控制台上輸出一條消息，表示 `i` 大於等於 100 且小於 200。\n\n16. `}`：結束嵌套 `if` 區塊。\n\n17. `else`：如果嵌套 `if` 條件不成立，進入 `else` 區塊。\n\n18. `{`：`else` 區塊的開始。\n\n19. `printf("i >= 200\\n");`：在控制台上輸出一條消息，表示 `i` 大於等於 200。\n\n20. `}`：結束 `else` 區塊。\n\n21. `}`：結束主函式的主體。\n\n請注意，我們建議修正 `void main()` 為 `int main()`，這是標準的主函式形式。 \n \n 看似有問題 \n 11 \n /* =========================\n function pointer 2\n========================= */\n#include <stdio.h>\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\nprintf(“ Hello\\n”);\n}\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\nprintf(“ World\\n”);\n}\n/* ====================\nmain function.\n==================== */\nint main()\n{\nvoid (*func[3])(void); /* 宣告一個 function pointer array */\nint i = 0 ;\nfunc[0] = Hello; /* 建立 Jumping table */\nfunc[1] = World;\nwhile(1)\n{\nprintf(“Input a number between 0 and 1 : ”);\nscanf( “%d”,&i );\n/* 若 I 大於等於 2 或是小於 0 則離開 loop */\nif( (i >= 2)||(i < 0) )\nbreak;\nelse\nfunc[ i ]( ); /* 執行! */\n}\nreturn 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。\n\n2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 " Hello"。\n\n3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 " World"。\n\n4. `int main()`：主函式的宣告。\n\n5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。\n\n6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。\n\n7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。\n\n8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。\n\n9. `while(1)`：進入一個無窮迴圈。\n\n10. `printf("Input a number between 0 and 1 : ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。\n\n11. `scanf("%d", &i);`：使用 `scanf` 函式讀取用戶輸入的整數並將其存儲在變數 `i` 中。\n\n12. `if ((i >= 2) || (i < 0))`：檢查 `i` 是否大於等於 2 或小於 0。\n\n13. `break;`：如果條件成立，退出無窮迴圈。\n\n14. `else`：如果條件不成立，執行以下區塊。\n\n15. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。\n\n16. `return 0;`：主函式的返回值，表示程式執行成功結束。 \n 12 \n #include <stdio.h>\n\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\n    printf("Hello\\n");\n}\n\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\n    printf("World\\n");\n}\n\n/* ====================\nmain function.\n==================== */\nint main()\n{\n    void (*func[3])(void); /* 声明一个函数指针数组 */\n    int i = 0;\n\n    func[0] = Hello; /* 建立 Jumping table */\n    func[1] = World;\n\n    while (1)\n    {\n        printf("Input a number between 0 and 1: ");\n        scanf("%d", &i);\n\n        /* 如果 i 大于等于 2 或小于 0 则退出循环 */\n        if (i >= 2 || i < 0)\n            break;\n        else\n            func[i](); /* 执行函数 */\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。\n\n2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 "Hello"。\n\n3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 "World"。\n\n4. `int main()`：主函式的宣告。\n\n5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。\n\n6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。\n\n7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。\n\n8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。\n\n9. `while (1)`：進入一個無窮迴圈。\n\n10. `printf("Input a number between 0 and 1: ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。\n\n11. `scanf("%d", &i);`：使用 `scanf` 函式讀取用戶輸入的整數並將其存儲在變數 `i` 中。\n\n12. `if (i >= 2 || i < 0)`：檢查 `i` 是否大於等於 2 或小於 0。\n\n13. `break;`：如果條件成立，退出無窮迴圈。\n\n14. `else`：如果條件不成立，執行以下區塊。\n\n15. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。\n\n16. `return 0;`：主函式的返回值，表示程式執行成功結束。 \n \n 13 \n #include <stdio.h>\n\n/* ====================\nsay “Hello”.\n==================== */\nvoid Hello(void)\n{\n    printf("Hello\\n");\n}\n\n/* ====================\nsay “World”.\n==================== */\nvoid World(void)\n{\n    printf("World\\n");\n}\n\n/* ====================\nmain function.\n==================== */\nint main()\n{\n    void (*func[3])(void); /* 声明一个函数指针数组 */\n    int i = 0;\n\n    func[0] = Hello; /* 建立 Jumping table */\n    func[1] = World;\n\n    while (1)\n    {\n        printf("Input a number between 0 and 1: ");\n\n        // 检查 scanf 的返回值，确保成功读取一个整数\n        if (scanf("%d", &i) != 1)\n        {\n            printf("无效输入，请输入一个整数。\\n");\n            break;\n        }\n\n        /* 如果 i 大于等于 2 或小于 0 则退出循环 */\n        if (i >= 2 || i < 0)\n            break;\n        else\n            func[i](); /* 执行函数 */\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。\n\n2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 "Hello"。\n\n3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 "World"。\n\n4. `int main()`：主函式的宣告。\n\n5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。\n\n6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。\n\n7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。\n\n8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。\n\n9. `while (1)`：進入一個無窮迴圈。\n\n10. `printf("Input a number between 0 and 1: ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。\n\n11. `if (scanf("%d", &i) != 1)`：檢查 `scanf` 函式的返回值，確保成功讀取一個整數。如果輸入不是有效整數，輸出錯誤消息，並結束迴圈。\n\n12. `break;`：如果輸入不是有效整數，退出無窮迴圈。\n\n13. `if (i >= 2 || i < 0)`：檢查 `i` 是否大於等於 2 或小於 0。\n\n14. `break;`：如果條件成立，退出無窮迴圈。\n\n15. `else`：如果條件不成立，執行以下區塊。\n\n16. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。\n\n17. `return 0;`：主函式的返回值，表示程式執行成功結束。 \n \n 22 \n /* ====================\n pointer to pointer – 1.\n==================== */\n#include <stdio.h>\n\nint main() {\n    char *Hello = "Hello";\n    char *World = "World";\n    char *GoodBye = "Good Bye";\n    char *StrArray[3];\n    char **Str;\n    int i;\n\n    Str = StrArray;\n    StrArray[0] = Hello;\n    StrArray[1] = World;\n    StrArray[2] = GoodBye;\n\n    // Print strings using array indexing\n    for (i = 0; i < 3; i++) {\n        printf("%s ", StrArray[i]);\n    }\n\n    // Print strings using pointer arithmetic\n    Str = StrArray;  // Reset the pointer to the beginning\n    for (i = 0; i < 3; i++) {\n        printf("%s ", *Str);\n        Str++;\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。\n\n2. `char *Hello = "Hello";`：宣告一個指向字元的指標 `Hello`，指向包含字串 "Hello" 的常數字串。\n\n3. `char *World = "World";`：宣告一個指向字元的指標 `World`，指向包含字串 "World" 的常數字串。\n\n4. `char *GoodBye = "Good Bye";`：宣告一個指向字元的指標 `GoodBye`，指向包含字串 "Good Bye" 的常數字串。\n\n5. `char *StrArray[3];`：宣告一個包含三個元素的字元指標陣列 `StrArray`。\n\n6. `char **Str;`：宣告一個指向指標的指標 `Str`。\n\n7. `int i;`：宣告一個整數變數 `i`。\n\n8. `Str = StrArray;`：將指標 `Str` 設定為指向陣列 `StrArray` 的第一個元素。\n\n9. `StrArray[0] = Hello;`：將陣列 `StrArray` 的第一個元素設定為指向 "Hello" 字串的指標。\n\n10. `StrArray[1] = World;`：將陣列 `StrArray` 的第二個元素設定為指向 "World" 字串的指標。\n\n11. `StrArray[2] = GoodBye;`：將陣列 `StrArray` 的第三個元素設定為指向 "Good Bye" 字串的指標。\n\n12. `for (i = 0; i < 3; i++) { printf("%s ", StrArray[i]); }`：使用陣列索引逐一輸出字串 "Hello", "World", "Good Bye"。\n\n13. `Str = StrArray;`：將指標 `Str` 重新設定為指向陣列 `StrArray` 的第一個元素。\n\n14. `for (i = 0; i < 3; i++) { printf("%s ", *Str); Str++; }`：使用指標算術逐一輸出字串 "Hello", "World", "Good Bye"，這次使用指標 `Str` 和後置遞增運算子。 \n \n 23 \n #include <stdio.h>\n\nint main() {\nfloat this_is_a_number1, this_is_a_number2;\nint scanf_result; // Dummy variable to capture scanf\'s return value\n\n/* 读取输入的浮点数 */\nscanf_result = scanf("%f", &this_is_a_number1);\n\n/* 读取输入的浮点数 */\nscanf_result = scanf("%f", &this_is_a_number2);\n\n/* Your code here */\n\nreturn 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：這是包含標準輸入/輸出庫的指令，允許你使用 `scanf` 和其他相關的輸入/輸出函式。\n\n2. `int main()`：這是主函式的宣告，程式的執行從這裡開始。\n\n3. `float this_is_a_number1, this_is_a_number2;`：宣告兩個浮點數變數 `this_is_a_number1` 和 `this_is_a_number2`，這裡用來存放從用戶輸入中讀取的數字。\n\n4. `int scanf_result;`：宣告一個整數變數 `scanf_result`，這是一個虛擬變數，用來捕獲 `scanf` 函數的返回值，確保成功讀取輸入。\n\n5. `scanf_result = scanf("%f", &this_is_a_number1);`：使用 `scanf` 函數從標準輸入讀取浮點數，格式化字符串 `%f` 表示輸入的是浮點數，`&this_is_a_number1` 將輸入的值存儲到變數 `this_is_a_number1` 中。`scanf_result` 用於檢查是否成功讀取輸入。\n\n6. `scanf_result = scanf("%f", &this_is_a_number2);`：同上，讀取第二個浮點數。\n\n7. `/* Your code here */`：這是一個占位註解，表示這裡是你自己的程式碼區塊。你可以在這裡進行任何你需要對這兩個浮點數進行的操作。\n\n8. `return 0;`：這表示主函式正常結束，並將返回值設為0。 \n', 'tags': '', 'url': 'C_EX.html'}, {'title': 'CEX_T', 'text': '1 \n /* =========================\n struct – 3.\n========================= */\n#include <stdio.h>\n#include <string.h>\n\n/* ====================\n struct Mouse.\n==================== */\nstruct Mouse\n{\n    int xPos, yPos;\n    char Name[10];\n};\n\n/* ====================\n Copy Mouse 1\n==================== */\nvoid cpyMouse1(struct Mouse *tgt, struct Mouse *src)\n{\n    tgt->xPos = src->xPos;\n    tgt->yPos = src->yPos;\n    strcpy(tgt->Name, src->Name);\n}\n\n/* ====================\n main function.\n==================== */\nint main()\n{\n    struct Mouse myMouse, yourMouse;\n\n    yourMouse.xPos = 10;\n    yourMouse.yPos = 20;\n    strcpy(yourMouse.Name, "Mickey");\n\n    cpyMouse1(&myMouse, &yourMouse);\n\n    printf("Name: %s, X: %d, Y: %d\\n", myMouse.Name, myMouse.xPos, myMouse.yPos);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `#include <string.h>`：包含字串操作相關的標頭文件，允許使用 `strcpy` 函式來複製字串。\n\n3. `struct Mouse`：定義了一個結構體 `Mouse`，包含三個成員變數：`xPos`（代表滑鼠的X座標）、`yPos`（代表滑鼠的Y座標）、`Name`（代表滑鼠的名字，以字元陣列形式存儲）。\n\n4. `void cpyMouse1(struct Mouse *tgt, struct Mouse *src)`：定義了一個函式 `cpyMouse1`，用於將來源滑鼠結構的數據複製到目標滑鼠結構。函式接受兩個結構體指針作為參數，即目標滑鼠結構和來源滑鼠結構。\n\n5. `tgt->xPos = src->xPos;`：將來源滑鼠的X座標複製到目標滑鼠。\n\n6. `tgt->yPos = src->yPos;`：將來源滑鼠的Y座標複製到目標滑鼠。\n\n7. `strcpy(tgt->Name, src->Name);`：使用 `strcpy` 函式將來源滑鼠的名字複製到目標滑鼠。這裡假設 `Name` 是以字元陣列形式表示的名字。\n\n8. `int main()`：主函式的開始。\n\n9. `struct Mouse myMouse, yourMouse;`：宣告了兩個 `Mouse` 結構的變數 `myMouse` 和 `yourMouse`。\n\n10. `yourMouse.xPos = 10;`：為 `yourMouse` 的X座標賦值為10。\n\n11. `yourMouse.yPos = 20;`：為 `yourMouse` 的Y座標賦值為20。\n\n12. `strcpy(yourMouse.Name, "Mickey");`：將字串 "Mickey" 複製到 `yourMouse` 的名字中。\n\n13. `cpyMouse1(&myMouse, &yourMouse);`：調用函式 `cpyMouse1`，將 `yourMouse` 的內容複製到 `myMouse`。\n\n14. `printf("Name: %s, X: %d, Y: %d\\n", myMouse.Name, myMouse.xPos, myMouse.yPos);`：使用 `printf` 函式輸出 `myMouse` 結構的內容，包括名字、X座標和Y座標。\n\n15. `return 0;`：主函式正常結束，返回值為0。 \n \n 2 \n /* =========================\n #define 的範例 2.\n========================= */\n#include <stdio.h>\n\n#define TRUE 1\n#define FALSE 0\n#define BOOL int\n\n/* ====================\n如果傳入值大於 10, 則傳回 TRUE\n==================== */\nBOOL is_greater_than_10(int i)\n{\n    if (i > 10)\n        return TRUE;\n    else\n        return FALSE;\n}\n\n/* ====================\n main function.\n==================== */\nint main()\n{\n    int i;\n    BOOL result;\n\n    printf("Input a number: ");\n\n    // 檢查 scanf 的返回值\n    if (scanf("%d", &i) != 1) {\n        printf("Error reading input.\\n");\n        return 1;  // 返回非零值表示錯誤\n    }\n\n    result = is_greater_than_10(i);\n\n    if (result == TRUE)\n        printf("Greater than 10!\\n"); /* 大於 10 */\n    else\n        printf("Not greater than 10!\\n"); /* 不大於 10 */\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `#define TRUE 1`：使用 `#define` 指令定義常數 `TRUE`，其值為1。\n\n3. `#define FALSE 0`：使用 `#define` 指令定義常數 `FALSE`，其值為0。\n\n4. `#define BOOL int`：使用 `#define` 指令定義 `BOOL` 為 `int`，將 `BOOL` 視為整數型別。\n\n5. `BOOL is_greater_than_10(int i)`：定義了一個函式 `is_greater_than_10`，接受一個整數參數 `i`，返回 `BOOL` 型別（實際上是 `int`）。如果 `i` 大於10，則返回 `TRUE`，否則返回 `FALSE`。\n\n6. `int main()`：主函式的開始。\n\n7. `int i;`：宣告一個整數變數 `i` 來接受用戶輸入的數字。\n\n8. `BOOL result;`：宣告一個 `BOOL`（實際上是 `int`）型別的變數 `result` 來存儲函式的返回值。\n\n9. `printf("Input a number: ");`：使用 `printf` 函式輸出提示，要求用戶輸入一個數字。\n\n10. `if (scanf("%d", &i) != 1)`：使用 `scanf` 函式讀取用戶輸入的數字，檢查其返回值，如果不等於1，表示讀取失敗，輸出錯誤消息，並返回1（非零值表示錯誤）。\n\n11. `result = is_greater_than_10(i);`：調用函式 `is_greater_than_10`，將用戶輸入的數字傳入，並將返回值存入 `result`。\n\n12. `if (result == TRUE)`：檢查 `result` 是否等於 `TRUE`，如果是，表示輸入的數字大於10，輸出 "Greater than 10!"。\n\n13. `else`：如果條件不滿足，表示輸入的數字不大於10，輸出 "Not greater than 10!"。\n\n14. `return 0;`：主函式正常結束，返回值為0。 \n \n 3 \n /* ====================\n & operator.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int *pointer_a, a;\n    pointer_a = &a;\n    a = 10;\n\n    printf("%d, %d\\n", a, *pointer_a);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `int *pointer_a, a;`：宣告了一個整數指標 `pointer_a` 和一個整數變數 `a`。\n\n3. `pointer_a = &a;`：將變數 `a` 的地址賦值給指標 `pointer_a`。`&` 運算符用於取得變數的地址。\n\n4. `a = 10;`：將變數 `a` 的值設置為10。\n\n5. `printf("%d, %d\\n", a, *pointer_a);`：使用 `printf` 函式輸出變數 `a` 的值和指標 `pointer_a` 所指向的地址的值。`*` 運算符用於解引用指標，獲取該地址存儲的值。\n\n6. `return 0;`：主函式正常結束，返回值為0。\n \n \n 4 \n /* ====================\npointer – 6\n==================== */\n#include <stdio.h>\n\nint main()\n{\nchar *str = "Eric";\n\nprintf("%c\\n", *(str + 0)); /* 也可寫 printf("%c", str[0] ); */\nprintf("%c\\n", *(str + 1)); /* 也可寫 printf("%c", str[1] ); */\nprintf("%c\\n", *(str + 2)); /* 也可寫 printf("%c", str[2] ); */\nprintf("%c\\n", *(str + 3)); /* 也可寫 printf("%c", str[3] ); */\n\nreturn 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `char *str = "Eric";`：宣告一個指向字符的指標 `str`，並將其指向一個包含字符串 "Eric" 的字符陣列。在C中，字符串實際上是以null結尾的字符陣列。\n\n4. `printf("%c\\n", *(str + 0));`：使用指標的算術運算，輸出指向 `str` 開始的字符陣列的第一個元素，即 \'E\'。也可以寫成 `printf("%c\\n", str[0]);`。\n\n5. `printf("%c\\n", *(str + 1));`：輸出 `str` 的第二個元素，即 \'r\'。也可以寫成 `printf("%c\\n", str[1]);`。\n\n6. `printf("%c\\n", *(str + 2));`：輸出 `str` 的第三個元素，即 \'i\'。也可以寫成 `printf("%c\\n", str[2]);`。\n\n7. `printf("%c\\n", *(str + 3));`：輸出 `str` 的第四個元素，即 \'c\'。也可以寫成 `printf("%c\\n", str[3]);`。\n\n8. `return 0;`：主函式正常結束，返回值為0。\n \n \n 5 \n /* ====================\n 2d array.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int array[3][3];\n    int x, y;\n\n    array[0][0] = 1;\n    array[0][1] = 2;\n    array[0][2] = 3;\n    array[1][0] = 4;\n    array[1][1] = 5;\n    array[1][2] = 6;\n    array[2][0] = 7;\n    array[2][1] = 8;\n    array[2][2] = 9;\n\n    for (x = 0; x < 3; x++)\n    {\n        for (y = 0; y < 3; y++)\n        {\n            printf("%d,", array[x][y]);\n        }\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `int array[3][3];`：宣告一個3x3的整數二維陣列 `array`。\n\n4. `int x, y;`：宣告整數變數 `x` 和 `y` 作為迴圈計數器。\n\n5. `array[0][0] = 1;` 到 `array[2][2] = 9;`：將數字 1 到 9 分別賦值給二維陣列中的元素。\n\n6. `for (x = 0; x < 3; x++)`：外層迴圈，從0到2，遍歷二維陣列的行。\n\n7. `for (y = 0; y < 3; y++)`：內層迴圈，從0到2，遍歷二維陣列的列。\n\n8. `printf("%d,", array[x][y]);`：輸出二維陣列中當前位置的元素值，並在每個元素值後面加上逗號。\n\n9. `return 0;`：主函式正常結束，返回值為0。\n \n \n 6 \n /* ====================\n array - 1.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int grade[5]; /* size = 5 的 array */\n    int i;\n\n    grade[0] = 75; /* 1st element */\n    grade[1] = 80; /* 2nd element */\n    grade[2] = 85; /* 3rd element */\n    grade[3] = 70; /* 4th element */\n    grade[4] = 90; /* 5th element */\n\n    for (i = 0; i < 5; i++)\n    {\n        printf("Number %d = %d\\n", i, grade[i]);\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `int grade[5];`：宣告一個包含5個整數元素的陣列 `grade`。\n\n4. `int i;`：宣告整數變數 `i`，將用於迴圈計數。\n\n5. `grade[0] = 75;` 到 `grade[4] = 90;`：將分數賦值給陣列中的每個元素。\n\n6. `for (i = 0; i < 5; i++)`：使用 `for` 迴圈，從0到4，遍歷陣列的每個元素。\n\n7. `printf("Number %d = %d\\n", i, grade[i]);`：使用 `printf` 函式，輸出當前陣列元素的索引和值。\n\n8. `return 0;`：主函式正常結束，返回值為0。\n \n \n 7 \n /* ====================\n do - while.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int i, j;\n    i = 0;\n    j = 10; /* 迴圈外先設定初值 */\n\n    do\n    {\n        printf("i = %d, ", i);\n        printf("j = %d\\n", j);\n        i++;\n        j++;\n    } while (i < 6); /* 檢查條件的地方 */\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `int i, j;`：宣告整數變數 `i` 和 `j`。\n\n4. `i = 0;` 和 `j = 10;`：給變數 `i` 賦值0，`j` 賦值10。\n\n5. `do`：開始 `do-while` 迴圈，這部分的代碼將至少執行一次。\n\n6. `{`：迴圈的開始。\n\n7. `printf("i = %d, ", i);` 和 `printf("j = %d\\n", j);`：使用 `printf` 函式印出 `i` 和 `j` 的值。\n\n8. `i++;` 和 `j++;`：將 `i` 和 `j` 遞增。\n\n9. `} while (i < 6);`：`do-while` 迴圈的結尾。在這裡，條件 `i < 6` 被檢查，如果成立，則迴圈會再次執行。如果條件不滿足，則迴圈結束。\n\n10. `return 0;`：主函式正常結束，返回值為0。 \n \n 8 \n /* ====================\n99 乘法.\n==================== */\n#include <stdio.h>\n\nint main()\n{\n    int x, y;\n\n    for (x = 1; x <= 9; x++)\n    {\n        for (y = 1; y <= 9; y++)\n        {\n            printf("%2d ", x * y);  /* 使用 %2d 以確保數字的對齊性 */\n        }\n        printf("\\n");\n    }\n\n    return 0;\n} \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `int x, y;`：宣告兩個整數變數 `x` 和 `y`，這將用於乘法表的索引。\n\n4. `for (x = 1; x <= 9; x++)`：外部 `for` 迴圈，用於遍歷乘法表的行。從1開始，一直到9，每次遞增1。\n\n5. `{`：外部迴圈的開始。\n\n6. `for (y = 1; y <= 9; y++)`：內部 `for` 迴圈，用於遍歷乘法表的列。同樣，從1開始，一直到9，每次遞增1。\n\n7. `{`：內部迴圈的開始。\n\n8. `printf("%2d ", x * y);`：使用 `printf` 函式印出 `x * y` 的結果。 `%2d` 的格式確保數字的對齊性，即使是個位數的結果也會有一個空格的寬度。\n\n9. `}`：內部迴圈的結尾。\n\n10. `printf("\\n");`：在內部迴圈執行完畢後，換行，以便開始新的一行。\n\n11. `}`：外部迴圈的結尾。\n\n12. `return 0;`：主函式正常結束，返回值為0。 \n \n \n 9 \n /* ====================\n Program "continue"\n ==================== */\n#include <stdio.h>\n\nint main()\n{\n    int i;\n\n    for (i = 0; i < 10; i++)\n    {\n        if ((i == 1) || (i == 2) || (i == 3))\n        {\n            continue; /* 忽略以後的 program, 回到 for. */\n        }\n        printf("i = %d\\n", i);\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。\n\n2. `int main()`：定義主函式。\n\n3. `int i;`：宣告一個整數變數 `i`，將用於 `for` 迴圈的迭代。\n\n4. `for (i = 0; i < 10; i++)`：`for` 迴圈，從 `i` 等於0開始，每次遞增1，直到 `i` 小於10。\n\n5. `{`：迴圈的開始。\n\n6. `if ((i == 1) || (i == 2) || (i == 3))`：條件語句，檢查 `i` 是否等於1、2或3。\n\n7. `{`：條件語句的開始。\n\n8. `continue;`：如果條件成立，執行 `continue`，這會跳過剩餘的程式碼，直接回到 `for` 迴圈的下一次迭代，忽略以下的 `printf`。\n\n9. `}`：條件語句的結尾。\n\n10. `printf("i = %d\\n", i);`：在未遇到 `continue` 的情況下，印出 `i` 的值。\n\n11. `}`：迴圈的結尾。\n\n12. `return 0;`：主函式正常結束，返回值為0。\n \n \n 10 \n /* ====================\nswitch - case 的範例 3.\n==================== */\n#include <stdio.h>\n\nint main()\n{\nchar c;\n\nprintf("Input a char: ");\n\n// 檢查 scanf 的返回值\nif (scanf("%c", &c) != 1)\n{\nprintf("Error reading input.\\n");\nreturn 1; // 返回非零值表示錯誤\n}\n\nswitch (c)\n{\ncase \'a\':\nprintf("You pressed a\\n");\nbreak;\ncase \'b\':\nprintf("You pressed b\\n");\nbreak;\ncase \'c\':\nprintf("You pressed c\\n");\nbreak;\ndefault:\nprintf("Unrecognized input\\n");\nbreak;\n}\n\nreturn 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 和 `scanf` 函式。\n\n2. `int main()`：定義主函式。\n\n3. `char c;`：宣告一個字符變數 `c`，用於存儲從用戶輸入讀取的字符。\n\n4. `printf("Input a char: ");`：輸出提示消息，要求用戶輸入一個字符。\n\n5. `if (scanf("%c", &c) != 1)`：使用 `scanf` 函式讀取用戶輸入的字符。檢查 `scanf` 的返回值，確保成功讀取一個字符。\n\n6. `{`：`if` 條件語句的開始。\n\n7. `printf("Error reading input.\\n");`：如果讀取失敗，輸出錯誤消息。\n\n8. `return 1;`：返回1，表示程式發生錯誤。\n\n9. `}`：`if` 條件語句的結尾。\n\n10. `switch (c)`：`switch` 語句，根據字符 `c` 的值進行分支選擇。\n\n11. `{`：`switch` 語句的開始。\n\n12. `case \'a\':`：如果 `c` 的值等於 \'a\'，執行以下語句。\n\n13. `printf("You pressed a\\n");`：輸出消息表示用戶按下 \'a\'。\n\n14. `break;`：跳出 `switch` 語句。\n\n15. `case \'b\':`：如果 `c` 的值等於 \'b\'，執行以下語句。\n\n16. `printf("You pressed b\\n");`：輸出消息表示用戶按下 \'b\'。\n\n17. `break;`：跳出 `switch` 語句。\n\n18. `case \'c\':`：如果 `c` 的值等於 \'c\'，執行以下語句。\n\n19. `printf("You pressed c\\n");`：輸出消息表示用戶按下 \'c\'。\n\n20. `break;`：跳出 `switch` 語句。\n\n21. `default:`：如果 `c` 的值不等於 \'a\'、\'b\' 或 \'c\'，執行以下語句。\n\n22. `printf("Unrecognized input\\n");`：輸出消息表示輸入未被識別。\n\n23. `break;`：跳出 `switch` 語句。\n\n24. `}`：`switch` 語句的結尾。\n\n25. `return 0;`：主函式正常結束，返回值為0。 \n', 'tags': '', 'url': 'CEX_T.html'}, {'title': 'ANSIC', 'text': '1 \n #include <stdio.h>\n#include <string.h>\n\nint main() {\n    int n, x = 0;\n\n    printf("\\n\\n Check whether a given number is an ugly number:\\n");\n    printf("----------------------------------------------------\\n");\n\n    // 检查 scanf 的返回值\n    if (scanf("%d", &n) != 1) {\n        printf("Input is not a valid integer.\\n");\n        return 1;  // 退出程序，表示出现错误\n    }\n\n    if (n <= 0) {\n        printf("Input a correct number.\\n");\n    } else {\n        while (n != 1) {\n            if (n % 5 == 0) {\n                n /= 5;\n            } else if (n % 3 == 0) {\n                n /= 3;\n            } else if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                printf("It is not an ugly number.\\n");\n                x = 1;\n                break;\n            }\n        }\n\n        if (x == 0) {\n            printf("It is an ugly number.\\n");\n        }\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 和 `scanf` 函式。\n   \n2. `#include <string.h>`：包含字串操作相關的庫，雖然在目前的程式碼中未使用。\n\n3. `int main()`：定義主函式。\n\n4. `int n, x = 0;`：宣告兩個整數變數 `n` 和 `x`，其中 `x` 被初始化為0。\n\n5. `printf("\\n\\n Check whether a given number is an ugly number:\\n");`：輸出提示消息，要求用戶輸入一個數字以檢查是否為"ugly number"。\n\n6. `printf("----------------------------------------------------\\n");`：輸出分隔線。\n\n7. `if (scanf("%d", &n) != 1)`：使用 `scanf` 函式讀取用戶輸入的數字。檢查 `scanf` 的返回值，確保成功讀取一個整數。\n\n8. `{`：`if` 條件語句的開始。\n\n9. `printf("Input is not a valid integer.\\n");`：如果讀取失敗，輸出錯誤消息。\n\n10. `return 1;`：返回1，表示程式發生錯誤。\n\n11. `}`：`if` 條件語句的結尾。\n\n12. `if (n <= 0)`：檢查用戶輸入的數字是否小於或等於0。\n\n13. `{`：`if` 條件語句的開始。\n\n14. `printf("Input a correct number.\\n");`：如果是，輸出消息表示輸入的數字不正確。\n\n15. `}`：`if` 條件語句的結尾。\n\n16. `else`：如果 `n` 大於0，執行以下語句。\n\n17. `{`：`else` 語句的開始。\n\n18. `while (n != 1)`：當 `n` 不等於1時，執行以下循環。\n\n19. `{`：`while` 循環的開始。\n\n20. `if (n % 5 == 0)`：如果 `n` 可以被5整除。\n\n21. `{`：`if` 條件語句的開始。\n\n22. `n /= 5;`：將 `n` 除以5。\n\n23. `}`：`if` 條件語句的結尾。\n\n24. `else if (n % 3 == 0)`：如果 `n` 不可被5整除，並且可以被3整除。\n\n25. `{`：`else if` 條件語句的開始。\n\n26. `n /= 3;`：將 `n` 除以3。\n\n27. `}`：`else if` 條件語句的結尾。\n\n28. `else if (n % 2 == 0)`：如果 `n` 不可被5和3整除，並且可以被2整除。\n\n29. `{`：`else if` 條件語句的開始。\n\n30. `n /= 2;`：將 `n` 除以2。\n\n31. `}`：`else if` 條件語句的結尾。\n\n32. `else`：如果 `n` 不能被5、3和2整除。\n\n33. `{`：`else` 語句的開始。\n\n34. `printf("It is not an ugly number.\\n");`：輸出消息表示輸入的數字不是"ugly number"。\n\n35. `x = 1;`：設置 `x` 為1，表示已經找到了結果。\n\n36. `break;`：跳出 `while` 循環。\n\n37. `}`：`else` 語句的結尾。\n\n38. `if (x == 0)`：檢查 `x` 的值是否仍然為0。\n\n39. `{`：`if` 條件語句的開始。\n\n40. `printf("It is an ugly number.\\n");`：如果是，輸出消息表示輸入的數字是"ugly number"。\n\n41. `}`：`if` 條件語句的結尾。\n\n42. `return 0;`：主函式正常結束，返回值為0。 \n \n 2 \n #include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t epoch = 0;\n\n    printf("\\n自纪元开始以来的秒数：%ld\\n", (long)epoch);\n    printf("对应的日期和时间：%s\\n", asctime(gmtime(&epoch)));\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 函式。\n\n2. `#include <time.h>`：包含時間相關的庫，以便使用 `time` 函式和其他時間相關的功能。\n\n3. `int main(void)`：定義主函式，返回一個整數。\n\n4. `time_t epoch = 0;`：宣告一個 `time_t` 型別的變數 `epoch` 並將其初始化為0。`time_t` 是一種用於表示時間的數據類型，通常是從UNIX紀元（1970年1月1日）開始的秒數。\n\n5. `printf("\\n自纪元开始以来的秒数：%ld\\n", (long)epoch);`：輸出一條消息，顯示從UNIX紀元開始到目前經過的秒數。使用 `%ld` 格式化輸出長整數，`(long)epoch` 將 `epoch` 轉換為長整數。\n\n6. `printf("对应的日期和时间：%s\\n", asctime(gmtime(&epoch)));`：輸出一條消息，顯示將 `epoch` 轉換為日期和時間的結果。`gmtime(&epoch)` 返回 `epoch` 的格林威治標準時間（GMT）的結構體表示，`asctime` 將結構體轉換為字串形式。`%s` 用於格式化輸出字串。\n\n7. `return 0;`：主函式正常結束，返回值為0。 \n \n 3 \n #define __STDC_WANT_LIB_EXT1__ 1\n#include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t t = time(NULL);\n    printf("\\nThe calendar time expressed as a local Time is :");   \n    printf("\\nUTC:   %s", asctime(gmtime(&t)));\n    printf("local: %s\\n", asctime(localtime(&t)));\n\n#ifdef __STDC_LIB_EXT1__\n    struct tm buf;\n    char str[26];\n\n    asctime_s(str, sizeof str, gmtime_s(&t, &buf));\n    printf("UTC:   %s", str);\n\n    asctime_s(str, sizeof str, localtime_s(&t, &buf));\n    printf("local: %s", str);\n#endif\n\n    return 0;\n} \n 解釋： \n 1. `#define __STDC_WANT_LIB_EXT1__ 1`：這是一個預處理器指令，用來啟用 C11 標準庫的擴展功能，包括安全函式（安全函式的名稱帶有 `_s` 結尾）。\n\n2. `#include <stdio.h>`：包含標準輸入/輸出庫的指令，以便使用 `printf` 函式。\n\n3. `#include <time.h>`：包含時間相關的庫，以便使用 `time`、`gmtime`、`localtime`、`asctime` 函式。\n\n4. `int main(void)`：定義主函式，返回一個整數。\n\n5. `time_t t = time(NULL);`：宣告一個 `time_t` 型別的變數 `t`，並使用 `time(NULL)` 函式獲取當前的時間，將其賦值給 `t`。\n\n6. `printf("\\nThe calendar time expressed as a local Time is :");`：輸出一條消息，提示即將輸出本地時間。\n\n7. `printf("\\nUTC:   %s", asctime(gmtime(&t)));`：使用 `gmtime` 函式將 `t` 轉換為格林威治標準時間（UTC），再使用 `asctime` 函式將其轉換為字串形式，最後使用 `printf` 函式輸出。\n\n8. `printf("local: %s\\n", asctime(localtime(&t)));`：使用 `localtime` 函式將 `t` 轉換為本地時間，再使用 `asctime` 函式將其轉換為字串形式，最後使用 `printf` 函式輸出。\n\n9. `#ifdef __STDC_LIB_EXT1__`：這是一個條件編譯指令，用於確保編譯器支持擴展功能。\n\n10. `struct tm buf;`：宣告一個 `struct tm` 型別的結構體 `buf`，用於存儲時間的詳細信息。\n\n11. `char str[26];`：宣告一個長度為26的字符陣列 `str`，用於存儲轉換後的時間字串。\n\n12. `asctime_s(str, sizeof str, gmtime_s(&t, &buf));`：使用 `gmtime_s` 函式將 `t` 轉換為格林威治標準時間（UTC），再使用 `asctime_s` 函式將其轉換為字串形式，並安全地將結果存儲到 `str` 中。\n\n13. `printf("UTC:   %s", str);`：使用 `printf` 函式輸出 UTC 時間字串。\n\n14. `asctime_s(str, sizeof str, localtime_s(&t, &buf));`：使用 `localtime_s` 函式將 `t` 轉換為本地時間，再使用 `asctime_s` 函式將其轉換為字串形式，並安全地將結果存儲到 `str` 中。\n\n15. `printf("local: %s", str);`：使用 `printf` 函式輸出本地時間字串。\n\n16. `#endif`：結束條件編譯區塊。\n\n17. `return 0;`：主函式正常結束，返回值為0。 \n \n \n 4 \n #include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    // 设置时区为“Asia/Calcutta”\n    setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);   \n\n    // 获取并打印当前日期和时间\n    struct tm tm = *localtime(&(time_t){time(NULL)});\n    printf("\\n今天是 :            %s", asctime(&tm));\n    printf("(夏令时 %s)\\n", tm.tm_isdst ? "生效中" : "未生效");\n\n    // 将月份减去 24，表示 24 个月前的日期和时间\n    tm.tm_mon -= 24;  \n\n    // 重新计算时间\n    mktime(&tm);       \n\n    // 获取并打印 24 个月前的日期和时间\n    printf("\\n24个月前的日期是 : %s", asctime(&tm));\n    printf("(夏令时 %s)\\n\\n", tm.tm_isdst ? "生效中" : "未生效");\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdlib.h>`：包含標準庫的 `stdlib.h` 標頭文件，該文件提供動態內存分配、亂數生成、環境變數管理等功能。\n\n2. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，該文件提供輸入和輸出的相關函式。\n\n3. `#include <time.h>`：包含時間相關的庫，以便使用 `time`、`localtime`、`mktime`、`asctime` 函式。\n\n4. `int main(void)`：定義主函式，返回一個整數。\n\n5. `setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);`：使用 `setenv` 函式將時區設置為“Asia/Calcutta”，這是印度的一個時區。\n\n6. `struct tm tm = *localtime(&(time_t){time(NULL)});`：宣告一個 `struct tm` 型別的結構體 `tm`，並使用 `time` 函式獲取當前時間，再用 `localtime` 函式將時間轉換為本地時間。\n\n7. `printf("\\n今天是 :            %s", asctime(&tm));`：使用 `asctime` 函式將 `tm` 轉換為字串形式，然後使用 `printf` 函式輸出當前日期和時間。\n\n8. `printf("(夏令时 %s)\\n", tm.tm_isdst ? "生效中" : "未生效");`：使用 `tm_isdst` 成員判斷當前是否處於夏令時，並輸出相應的消息。\n\n9. `tm.tm_mon -= 24;`：將 `tm` 結構體中的月份減去24，表示24個月前的日期和時間。\n\n10. `mktime(&tm);`：使用 `mktime` 函式重新計算 `tm` 結構體中的時間，確保時間的正確性。\n\n11. `printf("\\n24个月前的日期是 : %s", asctime(&tm));`：使用 `asctime` 函式將 `tm` 轉換為字串形式，然後使用 `printf` 函式輸出24個月前的日期和時間。\n\n12. `printf("(夏令时 %s)\\n\\n", tm.tm_isdst ? "生效中" : "未生效");`：使用 `tm_isdst` 成員判斷24個月前是否處於夏令時，並輸出相應的消息。\n\n13. `return 0;`：主函式正常結束，返回值為0。 \n \n 5 \n #include <stdio.h>\n#include <limits.h>\n\ndouble powxn(double x, int n) {\n    double k;\n    if (n == 0) return 1;\n    k = powxn(x * x, n / 2);\n    if (n % 2) k = k * x;\n    return k;\n}\n\nint main(void)\n{\n    double x = 7.0;\n    int n = 2;\n    printf("\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ",powxn(x, n));\n    x = 6.2;\n    n = 3;\n    printf("\\n\\nx = %f, y = %d  ", x, n);\n    printf("\\nResult:(x^n) : %f ",powxn(x, n));\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `#include <limits.h>`：包含標準整數類型的庫的 `limits.h` 標頭文件，提供整數類型的極值常量。\n\n3. `double powxn(double x, int n)`：定義一個名為 `powxn` 的函式，用於計算 `x` 的 `n` 次方。函式返回一個 `double` 型別的值。\n\n4. `double k;`：宣告一個 `double` 型別的變數 `k`，用於存儲計算結果。\n\n5. `if (n == 0) return 1;`：如果指數 `n` 為0，直接返回1，因為任何數的0次方都是1。\n\n6. `k = powxn(x * x, n / 2);`：遞迴計算 `x` 的平方的 `(n / 2)` 次方。\n\n7. `if (n % 2) k = k * x;`：如果指數 `n` 為奇數，乘上額外的一個 `x`。\n\n8. `return k;`：返回計算結果 `k`。\n\n9. `int main(void)`：定義主函式，返回一個整數。\n\n10. `double x = 7.0;`：初始化一個 `double` 型別的變數 `x`，值為7.0。\n\n11. `int n = 2;`：初始化一個整數型別的變數 `n`，值為2。\n\n12. `printf("\\nx = %f, y = %d  ", x, n);`：使用 `printf` 函式輸出變數 `x` 和 `n` 的值。\n\n13. `printf("\\nResult:(x^n) : %f ",powxn(x, n));`：使用 `printf` 函式輸出 `x` 的 `n` 次方的結果，調用 `powxn` 函式計算。\n\n14. `x = 6.2;`：將變數 `x` 的值更改為6.2。\n\n15. `n = 3;`：將變數 `n` 的值更改為3。\n\n16. `printf("\\n\\nx = %f, y = %d  ", x, n);`：再次使用 `printf` 函式輸出更新後的變數 `x` 和 `n` 的值。\n\n17. `printf("\\nResult:(x^n) : %f ",powxn(x, n));`：再次使用 `printf` 函式輸出 `x` 的 `n` 次方的結果，調用 `powxn` 函式計算。\n\n18. `return 0;`：主函式正常結束，返回值為0。 \n \n 6 \n //Source: https://bit.ly/2KNsta8\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nchar* fractionToDecimal(int numerator, int denominator) {\n    char *p;\n    int psz, n, *dec, dsz, x;\n    long long num, den, k, f;\n    int i, repeat_at;\n    int neg = 0;\n\n    psz = dsz = 100; n = x = 0;\n    p = malloc(psz * sizeof(char));\n\n    neg = ((numerator > 0 && denominator < 0) ||\n           (numerator < 0 && denominator > 0)) ? 1 : 0;\n    num = numerator;\n    den = denominator;\n    num = (num < 0) ? -num : num;\n    den = (den < 0) ? -den : den;\n\n    k = num / den;\n    f = num % den;\n\n    if (neg && (k || f)) p[n ++] = \'-\';\n\n    n += sprintf(&p[n], "%lld", k);\n    if (!f) {\n        p[n] = 0;\n        return p;\n    }\n\n    p[n ++] = \'.\';\n\n    dec = malloc(dsz * sizeof(int));\n\n    repeat_at = -1;\n    if (f < 0) f = -f;\n    while (f) {\n        for (i = 0; i < x; i += 2) {\n            if (dec[i] == f) {\n                repeat_at = i;\n                goto done;\n            }\n        }\n        if (x + 1 >= dsz) {\n            dsz *= 2;\n            dec = realloc(dec, dsz * sizeof(int));\n        }\n        dec[x ++] = f;\n        f *= 10;\n        k = f / den;\n        dec[x ++] = k;\n        f = f % den;\n    }\n\ndone:\n    for (i = 0; i < x; i += 2) {\n        if (n + 3 > psz) {\n            psz *= 2;\n            p = realloc(p, psz * sizeof(char));\n        }\n        if (repeat_at == i) {\n            p[n ++] = \'(\';\n        }\n        p[n ++] = \'0\' + dec[i + 1];\n    }\n    if (repeat_at != -1) p[n ++] = \')\';\n    p[n ++] = 0;\n\n    free(dec);\n\n    return p;\n}\n\nint main(void)\n{\n    int n = 3;\n    int d = 2;\n    printf("\\nn = %d, d = %d  ", n, d);\n    printf("\\nFractional part: %s ", fractionToDecimal(n, d));\n\n    n = 4;\n    d = 7;\n    printf("\\n\\nn = %d, d = %d  ", n, d);\n    printf("\\nFractional part: %s ", fractionToDecimal(n, d));\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `#include <stdlib.h>`：包含標準庫的 `stdlib.h` 標頭文件，提供動態內存分配函式，如 `malloc` 和 `realloc`。\n\n3. `#include <string.h>`：包含標準字串函式的 `string.h` 標頭文件。\n\n4. `#include <stdbool.h>`：包含 `stdbool.h` 標頭文件，提供布林型別 `bool` 和相關的 `true`、`false` 常量。\n\n5. `char* fractionToDecimal(int numerator, int denominator)`：定義一個函式 `fractionToDecimal`，該函式接收分子 `numerator` 和分母 `denominator`，返回一個指向字符陣列的指標。\n\n6. `char *p;`：宣告一個指向字符的指標 `p`，用於存儲結果。\n\n7. `int psz, n, *dec, dsz, x;`：宣告一些整數變數，其中 `psz` 和 `dsz` 分別用於表示陣列 `p` 和 `dec` 的大小，`n` 表示字符陣列 `p` 目前的位置，`x` 用於追蹤數字陣列 `dec` 的位置。\n\n8. `long long num, den, k, f;`：宣告一些長整數變數，用於存儲分子 `numerator`、分母 `denominator`、商 `k` 和餘數 `f`。\n\n9. `int i, repeat_at;`：宣告迴圈中使用的整數變數，`i` 用於迴圈遍歷，`repeat_at` 用於標記重複的位置。\n\n10. `int neg = 0;`：宣告一個整數變數 `neg`，用於標記分數是否為負數。\n\n11. `psz = dsz = 100; n = x = 0;`：初始化一些變數的大小，`psz` 和 `dsz` 設置為100，`n` 和 `x` 設置為0。\n\n12. `p = malloc(psz * sizeof(char));`：使用 `malloc` 函式分配 `psz` 大小的內存，用於存儲結果。\n\n13. `neg = ((numerator > 0 && denominator < 0) || (numerator < 0 && denominator > 0)) ? 1 : 0;`：檢查分數的正負性。\n\n14. `num = numerator;`、`den = denominator;`：將分子和分母的值存儲在 `num` 和 `den` 中。\n\n15. `num = (num < 0) ? -num : num;`、`den = (den < 0) ? -den : den;`：如果分子或分母為負，則取絕對值。\n\n16. `k = num / den;`、`f = num % den;`：計算商 `k` 和餘數 `f`。\n\n17. `if (neg && (k || f)) p[n ++] = \'-\';`：如果分數為負，並且商 `k` 或餘數 `f` 不為0，將負號加入結果。\n\n18. `n += sprintf(&p[n], "%lld", k);`：使用 `sprintf` 函式將商 `k` 轉換為字符串，並將其添加到結果中。\n\n19. `if (!f) { p[n] = 0; return p; }`：如果餘數 `f` 為0，表示分數為整數，將結果結束並返回。\n\n20. `p[n ++] = \'.\';`：如果有小數部分，添加小數點。\n\n21. `dec = malloc(dsz * sizeof(int));`：使用 `malloc` 函式分配 `dsz` 大小的整數陣列內存，用於存儲小數部分。\n\n22. `repeat_at = -1;`：初始化 `repeat_at` 為-1，用於標記重複的位置。\n\n23. `if (f < 0) f = -f;`：如果餘數 `f` 為負，取絕對值。\n\n24. `while (f) {`：當餘數 `f` 不為0時執行迴圈。\n\n25. `for (i = 0; i < x; i += 2) { if (dec[i] == f) { repeat_at = i; goto done; } }`：檢查小數部分是否重複，如果發現重複，標記位置並跳轉到 `done` 標籤。\n\n26. `if (x + 1 >= dsz) { dsz *= 2; dec = realloc(dec, dsz * sizeof(int\n\n)); }`：檢查 `dec` 陣列大小是否足夠，如果不夠，則雙倍擴展其大小。\n\n27. `dec[x ++] = f;`、`f *= 10;`、`k = f / den;`、`dec[x ++] = k;`、`f = f % den;`：更新小數部分的數字陣列 `dec`。\n\n28. `done:`：標籤，表示已經完成查找重複的過程。\n\n29. `for (i = 0; i < x; i += 2) {`：遍歷小數部分的數字陣列 `dec`。\n\n30. `if (n + 3 > psz) { psz *= 2; p = realloc(p, psz * sizeof(char)); }`：檢查結果陣列 `p` 的大小是否足夠，如果不夠，則雙倍擴展其大小。\n\n31. `if (repeat_at == i) { p[n ++] = \'(\'; }`：如果遇到重複的位置，添加開始標記 `(`。\n\n32. `p[n ++] = \'0\' + dec[i + 1];`：將小數部分的數字添加到結果。\n\n33. `if (repeat_at != -1) p[n ++] = \')\';`：如果有重複，添加結束標記 `)`。\n\n34. `p[n ++] = 0;`：結束結果的字符串。\n\n35. `free(dec);`：釋放小數部分的數字陣列 `dec` 所占的內存。\n\n36. `return p;`：返回存儲結果的指標。\n\n37. `int main(void)`：定義主函式，返回一個整數。\n\n38. `int n = 3;`、`int d = 2;`：初始化兩個整數變數 `n` 和 `d`，分別表示分子和分母。\n\n39. `printf("\\nn = %d, d = %d  ", n, d);`：使用 `printf` 函式輸出分數的分子和分母。\n\n40. `printf("\\nFractional part: %s ", fractionToDecimal(n, d));`：使用 `printf` 函式輸出分數的十進制小數部分，調用 `fractionToDecimal` 函式計算。\n\n41. `n = 4;`、`d = 7;`：更新分數的分子和分母。\n\n42. `printf("\\n\\nn = %d, d = %d  ", n, d);`：再次使用 `printf` 函式輸出更新後的分子和分母。\n\n43. `printf("\\nFractional part: %s ", fractionToDecimal(n, d));`：再次使用 `printf` 函式輸出更新後的分數的十進制小數部分，調用 `fractionToDecimal` 函式計算。\n\n44. `return 0;`：主函式正常結束，返回值為0。 \n \n 7 \n #include <stdio.h>\n\nint main() {\n    int fno, sno, *ptr, *qtr, sum;  // 宣告整數變數 fno, sno, sum，以及整數指標 ptr, qtr\n\n    printf("\\n\\n Pointer : Add two numbers :\\n");\n    printf("--------------------------------\\n");\n\n    printf(" Input the first number : ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &fno) != 1) {\n        fprintf(stderr, "Error: Invalid input for the first number.\\n");\n        return 1;\n    }\n\n    printf(" Input the second number : ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &sno) != 1) {\n        fprintf(stderr, "Error: Invalid input for the second number.\\n");\n        return 1;\n    }\n\n    ptr = &fno;  // 將 fno 的地址賦值給指標 ptr\n    qtr = &sno;  // 將 sno 的地址賦值給指標 qtr\n\n    sum = *ptr + *qtr;  // 解參考 ptr 和 qtr，取得值並計算它們的和\n\n    printf(" The sum of the entered numbers is : %d\\n\\n", sum);  // 輸出輸入數字的總和\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `int fno, sno, *ptr, *qtr, sum;`：宣告整數變數 `fno`、`sno`、`sum`，以及整數指標 `ptr` 和 `qtr`。\n\n4. `printf("\\n\\n Pointer : Add two numbers :\\n");`：使用 `printf` 函式輸出提示信息，表示要使用指標相加兩個數字。\n\n5. `printf("--------------------------------\\n");`：使用 `printf` 函式輸出分隔線。\n\n6. `printf(" Input the first number : ");`：使用 `printf` 函式提示用戶輸入第一個數字。\n\n7. `if (scanf("%d", &fno) != 1) { fprintf(stderr, "Error: Invalid input for the first number.\\n"); return 1; }`：使用 `scanf` 函式讀取第一個數字，並檢查是否成功讀取一個整數。如果讀取失敗，則輸出錯誤信息並返回1。\n\n8. `printf(" Input the second number : ");`：使用 `printf` 函式提示用戶輸入第二個數字。\n\n9. `if (scanf("%d", &sno) != 1) { fprintf(stderr, "Error: Invalid input for the second number.\\n"); return 1; }`：使用 `scanf` 函式讀取第二個數字，並檢查是否成功讀取一個整數。如果讀取失敗，則輸出錯誤信息並返回1。\n\n10. `ptr = &fno;`：將變數 `fno` 的地址賦值給指標 `ptr`。\n\n11. `qtr = &sno;`：將變數 `sno` 的地址賦值給指標 `qtr`。\n\n12. `sum = *ptr + *qtr;`：使用指標 `ptr` 和 `qtr` 解參考，取得它們所指向的值，然後計算這兩個值的和，將結果賦值給變數 `sum`。\n\n13. `printf(" The sum of the entered numbers is : %d\\n\\n", sum);`：使用 `printf` 函式輸出輸入數字的總和。\n\n14. `return 0;`：主函式正常結束，返回值為0。 \n \n 8 \n #include <stdio.h>\n\nint main() {\n    int arr[10];  // 宣告一個大小為10的整數數組，用於存儲使用者輸入的整數\n    int i;\n\n    // 提示用戶輸入十個整數\n    printf("\\n\\nRead and Print elements of an array:\\n");\n    printf("-----------------------------------------\\n");\n    printf("Input 10 elements in the array :\\n");\n\n    // 使用迴圈接受用戶輸入，並將整數存入數組\n    for (i = 0; i < 10; i++) {\n        printf("element - %d : ", i);\n\n        // 檢查 scanf 的返回值，確保成功讀取一個整數\n        if (scanf("%d", &arr[i]) != 1) {\n            fprintf(stderr, "Error: Invalid input for element %d.\\n", i);\n            return 1;  // 如果輸入無效，返回錯誤碼\n        }\n    }\n\n    // 顯示數組中的所有元素\n    printf("\\nElements in array are: ");\n    for (i = 0; i < 10; i++) {\n        printf("%d  ", arr[i]);\n    }\n\n    printf("\\n");\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `int arr[10];`：宣告一個大小為10的整數數組 `arr`，用於存儲使用者輸入的十個整數。\n\n4. `int i;`：宣告整數變數 `i`，用於迴圈中計數。\n\n5. `printf("\\n\\nRead and Print elements of an array:\\n");`：使用 `printf` 函式輸出提示信息，表示將要讀取並打印數組元素。\n\n6. `printf("-----------------------------------------\\n");`：使用 `printf` 函式輸出分隔線。\n\n7. `printf("Input 10 elements in the array :\\n");`：使用 `printf` 函式提示用戶輸入十個整數。\n\n8. `for (i = 0; i < 10; i++) {`：使用 `for` 迴圈，從0開始，重複10次，迭代變數 `i` 用於控制迴圈。\n\n9. `printf("element - %d : ", i);`：使用 `printf` 函式提示用戶輸入當前迴圈迭代的數組元素的索引。\n\n10. `if (scanf("%d", &arr[i]) != 1) {`：使用 `scanf` 函式讀取一個整數，並檢查是否成功讀取。如果讀取失敗，輸出錯誤信息並返回1。\n\n11. `printf("\\nElements in array are: ");`：使用 `printf` 函式輸出提示信息，表示要打印數組中的所有元素。\n\n12. `for (i = 0; i < 10; i++) {`：再次使用 `for` 迴圈，從0開始，重複10次，迭代變數 `i` 用於控制迴圈。\n\n13. `printf("%d  ", arr[i]);`：使用 `printf` 函式打印數組中當前索引處的元素。\n\n14. `printf("\\n");`：換行。\n\n15. `return 0;`：主函式正常結束，返回值為0。 \n \n 9 \n #include <stdio.h>\n\nint main() {\n    int days, years, weeks;\n\n    days = 1329; // 總天數\n\n    // 將天數轉換為年、週和天\n    years = days / 365;  // 計算年數\n    weeks = (days % 365) / 7;  // 計算週數\n    days = days % 7;  // 計算剩餘的天數\n\n    // 輸出結果\n    printf("Years: %d\\n", years);\n    printf("Weeks: %d\\n", weeks);\n    printf("Days: %d\\n", days);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `int days, years, weeks;`：宣告三個整數變數 `days`、`years` 和 `weeks`，用於存儲計算日期的相關值。\n\n4. `days = 1329;`：給變數 `days` 賦值為1329，表示總天數。\n\n5. `years = days / 365;`：計算變數 `days` 中包含的年數，將結果存儲在變數 `years` 中。\n\n6. `weeks = (days % 365) / 7;`：計算變數 `days` 中剩餘的天數，將其轉換為週數，將結果存儲在變數 `weeks` 中。使用 `%` 運算符計算天數的餘數。\n\n7. `days = days % 7;`：計算變數 `days` 中剩餘的天數，將結果存儲在變數 `days` 中。這表示不足一週的天數。\n\n8. `printf("Years: %d\\n", years);`：使用 `printf` 函式輸出計算得到的年數。\n\n9. `printf("Weeks: %d\\n", weeks);`：使用 `printf` 函式輸出計算得到的週數。\n\n10. `printf("Days: %d\\n", days);`：使用 `printf` 函式輸出計算得到的剩餘天數。\n\n11. `return 0;`：主函式正常結束，返回值為0。 \n \n 10 \n #include <stdio.h>\n\nint main() {\n    double wi1, ci1, wi2, ci2, result; // 宣告變數，用於存儲物品的重量和數量\n\n    // 提示用戶輸入物品1的重量\n    printf("Weight - Item1: ");\n    if (scanf("%lf", &wi1) != 1) {\n        fprintf(stderr, "Error: Invalid input for weight of item1.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品1的數量\n    printf("No. of item1: ");\n    if (scanf("%lf", &ci1) != 1) {\n        fprintf(stderr, "Error: Invalid input for count of item1.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品2的重量\n    printf("Weight - Item2: ");\n    if (scanf("%lf", &wi2) != 1) {\n        fprintf(stderr, "Error: Invalid input for weight of item2.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入物品2的數量\n    printf("No. of item2: ");\n    if (scanf("%lf", &ci2) != 1) {\n        fprintf(stderr, "Error: Invalid input for count of item2.\\n");\n        return 1;\n    }\n\n    // 計算平均值\n    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);\n\n    // 輸出平均值\n    printf("Average Value = %f\\n", result);\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `double wi1, ci1, wi2, ci2, result;`：宣告五個雙精度浮點變數 `wi1`、`ci1`、`wi2`、`ci2` 和 `result`，用於存儲物品的重量、數量和計算的結果。\n\n4. `printf("Weight - Item1: ");`：提示用戶輸入物品1的重量。\n\n5. `if (scanf("%lf", &wi1) != 1) {...}`：使用 `scanf` 函式讀取用戶輸入的浮點數值，存儲在 `wi1` 中。檢查 `scanf` 的返回值，確保成功讀取一個數字，否則輸出錯誤信息並返回1。\n\n6. 類似地，提示用戶輸入物品1的數量，並讀取輸入值到變數 `ci1` 中。\n\n7. 類似地，提示用戶輸入物品2的重量，並讀取輸入值到變數 `wi2` 中。\n\n8. 類似地，提示用戶輸入物品2的數量，並讀取輸入值到變數 `ci2` 中。\n\n9. `result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);`：計算平均值，使用公式 `(wi1 * ci1 + wi2 * ci2) / (ci1 + ci2)`。\n\n10. `printf("Average Value = %f\\n", result);`：使用 `printf` 函式輸出計算得到的平均值。\n\n11. `return 0;`：主函式正常結束，返回值為0。 \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'ANSIC_T', 'text': '1 \n #include <stdio.h>\n\nint main() {\n    int x;    // 用於存儲總里程的變數，以公里為單位\n    float y;  // 用於存儲總耗油量的變數，以升為單位\n\n    // 提示用戶輸入總里程並存入 \'x\'\n    printf("Input total distance in km: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &x) != 1) {\n        fprintf(stderr, "Error: Invalid input for total distance.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入總耗油量並存入 \'y\'\n    printf("Input total fuel spent in liters: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個浮點數\n    if (scanf("%f", &y) != 1) {\n        fprintf(stderr, "Error: Invalid input for total fuel spent.\\n");\n        return 1;\n    }\n\n    // 計算並打印平均油耗\n    printf("Average consumption (km/lt) %.3f ", x / y);\n    printf("\\n");\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `int x;` 和 `float y;`：宣告一個整數變數 `x` 和一個浮點數變數 `y`，用於分別存儲總里程和總耗油量。\n\n4. `printf("Input total distance in km: ");`：提示用戶輸入總里程。\n\n5. `if (scanf("%d", &x) != 1) {...}`：使用 `scanf` 函式讀取用戶輸入的整數值，存儲在 `x` 中。檢查 `scanf` 的返回值，確保成功讀取一個數字，否則輸出錯誤信息並返回1。\n\n6. 類似地，提示用戶輸入總耗油量，並讀取輸入值到變數 `y` 中。\n\n7. `printf("Average consumption (km/lt) %.3f ", x / y);`：計算並輸出平均油耗，使用公式 `x / y`。`%.3f` 用於限制浮點數的小數點後顯示的位數為三位。\n\n8. `printf("\\n");`：輸出換行符，使結果更易讀。\n\n9. `return 0;`：主函式正常結束，返回值為0。 \n \n 2 \n #include <stdio.h>\n\nint main() {\n    float x, y, z, P; // 宣告變數，用於存儲三角形的邊長和周長\n\n    // 提示用戶輸入三個邊長並存入 \'x\', \'y\', 和 \'z\'\n    printf("\\nInput the first number: ");\n    if (scanf("%f", &x) != 1) {\n        fprintf(stderr, "Error: Invalid input for the first number.\\n");\n        return 1;\n    }\n\n    printf("\\nInput the second number: ");\n    if (scanf("%f", &y) != 1) {\n        fprintf(stderr, "Error: Invalid input for the second number.\\n");\n        return 1;\n    }\n\n    printf("\\nInput the third number: ");\n    if (scanf("%f", &z) != 1) {\n        fprintf(stderr, "Error: Invalid input for the third number.\\n");\n        return 1;\n    }\n\n    if (x < (y + z) && y < (x + z) && z < (y + x)) // 檢查是否可以構成三角形\n    {\n        P = x + y + z; // 計算周長\n        printf("\\nPerimeter  = %.1f\\n", P); // 輸出周長\n    } else {\n        printf("Not possible to create a triangle..!"); // 如果無法構成三角形，輸出相應的信息\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `float x, y, z, P;`：宣告四個浮點數變數，`x`、`y` 和 `z` 用於存儲三角形的三個邊長，`P` 用於存儲三角形的周長。\n\n4. 提示用戶輸入第一個數字，並使用 `scanf` 函式讀取輸入值，存儲在變數 `x` 中。檢查 `scanf` 的返回值，確保成功讀取一個浮點數。\n\n5. 類似地，提示用戶輸入第二個和第三個數字，分別存儲在變數 `y` 和 `z` 中。\n\n6. `if (x < (y + z) && y < (x + z) && z < (y + x))`：檢查三個數是否構成一個三角形。這是三角形存在的條件，即每個邊的長度都小於其他兩個邊的長度之和。\n\n7. 如果條件滿足，則計算三角形的周長 `P`，並使用 `printf` 函式輸出周長。\n\n8. 如果條件不滿足，則輸出相應的信息表示無法構成三角形。\n\n9. `return 0;`：主函式正常結束，返回值為0。 \n \n 3 \n #include <stdio.h>\n\nint main() {\n    int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和\n\n    // 提示用戶輸入五個數字並存入數組\n    for (j = 0; j < 5; j++) {\n        printf("\\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));\n        if (scanf("%d", &numbers[j]) != 1) {\n            fprintf(stderr, "Error: Invalid input for the %s number.\\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));\n            return 1;\n        }\n    }\n\n    for (j = 0; j < 5; j++) {\n        if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數\n        {\n            total += numbers[j]; // 將奇數添加到總和中\n        }\n    }\n\n    printf("\\nSum of all odd values: %d", total); // 輸出所有奇數的總和\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n\n2. `int main()`：定義主函式，返回一個整數。\n\n3. `int j, numbers[5], total = 0;`：宣告一個整數 `j`，一個大小為5的整數數組 `numbers`，和一個用於總和的整數變數 `total`。\n\n4. 使用 `for` 迴圈提示用戶輸入五個數字，並將它們存入 `numbers` 數組。迴圈中的 `printf` 語句根據循環變數 `j` 的值，動態生成提示信息，例如 "first"、"second" 等。同時，使用 `scanf` 函式檢查輸入的有效性。\n\n5. 使用第二個 `for` 迴圈遍歷 `numbers` 數組，檢查每個數字是否為奇數。\n\n6. 如果某個數字是奇數，將其加到 `total` 變數中。\n\n7. `printf("\\nSum of all odd values: %d", total);`：輸出所有奇數的總和。\n\n8. `return 0;`：主函式正常結束，返回值為0。 \n \n 4 \n #include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nint divide_two(int dividend_num, int divisor_num) {\n    int sign = (float)dividend_num / divisor_num > 0 ? 1 : -1;\n    unsigned int dvd = dividend_num > 0 ? dividend_num : -dividend_num;\n    unsigned int dvs = divisor_num > 0 ? divisor_num : -divisor_num;\n    unsigned int bit_num[33];\n    unsigned int i = 0;\n    long long d = dvs;\n\n    bit_num[i] = d;\n    while (d <= dvd) {\n        bit_num[++i] = d = d << 1;\n    }\n    i--;\n\n    unsigned int result = 0;\n    while (dvd >= dvs) {\n        if (dvd >= bit_num[i]) {\n            dvd -= bit_num[i];\n            result += (1 << i);\n        } else {\n            i--;\n        }\n    }\n\n    if (result > INT_MAX && sign > 0) {\n        return INT_MAX;\n    }\n    return (int)result * sign;\n}\n\nint main(void) {\n    int dividend_num = 15;\n    int divisor_num = 3;\n    printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n2. `#include <stdlib.h>`：包含標準庫的 `stdlib.h` 標頭文件，這裡主要用於 `malloc` 和 `free` 函式。\n3. `#include <limits.h>`：包含整數型別的限制信息，例如 `INT_MAX`。\n4. `int divide_two(int dividend_num, int divisor_num)`：定義了一個自定義函式 `divide_two`，該函式接受兩個整數參數 `dividend_num` 和 `divisor_num`，並返回一個整數。\n5. `int sign = (float)dividend_num / divisor_num > 0 ? 1 : -1;`：確定商的正負號。如果 `(float)dividend_num / divisor_num` 大於 0，則 `sign` 為1，否則為-1。\n6. `unsigned int dvd = dividend_num > 0 ? dividend_num : -dividend_num;` 和 `unsigned int dvs = divisor_num > 0 ? divisor_num : -divisor_num;`：將被除數和除數轉換為無符號整數，以確保它們的絕對值在之後的操作中不會出現問題。\n7. `unsigned int bit_num[33];`：定義一個大小為33的無符號整數數組，用於存儲除數的倍增值。\n8. `unsigned int i = 0;`：初始化循環變數 `i`。\n9. `long long d = dvs;`：將 `dvs` 複製到 `d`，並使用 `long long` 類型，以防止在位元左移時溢出。\n10. `bit_num[i] = d;`：將 `d` 存儲在 `bit_num` 數組的第一個位置。\n11. `while (d <= dvd)`：當 `d` 小於或等於被除數時，執行以下操作。\n    - `bit_num[++i] = d = d << 1;`：將 `d` 左移一位，同時將結果存儲在 `bit_num` 數組的下一個位置。這樣就完成了除數的倍增。\n12. `i--;`：將 `i` 減1，回到最後一個有效位置。\n\n13. `unsigned int result = 0;`：初始化 `result` 變數，用於存儲商的結果。\n\n14. `while (dvd >= dvs)`：當被除數大於等於除數時，執行以下操作。\n    - `if (dvd >= bit_num[i])`：如果被除數大於等於 `bit_num[i]`，則執行以下操作。\n        - `dvd -= bit_num[i];`：從被除數中減去 `bit_num[i]`。\n        - `result += (1 << i);`：將 `result` 加上 `2^i`，即將對應位置的二進制位設置為1。\n    - `else`：如果被除數小於 `bit_num[i]`，則執行以下操作。\n        - `i--;`：將 `i` 減1，繼續檢查下一個位置。\n\n15. `if (result > INT_MAX && sign > 0)`：如果商的結果大於整數型別的最大值 `INT_MAX`，並且 `sign` 為正，則執行以下操作。\n    - `return INT_MAX \n \n 5 \n #include <stdio.h>\n\n// inline function to check if a given integer is even\ninline int is_even(int n) {\n    return n % 2 == 0;\n}\n\nint main() {\n    int num;\n\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &num) != 1) {\n        fprintf(stderr, "Error: Invalid input. Please enter a valid integer.\\n");\n        return 1;\n    }\n\n    if (is_even(num)) {\n        printf("%d is even.\\n", num);\n    } else {\n        printf("%d is odd.\\n", num);\n    }\n\n    return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n\n2. `inline int is_even(int n)`：定義了一個內聯函式 `is_even`，該函式接受一個整數參數 `n`，並返回一個整數。內聯函式的目的是在編譯時將函式體插入到每次調用該函式的地方，以提高效率。這個函式的實現檢查 `n` 是否為偶數，如果是，返回1（true），否則返回0（false）。\n\n3. `int main()`：定義了程序的主函式。\n\n4. `int num;`：聲明一個整數變數 `num`，用於存儲用戶輸入的數字。\n\n5. `if (scanf("%d", &num) != 1)`：使用 `scanf` 函式檢查是否成功讀取一個整數，如果不成功，輸出錯誤信息並返回1。\n\n6. `if (is_even(num))`：調用 `is_even` 函式檢查輸入的數字是否為偶數。\n\n    - 如果返回值為真（1），則執行 `printf("%d is even.\\n", num);`，輸出數字是偶數的信息。\n    \n    - 如果返回值為假（0），則執行 `printf("%d is odd.\\n", num);`，輸出數字是奇數的信息。\n\n7. `return 0;`：返回0，表示程序正常結束。 \n \n 6 \n #include <stdio.h>\n\n\ninline float celsius_To_Fahrenheit(float celsius) {\n  return (celsius * 9 / 5) + 32;\n}\ninline float fahrenheit_To_Celsius(float fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nint main() {\n  float celsius = 40;\n  float fahrenheit = 89.60;\n  printf("%.2f Celsius is equal to %.2f Fahrenheit\\n", celsius, celsius_To_Fahrenheit(celsius));\n  printf("\\n%.2f Fahrenheit is equal to %.2f Celsius\\n", fahrenheit,\n    fahrenheit_To_Celsius(fahrenheit));\n  return 0;\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n\n2. `inline float celsius_To_Fahrenheit(float celsius)`：定義了一個內聯函式 `celsius_To_Fahrenheit`，該函式接受一個浮點數參數 `celsius`，並返回一個浮點數。這個函式的目的是將攝氏溫度轉換為華氏溫度，根據轉換公式 `(celsius * 9 / 5) + 32` 進行計算。\n\n3. `inline float fahrenheit_To_Celsius(float fahrenheit)`：定義了一個內聯函式 `fahrenheit_To_Celsius`，該函式接受一個浮點數參數 `fahrenheit`，並返回一個浮點數。這個函式的目的是將華氏溫度轉換為攝氏溫度，根據轉換公式 `(fahrenheit - 32) * 5 / 9` 進行計算。\n\n4. `int main()`：定義了程序的主函式。\n\n5. `float celsius = 40;`：聲明並初始化一個浮點數變數 `celsius`，其值為40，表示攝氏溫度。\n\n6. `float fahrenheit = 89.60;`：聲明並初始化一個浮點數變數 `fahrenheit`，其值為89.60，表示華氏溫度。\n\n7. `printf("%.2f Celsius is equal to %.2f Fahrenheit\\n", celsius, celsius_To_Fahrenheit(celsius));`：使用 `printf` 函式輸出轉換後的攝氏溫度對應的華氏溫度。`%.2f` 用於控制浮點數輸出的小數點位數。\n\n8. `printf("\\n%.2f Fahrenheit is equal to %.2f Celsius\\n", fahrenheit, fahrenheit_To_Celsius(fahrenheit));`：使用 `printf` 函式輸出轉換後的華氏溫度對應的攝氏溫度。同樣，`%.2f` 用於控制浮點數輸出的小數點位數。\n\n9. `return 0;`：返回0，表示程序正常結束。 \n \n 7 \n #include <stdio.h>\n\nint main() {\n    int a, b;\n\n    // Prompt user for input\n    printf("Input two pairs values (integer values):\\n");\n\n    // Read two integer values from user and store them in \'a\' and \'b\'\n    if (scanf("%d %d", &a, &b) != 2) {\n        fprintf(stderr, "Error: Invalid input. Please enter two integer values.\\n");\n        return 1;  // Return an error code for invalid input\n    }\n\n    // Check if \'a\' is not equal to \'b\'\n    if (a != b) {\n        // Check if \'b\' is greater than \'a\'\n        if (b > a) {\n            printf("Ascending order\\n");  // Print message for ascending order\n        } else {\n            printf("Descending order\\n");  // Print message for descending order\n        }\n    }\n\n    return 0;  // End of program\n} \n 解釋： \n 1. `#include <stdio.h>`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。\n\n2. `int main()`：定義了程序的主函式。\n\n3. `int a, b;`：聲明了兩個整數變數 `a` 和 `b`，用於存儲用戶輸入的整數值。\n\n4. `printf("Input two pairs values (integer values):\\n");`：使用 `printf` 函式向用戶提示輸入兩對整數值。\n\n5. `if (scanf("%d %d", &a, &b) != 2) { ... }`：使用 `scanf` 函式從用戶獲取兩個整數值，並將它們存儲在變數 `a` 和 `b` 中。檢查 `scanf` 的返回值，確保成功讀取兩個整數值。如果讀取失敗，輸出錯誤消息並返回錯誤碼。\n\n6. `if (a != b) { ... }`：檢查讀取的兩個整數是否相等。如果它們不相等，執行下面的代碼塊。\n\n7. `if (b > a) { ... } else { ... }`：這是一個嵌套的條件語句。如果 `b` 大於 `a`，則執行第一個代碼塊，否則執行第二個代碼塊。\n\n8. `printf("Ascending order\\n");`：如果 `b` 大於 `a`，則輸出 "Ascending order"，表示輸入的兩個數字是升序排列的。\n\n9. `printf("Descending order\\n");`：如果 `b` 不大於 `a`，則輸出 "Descending order"，表示輸入的兩個數字是降序排列的。\n\n10. `return 0;`：正常結束程序，返回0，表示沒有錯誤發生。 \n \n 8 \n #include <stdio.h>\n\nint main(void) {\n    unsigned char char1, char2, char3, char4, char5, char6, char7, char8;\n\n    // Print table header\n    printf("|---------------------------------------------------------------------------------------------------------|\\n");\n    printf("|extended ASCII table - excluding control characters                                                      |\\n");\n    printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\\n");\n    printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\\n");\n\n    // Loop through characters\n    for (int i = 0; i < 32; i++) {\n        // Calculate characters for different ranges\n        char1 = i;\n        char2 = i + 32;\n        char3 = i + 64;\n        char4 = i + 96;\n        char5 = i + 128;  // extended ASCII characters\n        char6 = i + 160;\n        char7 = i + 192;\n        char8 = i + 224;\n\n        // Print characters and their decimal and hexadecimal representations\n        printf("|  %c %3d %#x ", char2, char2, char2);\n        printf("|  %c %3d %#x ", char3, char3, char3);\n\n        // Special case for DEL character\n        if (char4 == 127) {\n            printf("|%s %3d %#x |", "DEL", char4, char4);\n        } else {\n            printf("|  %c %3d %#x |", char4, char4, char4);\n        }\n\n        // Print extended ASCII characters for the current system.\n        printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\\n",\n               char5, char5, char5,\n               char6, char6, char6,\n               char7, char7, char7,\n               char8, char8, char8);\n    }\n\n    return 0;  // Indicate successful execution of the program\n} \n 解釋： \n 1. `unsigned char char1, char2, char3, char4, char5, char6, char7, char8;`：聲明了八個無符號字符變數，用於存儲ASCII字符。\n\n2. `printf("|---------------------------------------------------------------------------------------------------------|\\n");`：打印表格的分隔線。\n\n3. `printf("|extended ASCII table - excluding control characters                                                      |\\n");`：打印表格的標題。\n\n4. `printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\\n");`：打印表格的列標題。\n\n5. `printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\\n");`：打印表格的分隔線。\n\n6. `for (int i = 0; i < 32; i++) { ... }`：這是一個for循環，用於遍歷ASCII字符。\n\n7. `char1 = i; char2 = i + 32; char3 = i + 64; char4 = i + 96; char5 = i + 128; char6 = i + 160; char7 = i + 192; char8 = i + 224;`：這些語句用於計算不同範圍的字符，以便填充表格。\n\n8. `printf("|  %c %3d %#x ", char2, char2, char2);`：打印表格中的ASCII字符、十進制和十六進制表示。\n\n9. `if (char4 == 127) { printf("|%s %3d %#x |", "DEL", char4, char4); } else { printf("|  %c %3d %#x |", char4, char4, char4); }`：這是一個條件語句，用於處理ASCII碼127（DEL字符）的特殊情況。\n\n10. `printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\\n", char5, char5, char5, char6, char6, char6, char7, char7, char7, char8, char8, char8);`：打印擴展的ASCII字符和其十進制和十六進制表示。\n\n11. `return 0;`：指示程序成功運行結束。 \n \n 9 \n #include <stdio.h>\n\nint main() {\n    int x; // Declare variable x\n\n    // Print header for the table\n    printf("x+1\\tx+3\\tx+5\\tx+7\\n\\n");\n    printf("---------------------------\\n");\n\n    // Loop to generate and print table values\n    for (x = 1; x <= 15; x += 3)\n        printf("%d\\t%d\\t%d\\t%d\\n", x, (x + 2), (x + 4), (x + 6));\n\n    return 0; // Indicate successful program execution\n} \n 解釋： \n 1. `int x;`：聲明了一個整數變數 `x`，用於迴圈中的計算。\n\n2. `printf("x+1\\tx+3\\tx+5\\tx+7\\n\\n");`：打印表格的標題，列出表格中每一列的標籤。\n\n3. `printf("---------------------------\\n");`：打印表格的分隔線。\n\n4. `for (x = 1; x <= 15; x += 3)`：這是一個for迴圈，從 `x` 的初始值1開始，每次迭代增加3，直到 `x` 的值大於15。\n\n5. `printf("%d\\t%d\\t%d\\t%d\\n", x, (x + 2), (x + 4), (x + 6));`：在每次迭代中，打印表格的一行，該行包含 `x` 及其後三個數的計算結果。\n\n6. `return 0;`：指示程序成功運行結束。 \n \n 10 \n #include <stdio.h>\n\nint main() {\n    // 声明变量\n    float principal_amt, rate_of_interest, days, interest;\n    const int yearInDays = 365; // 用于转换利率的常量\n\n    // 提示用户输入贷款金额\n    printf("输入贷款金额 (输入 0 退出): ");\n    if (scanf("%f", &principal_amt) != 1) {\n        fprintf(stderr, "Error: Invalid input for loan amount.\\n");\n        return 1;\n    }\n\n    // 主循环用于处理贷款\n    while ((int)principal_amt != 0) \n    {\n        // 提示用户输入利率\n        printf("输入利率: ");\n        if (scanf("%f", &rate_of_interest) != 1) {\n            fprintf(stderr, "Error: Invalid input for interest rate.\\n");\n            return 1;\n        }\n\n        // 提示用户输入贷款期限（天）\n        printf("输入贷款期限（天）: ");\n        if (scanf("%f", &days) != 1) {\n            fprintf(stderr, "Error: Invalid input for loan term.\\n");\n            return 1;\n        }\n\n        // 计算利息\n        interest = (principal_amt * rate_of_interest * days) / yearInDays;\n\n        // 显示利息金额\n        printf("利息金额为 $%.2f\\n", interest);\n\n        // 提示用户输入下一个贷款金额\n        printf("\\n\\n输入贷款金额 (输入 0 退出): ");\n        if (scanf("%f", &principal_amt) != 1) {\n            fprintf(stderr, "Error: Invalid input for loan amount.\\n");\n            return 1;\n        }\n    }\n\n    return 0;\n} \n 解釋： \n 1. `float principal_amt, rate_of_interest, days, interest;`：聲明了四個浮點變數，分別表示貸款金額、利率、貸款期限（以天為單位）和計算的利息。\n\n2. `const int yearInDays = 365;`：定義了一個常量 `yearInDays`，表示一年的天數，用於將利率轉換為每日利率。\n\n3. `printf("输入贷款金额 (输入 0 退出): ");`：提示用戶輸入貸款金額，並要求用戶輸入0以退出程序。\n\n4. `if (scanf("%f", &principal_amt) != 1) { ... }`：使用 `scanf` 函數從用戶輸入中讀取一個浮點數，並將其存儲在 `principal_amt` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。\n\n5. `while ((int)principal_amt != 0)`：這是一個while循環，當 `principal_amt` 不等於0時，循環將繼續運行。這允許用戶輸入多個貸款金額。\n\n6. `printf("输入利率: ");`：提示用戶輸入利率。\n\n7. `if (scanf("%f", &rate_of_interest) != 1) { ... }`：從用戶輸入中讀取利率，並將其存儲在 `rate_of_interest` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。\n\n8. `printf("输入贷款期限（天）: ");`：提示用戶輸入貸款期限。\n\n9. `if (scanf("%f", &days) != 1) { ... }`：從用戶輸入中讀取貸款期限，並將其存儲在 `days` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。\n\n10. `interest = (principal_amt * rate_of_interest * days) / yearInDays;`：使用公式計算利息，將其存儲在 `interest` 中。\n\n11. `printf("利息金额为 $%.2f\\n", interest);`：顯示計算得到的利息金額。\n\n12. `printf("\\n\\n输入贷款金额 (输入 0 退出): ");`：提示用戶輸入下一個貸款金額。\n\n13. `if (scanf("%f", &principal_amt) != 1) { ... }`：從用戶輸入中讀取下一個貸款金額。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。\n\n14. `return 0;`：程序運行成功，返回0。 \n', 'tags': '', 'url': 'ANSIC_T.html'}, {'title': '期末總結', 'text': '上完課程後我覺得我個人分數60分。每周的上課進度和作業，我會的就盡量做不懂的就去請教會的同組同學，雖然這樣也導致同組同學花更多時間在教我，但比起甚麼都不會放棄來的好。我對於這類的課程相對來說非常不熟悉，就算是在高職有上過C++的課程聽了之後還是不解，所以在這門課我已經是想盡方法去完成作業跟進度，還請老師高抬貴手別當我感謝。 \n A: 是否按照進度明確標示倉儲的改版歷程。是，有照進度標示。 \n B: 是否根據\xa0IPv4 與 IPv6\xa0網路環境設定進行作法討論。是，有錄製影片。 \n \n \n C: 是否就\xa0Replit、s.cycu.org 與 localhost\xa0情境下對個人與分組倉儲進行設定操作。 \n \n \n D: 是否完成 上課內容 中的 Exercises?是，但第九周的課程內容不大了解 \n E: 是否完成\xa0 w2-w5 \xa0 週任務中的 Exercises。是，成品放在個人網址上了。 \n F: 是否完成\xa0 w6-w7 \xa0 週任務中的練習一與練習二。是，成品放在個人網址上了。 \n G: 是否完成 C 結合 gd 繪圖程式庫, 畫出\xa0 PROC ( 規格 ), \xa0 United Kingdom ( 規格 ), \xa0 Japan ( 規格 ) 。是，成品放在個人網址上了。 \n H: 是否完成 w16 Final Project。是，但不知道是否正確完成。 \n \n \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};