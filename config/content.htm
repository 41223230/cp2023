<h1>First</h1>
<p><br/><br/>About</p>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>w1</h1>
<p>心得：學期開學第一周，一開始對於這門課內容不知道要上甚麼，但是經過老師介紹了replit和githb之後，了解了他們的用途以及之後課程使用，這讓我對這門課印象深刻。</p>
<h1>w2~w3</h1>
<p>心得：在這兩周過程中，我們創建了replit和github帳號，也將這兩個app成功的連結。接下來是創建自己的倉儲，過程當中發生系統間的權限上的問題也成功排除。接下來還有講解網路設定，過程也有說到系上整個的網路是怎麼作業，以及上課時的設定</p>
<p></p>
<p>網路設定</p>
<p><video controls="controls" height="150" width="300">
<source src="/images/w2-w3.mp4" type="video/mp4"/></video></p>
<h1>w4~w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>解釋 ：</p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">這是一個使用C語言編寫的程式，它使用了標準的stdio.h標頭文件，並包含了一個主函式main。

1. `#include &lt;stdio.h&gt;`：這行指令包含了標準輸入/輸出函式庫，這是C語言中用於處理輸入和輸出的函式庫。

2. `int main()`：這是C程式的進入點，所有的執行都從這裡開始。它返回一個整數值，通常是0，表示程式執行成功。

3. `FILE *gnuplotPipe = popen("gnuplot -persistent", "w");`：這行程式碼使用popen函式啟動一個Gnuplot進程，並返回一個文件指標（FILE *gnuplotPipe），該指標用於向Gnuplot進程寫入命令。這個Gnuplot進程使用-persistent選項，表示它將保持打開，而不是在每次繪圖後自動關閉。

4. `if (!gnuplotPipe) { fprintf(stderr, "Failed to start Gnuplot.\n"); return 1; }`：這是一個錯誤檢查，確保成功啟動了Gnuplot進程。如果popen失敗，則向標準錯誤流（stderr）輸出錯誤消息，並返回1表示程式執行失敗。

5. `fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");`：這行程式碼向Gnuplot進程發送命令，設置輸出的圖形格式為PNG，指定字體為默認字體，大小為800x400。

6. `fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");`：這行程式碼指定輸出圖形的文件路徑和名稱。

7. `fprintf(gnuplotPipe, "plot sin(x)");`：這行程式碼發送Gnuplot繪圖命令，這裡是繪製sin(x)函數。

8. `pclose(gnuplotPipe);`：這行程式碼關閉與Gnuplot進程的連接，確保在結束時清理相關資源。

9. `return 0;`：主函式執行成功，返回0表示程式執行成功。</pre>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<p>心得：進入了第四、五周，除了建立了自己的考試帳號，也將自己的網站加設上了密碼，還有在replit中設定g<span>nuplot環境設定，來完成課堂上的作業。</span></p>
<p><span><video controls="controls" height="150" width="300">
<source src="/images/w5.mp4" type="video/mp4"/></video></span></p>
<h1>w6</h1>
<p>台灣國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
    // red rectangle area
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // blue rectangle area
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖
    draw_white_sun(img, center_x, center_y, sun_radius, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    float angle = 0;
    int fromX, fromY;
    int toX, toY;
    for (int i=0; i&lt;24; i++){
        angle += 5*M_PI*2/12;
        //printf("%.3f", angle);
        toX = center_x + cos(angle)*sun_radius;
        toY = center_y + sin(angle)*sun_radius;
        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖
        if (i!=0){
            gdImageLine(img, fromX, fromY, toX, toY, color);
        }
        fromX = toX;
        fromY = toY;
   }
}
</pre>
<p><img alt="" height="250" src="/images/roc_flag.png" width="374"/></p>
<p></p>
<p></p>
<p>美國國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.0616 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p><img alt="" height="250" src="/images/usa_flag.png" width="473"/></p>
<p>台灣正式國旗</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p><img alt="" height="267" src="/images/roc_flag_in_gd.png" width="400"/></p>
<h1>w7</h1>
<p>日本國旗</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;gdfonts.h&gt;

void drawJapaneseFlag() {
    int flagWidth = 300;
    int flagHeight = 200;

    gdImagePtr img;
    FILE *pngout; // Corrected the FILE pointer declaration

    img = gdImageCreateTrueColor(flagWidth, flagHeight);

    // 設置白色背景
    int white = gdImageColorAllocate(img, 255, 255, 255);
    gdImageFill(img, 0, 0, white);

    // 設置紅色
    int red = gdImageColorAllocate(img, 255, 0, 0);

    // 繪製紅色圓圈
    int circleRadius = 50;
    int circleCenterX = flagWidth / 2;
    int circleCenterY = flagHeight / 2;

    gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red); // Corrected the ellipse dimensions

    // 輸出 PNG 文件
    pngout = fopen("japanese_flag.png", "wb");
    gdImagePng(img, pngout);

    // 釋放內存
    gdImageDestroy(img);
    fclose(pngout);
}

int main() {
    drawJapaneseFlag();
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。

2. `#include &lt;gd.h&gt;`：包含gd函式庫，這是一個用於圖形繪製的函式庫。

3. `#include &lt;gdfonts.h&gt;`：包含gd函式庫中的字型定義。

4. `void drawJapaneseFlag()`：定義了一個名為`drawJapaneseFlag`的函式，用於繪製日本國旗。

5. `int flagWidth = 300;` 和 `int flagHeight = 200;`：定義了國旗的寬度和高度。

6. `gdImagePtr img;`：聲明了一個指向gdImage的指標，這將用於創建和處理圖像。

7. `FILE *pngout;`：聲明了一個指向文件的指標，用於將最終的PNG圖像寫入文件。

8. `img = gdImageCreateTrueColor(flagWidth, flagHeight);`：使用`gdImageCreateTrueColor`函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。

9. `int white = gdImageColorAllocate(img, 255, 255, 255);`：為白色分配一個顏色索引。

10. `gdImageFill(img, 0, 0, white);`：使用`gdImageFill`函式將整個圖像填充為白色。

11. `int red = gdImageColorAllocate(img, 255, 0, 0);`：為紅色分配一個顏色索引。

12. `int circleRadius = 50;`、`int circleCenterX = flagWidth / 2;` 和 `int circleCenterY = flagHeight / 2;`：定義了圓圈的半徑和中心座標。

13. `gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red);`：使用`gdImageFilledEllipse`函式在圖像上畫一個填充紅色的橢圓（圓圈）。

14. `pngout = fopen("japanese_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。

15. `gdImagePng(img, pngout);`：使用`gdImagePng`函式將圖像寫入已打開的文件。

16. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。

17. `fclose(pngout);`：關閉文件。

18. `int main()`：主函式。

19. `drawJapaneseFlag();`：調用`drawJapaneseFlag`函式，生成並保存日本國旗圖像。

20. `return 0;`：主函式執行成功，返回0表示程式執行成功。

</pre>
<p><img alt="" height="267" src="/images/japanese_flag.png" width="400"/></p>
<p>中國五星旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Function declarations
void draw_chinese_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
// Flag dimensions
int width = 300; // Flag width
int height = 200; // Flag height

// Create a true-color image
gdImagePtr im = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(im, 0);

// Draw the Chinese flag on the image
draw_chinese_flag(im);

// Output the image to a PNG file
FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}

gdImagePngEx(im, outputFile, 9);
fclose(outputFile);
gdImageDestroy(im);

return 0;
}

// Function to draw the Chinese flag
void draw_chinese_flag(gdImagePtr img) {
// Get the dimensions of the image
int width = gdImageSX(img);
int height = gdImageSY(img);

// Colors for the flag
int red = gdImageColorAllocate(img, 255, 0, 0); // Red background
int yellow = gdImageColorAllocate(img, 255, 255, 0); // Yellow stars

// Draw the red background
gdImageFilledRectangle(img, 0, 0, width, height, red);

// Set the size and position of the large star
int star_size = (int)(0.28 * height);
int star_x = (int)(0.165 * width);
int star_y = (int)(0.265 * height);

// Draw the large star
draw_star(img, star_x, star_y, star_size, yellow, 11.0);

// Draw small stars based on the actual flag proportions
double radius = 0.15 * height;
double angle = 360 / 7 * M_PI / 179.0;
double rotation = -M_PI / 7.5;
int cx = (int)(0.32 * width);
int cy = (int)(0.27 * height);

// Draw four small stars
for (int i = -1; i &lt; 3; i++) {
int x = (int)(cx + radius * cos(i * angle + rotation));
int y = (int)(cy + radius * sin(i * angle + rotation));
draw_star(img, x, y, 19, yellow, M_PI / 5.0);
}
}

// Function to draw a star
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];

// Calculate the outer and inner points of the star
double outer_radius = size / 2;
double inner_radius = size / 6;
double angle = M_PI / 5.0;

for (int i = 0; i &lt; 10; i++) {
double radius = (i % 2 == 0) ? outer_radius : inner_radius;
double theta = rotation_angle + i * angle;
points[i].x = x + radius * cos(theta);
points[i].y = y + radius * sin(theta);
}

// Use gdImageFilledPolygon to draw the star
gdImageFilledPolygon(img, points, 10, color);
} </pre>
<p>解釋：</p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。

2. `#include &lt;gd.h&gt;`：包含gd函式庫，這是一個用於圖形繪製的函式庫。

3. `#include &lt;math.h&gt;`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。

4. `void draw_chinese_flag(gdImagePtr img);` 和 `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);`：函式的聲明。

5. `int main()`：主函式開始。

6. `int width = 300;` 和 `int height = 200;`：定義國旗的寬度和高度。

7. `gdImagePtr im = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。

8. `gdImageAlphaBlending(im, 0);`：設置圖像的Alpha混合模式為關閉。

9. `draw_chinese_flag(im);`：調用`draw_chinese_flag`函式，將中國國旗繪製在圖像上。

10. `FILE *outputFile = fopen("./../images/proc_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。

11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。

12. `gdImagePngEx(im, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。

13. `fclose(outputFile);`：關閉文件。

14. `gdImageDestroy(im);`：釋放由gd函式庫分配的圖像內存。

15. `return 0;`：主函式執行成功，返回0表示程式執行成功。

16. `void draw_chinese_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中國國旗。

17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。

18. `int red = gdImageColorAllocate(img, 255, 0, 0);` 和 `int yellow = gdImageColorAllocate(img, 255, 255, 0);`：為紅色和黃色分配顏色索引。

19. `gdImageFilledRectangle(img, 0, 0, width, height, red);`：使用gdImageFilledRectangle函式繪製紅色背景。

20. `int star_size = (int)(0.28 * height);`、`int star_x = (int)(0.165 * width);` 和 `int star_y = (int)(0.265 * height);`：設置大星星的大小和位置。

21. `draw_star(img, star_x, star_y, star_size, yellow, 11.0);`：調用`draw_star`函式繪製大星星。

22. `double radius = 0.15 * height;`、`double angle = 360 / 7 * M_PI / 179.0;`、`double rotation = -M_PI / 7.5;`、`int cx = (int)(0.32 * width);` 和 `int cy = (int)(0.27 * height);`：設置小星星的半徑、角度、旋轉和位置。

23. `for (int i = -1; i &lt; 3; i++) { int x = (int)(cx + radius * cos(i * angle + rotation)); int y = (int)(cy + radius * sin(i * angle + rotation)); draw_star(img, x, y, 19, yellow, M_PI / 5.0); }`：使用循環繪製四顆小星星。

24. `void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle)`：定義了一個函式，用於在圖像上繪製星星。

25. `gdPoint points[10];`：定義了一個gdPoint數組，用於存儲星

星的頂點座標。

26. `double outer_radius = size / 2;`、`double inner_radius = size / 6;` 和 `double angle = M_PI / 5.0;`：計算星星的外半徑、內半徑和角度。

27. `for (int i = 0; i &lt; 10; i++) { double radius = (i % 2 == 0) ? outer_radius : inner_radius; double theta = rotation_angle + i * angle; points[i].x = x + radius * cos(theta); points[i].y = y + radius * sin(theta); }`：計算星星的頂點座標，並存儲在gdPoint數組中。

28. `gdImageFilledPolygon(img, points, 10, color);`：使用gdImageFilledPolygon函式根據頂點座標繪製填充星星。</pre>
<p><br/><br/></p>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<p>英國國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
// 設置國旗寬和高
int width = 1200;
int height = width / 2;

// 創建圖像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 繪製英國國旗
draw_uk_flag(img);

// 將圖像保存到文件
FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时发生错误。\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}



void draw_uk_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

int red, white, blue;
red = gdImageColorAllocate(img, 204, 0, 0); // 红色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 153); // 藍色

gdImageFilledRectangle(img, 0, 0, width, height, blue);


int x1, y1, x2, y2, x3, y3;
{
int line_thickness = 100;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 繪製白色斜線
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, white);

x1 = 0;
y1 = 0;
x2 = 1200;
y2 = 600;
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);


// 繪製紅色斜線
x1 = 566;
y1 = 300;
x2 = 1166;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 1233;
y1 = 600;
x2 = 633;
y2 = 300;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 566;
y1 = 300;
x2 = -33;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 600;
y1 = 316.5;
x2 = 0;
y2 = 616.5;
gdImageLine(img, x1, y1, x2, y2, red);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 繪製 斜線
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red );


x1 = 1200;
y1 = 16.5;
x2 = 600;
y2 = 316.5;
gdImageLine(img, x1, y1, x2, y2, white);


x1 = 0;
y1 = 583.5;
x2 = 600;
y2 = 283.5;
gdImageLine(img, x1, y1, x2, y2, white);


}

// 繪製白色十字
int cross_width = width / 32;
int cross_arm_width = width / 32;
int center_x = width / 2;
int center_y = height / 2;

gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

// 繪製紅色十字
gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。

2. `#include &lt;gd.h&gt;`：包含gd函式庫，這是一個用於圖形繪製的函式庫。

3. `#include &lt;math.h&gt;`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。

4. `void draw_uk_flag(gdImagePtr img);` 和 `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);`：函式的聲明。

5. `int main()`：主函式開始。

6. `int width = 1200;` 和 `int height = width / 2;`：定義國旗的寬度和高度。

7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。

8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。

9. `draw_uk_flag(img);`：調用`draw_uk_flag`函式，將英國國旗繪製在圖像上。

10. `FILE *outputFile = fopen("./../images/uk_flag.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。

11. `if (outputFile == NULL) { fprintf(stderr, "打开输出文件时发生错误。\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。

12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。

13. `fclose(outputFile);`：關閉文件。

14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。

15. `return 0;`：主函式執行成功，返回0表示程式執行成功。

16. `void draw_uk_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製英國國旗。

17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。

18. `int red, white, blue; red = gdImageColorAllocate(img, 204, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 153);`：為紅色、白色和藍色分配顏色索引。

19. `gdImageFilledRectangle(img, 0, 0, width, height, blue);`：使用gdImageFilledRectangle函式繪製藍色背景。

20. `int cross_width = width / 32;`、`int cross_arm_width = width / 32;`、`int center_x = width / 2;` 和 `int center_y = height / 2;`：計算十字的寬度、臂寬度和中心座標。

21. `gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);` 和 `gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);`：使用gdImageFilledRectangle函式繪製白色十字。

22. `gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);` 和 `gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);`：使用gdImageFilledRectangle函式繪製紅色十字。

23. `int line_thickness = 100;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。

24. `int x1, y

1, x2, y2, x3, y3;`：定義三角形的頂點座標。

25. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第一條線段。

26. `x1 = 0; y1 = 0; x2 = 1200; y2 = 600;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第二條線段。

27. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。

28. `x1 = 566; y1 = 300; x2 = 1166; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第一條線段。

29. `x1 = 1233; y1 = 600; x2 = 633; y2 = 300;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第二條線段。

30. `x1 = 566; y1 = 300; x2 = -33; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第三條線段。

31. `x1 = 600; y1 = 316.5; x2 = 0; y2 = 616.5;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第四條線段。

32. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。

33. `int x1, y1, x2, y2, x3, y3;`：重新定義三角形的頂點座標。

34. `x1 = 0; y1 = 600; x2 = 1200; y2 = 0;` 和 `gdImageLine(img, x1, y1, x2, y2, red);`：繪製紅色斜線的第五條線段。

35. `x1 = 1200; y1 = 16.5; x2 = 600; y2 = 316.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第六條線段。

36. `x1 = 0; y1 = 583.5; x2 = 600; y2 = 283.5;` 和 `gdImageLine(img, x1, y1, x2, y2, white);`：繪製白色斜線的第七條線段。

37. `int line_thickness = 33;` 和 `gdImageSetThickness(img, line_thickness);`：設置線條的厚度。

38. `void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color)`：定義了一個填充三角形的函式。

39. `gdPoint points[3];`：定義了一個gdPoint數組，用於存儲三角形的頂點座標。

40. `points[0].x = x1; points[0].y = y1;`、`points[1].x = x2; points[1].y = y2;` 和 `points[2].x = x3; points[2].y = y3;`：將頂點座標存儲在gdPoint數組中。

41. `gdImageFilledPolygon(img, points, 3, color);`：使用gdImageFilledPolygon函式填充三角形。</pre>
<p></p>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<p></p>
<p></p><h1>w8~9</h1>
<p>這兩周講解使用近端來編輯倉儲，內容大多繁雜，就算記住了操作的流程，<span>我完全不知道背後的意思是甚麼，</span>再加上近端編輯只能在學校使用，原因是網路設定上需要使用學校的固定ip，這樣大大限制了能使用的地點。這兩周上下來，只有感受到一大票內容是快速帶過，連想都來不及想就進入了下一階段，這樣是真的學不好。</p>
<h1>w10~11</h1>
<p>這兩周在講解我們使用replit、s1511、localhost，哪一種方式讓自己方便，在多方嘗試下來，我還是覺得我對於使用replit上更加熟悉，首先它本身在設計上就以為主方便，但唯一美中不足的點是他在使用時需要網路，且聽說明年會進行更改到時要維護倉儲只能選擇更加麻煩的<span>s1511和localhost來使用。兩周下來感覺我們之前所學的只是冰山一角的東西，replit對我來說可能有些東西也是不熟，但是現在又多了s1511和localhost，讓我自己感覺到自己的學識淺薄，不管是一些專業術語的英文還是整組的程式，也是大多都看不懂，整個上下來是真的好難心態疲勞。</span></p>
<p></p>
<h1>w12</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE* outputFile = fopen("hellogd.png", "wb");  // Corrected FILE* declaration
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);

    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);

    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);

    // 橢圓形畫線
    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);

    // 畫直線
    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width / 4;
    points[0].y = (int)height * 3 / 4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width / 3;
    points2[0].y = (int)height / 2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p></p>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p></p>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>w15</h1>
<p>課堂考試第一題</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);

int main() {
int width = 1200;
int height = (int)(width * 2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
int center_x = (int)(width / 4);
int center_y = (int)(height / 4);
int sun_radius = (int)(width / 8);
int white_circle_dia = sun_radius;
int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;

red = gdImageColorAllocate(img, 255, 0, 0);
white = gdImageColorAllocate(img, 255, 255, 255);
blue = gdImageColorAllocate(img, 0, 0, 149);

gdImageFilledRectangle(img, 0, 0, width, height, red);
gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);

// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

// 不含太陽的部分

// 連接第二組ABED的白線
int ax = 429;
int ay = 125;
int bx = 279;
int by = 165;
int ex = 170;
int ey = 274;
int dx = 170;
int dy = 274;

gdImageLine(img, ax, ay, bx, by, white);
gdImageLine(img, bx, by, ex, ey, white);
gdImageLine(img, ex, ey, dx, dy, white);
gdImageLine(img, dx, dy, ax, ay, white);
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出函式庫，提供對標準I/O功能的訪問。

2. `#include &lt;gd.h&gt;`：包含gd函式庫，這是一個用於圖形繪製的函式庫。

3. `#include &lt;math.h&gt;`：包含數學函式庫，這裡主要使用了M_PI，代表圓周率π。

4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`：函式的聲明。

5. `int main()`：主函式開始。

6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`：定義國旗的寬度和高度，根據指定的長寬比例計算。

7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`：使用gdImageCreateTrueColor函式創建了一個真彩色的gdImage對象，代表了指定寬度和高度的圖像。

8. `gdImageAlphaBlending(img, 0);`：設置圖像的Alpha混合模式為關閉。

9. `draw_roc_flag(img);`：調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。

10. `FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");`：打開一個二進制寫入文件，用於保存最終的PNG圖像。

11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\n"); return 1; }`：錯誤檢查，確保成功打開文件，否則輸出錯誤消息並結束程式。

12. `gdImagePngEx(img, outputFile, 9);`：使用gdImagePngEx函式將圖像寫入已打開的文件，並指定壓縮級別為9。

13. `fclose(outputFile);`：關閉文件。

14. `gdImageDestroy(img);`：釋放由gd函式庫分配的圖像內存。

15. `return 0;`：主函式執行成功，返回0表示程式執行成功。

16. `void draw_roc_flag(gdImagePtr img)`：定義了一個函式，用於在圖像上繪製中華民國國旗。

17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`：獲取圖像的寬度和高度。

18. `int red, white, blue;`：定義紅色、白色和藍色的顏色索引。

19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`：計算中心點的座標，使得白日位於青天面積正中央。

20. `int sun_radius = (int)(width/8);`、`int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`：計算中央白日圓形、中央藍色圓形的半徑或直徑。

21. `red = gdImageColorAllocate(img, 255, 0, 0);`、`white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`：為紅色、白色和藍色分配顏色索引。

22. `gdImageFilledRectangle(img, 0, 0, width, height, red);` 和 `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`：分別使用gdImageFilledRectangle函式填充紅色和藍色的區</pre>
<p></p>
<p><img alt="" height="267" src="/images/roc_list.png" width="400"/></p>
<p>上課第二堂求四個焦點</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width/4);
int center_y = (int)(height/4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width/8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
{int x1 = 429;
int y1 = 125;
int x2 = 279;
int y2 = 165;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
{int x1 = 170;
int y1 = 274;
int x2 = 279;
int y2 = 165;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int x1 = 170;
int y1 = 274;
int x2 = 429;
int y2 = 125;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);


// 定義座標結構
typedef struct {
double x;
double y;
} Point;

// 計算圓與線的交點
void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {
// 直線斜率
double m = (y2 - y1) / (x2 - x1);

// 直線方程式中的常數項
double b = y1 - m * x1;

// 圓與直線交點的計算
double A = 1 + pow(m, 2);
double B = 2 * (m * b - m * k - h);
double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);

// 判斷交點個數
double discriminant = pow(B, 2) - 4 * A * C;
if (discriminant &gt; 0) {
double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);
double y_intersect1 = m * x_intersect1 + b;
printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1);

double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);
double y_intersect2 = m * x_intersect2 + b;
printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2);
} else if (discriminant == 0) {
double x_intersect = -B / (2 * A);
double y_intersect = m * x_intersect + b;
printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect);
} else {
printf("No points.\n");
}

}


// 圓的參數
double circle_x = (int)(width/4); // 圓心 x 座標
double circle_y = (int)(height/4); // 圓心 y 座標
double radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑

// 兩點座標



double x3 = 170;
double y3 = 274;
double x4 = 279;
double y4 = 165;

circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);


double x5 = 279;
double y5 = 165;
double x6 = 429;
double y6 = 125;

circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);

}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`: 引入標準輸入/輸出函式庫。
2. `#include &lt;gd.h&gt;`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。
3. `#include &lt;math.h&gt;`: 引入math函式庫，這裡主要使用了數學計算相關的函式。

4. `void draw_roc_flag(gdImagePtr img);` 和 `void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);`: 函式聲明。

5. `int main() {`: 主函式開始。

6. `int width = 1200;` 和 `int height = (int)(width*2.0 / 3.0);`: 設置國旗的寬度和高度，符合3:2的寬高比。

7. `gdImagePtr img = gdImageCreateTrueColor(width, height);`: 創建一個指定寬度和高度的真彩色圖像。

8. `gdImageAlphaBlending(img, 0);`: 設置圖像的Alpha混合模式為關閉。

9. `draw_roc_flag(img);`: 調用`draw_roc_flag`函式，將中華民國國旗繪製在圖像上。

10. `FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");`: 打開一個二進制寫入文件，用於保存最終的PNG圖像。

11. `if (outputFile == NULL) { fprintf(stderr, "Error opening the output file.\n"); return 1; }`: 檢查文件是否成功打開，否則輸出錯誤消息並結束程式。

12. `gdImagePngEx(img, outputFile, 9);`: 使用gdImagePngEx函式將圖像寫入已打開的文件，指定壓縮級別為9。

13. `fclose(outputFile);`: 關閉文件。

14. `gdImageDestroy(img);`: 釋放由gd函式庫分配的圖像內存。

15. `return 0;`: 主函式執行成功，返回0表示程式執行成功。

16. `void draw_roc_flag(gdImagePtr img) {`: 定義了一個函式，用於在圖像上繪製中華民國國旗。

17. `int width = gdImageSX(img);` 和 `int height = gdImageSY(img);`: 獲取圖像的寬度和高度。

18. `int red, white, blue;`: 定義紅色、白色和藍色的顏色索引。

19. `int center_x = (int)(width/4);` 和 `int center_y = (int)(height/4);`: 計算中心點的座標，使白日位於青天面積正中央。

20. `int sun_radius = (int)(width/8);`: 計算中央白日圓形的半徑。

21. `int white_circle_dia = sun_radius;` 和 `int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;`: 計算中央白日圓形直徑和中央藍色圓形半徑。

22. `red = gdImageColorAllocate(img, 255, 0, 0);`, `white = gdImageColorAllocate(img, 255, 255, 255);` 和 `blue = gdImageColorAllocate(img, 0, 0, 149);`: 為紅色、白色和藍色分配顏色索引。

23. `gdImageFilledRectangle(img, 0, 0, width, height, red);`: 用紅色填充整個圖像。

24. `gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);`: 用藍色填充圖像的左上角區域，即青天。

25. `{int x1 = 429; int y1 = 125; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製一條連接兩點的白色線。

26. `{int x1 = 170; int y1 = 274; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white); }`: 繪製第二條連</pre>
<p></p>
<p><img alt="" height="123" src="/images/Desktop Screenshot 2023.12.28 - 08.23.22.44.png" width="400"/></p>
<h1>W16</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;

// Function to draw the mass-spring-damper system
void draw_system(const char* filename) {
    int width = 600;
    int height = 300;
    int x_margin = 50;
    int y_margin = 50;
    int mass_radius = 20;
    int spring_width = 4;
    int damper_width = 4;

    gdImagePtr img = gdImageCreate(width, height);
    int background_color = gdImageColorAllocate(img, 255, 255, 255);
    int mass_color = gdImageColorAllocate(img, 0, 0, 0);
    int spring_color = gdImageColorAllocate(img, 0, 0, 0);
    int damper_color = gdImageColorAllocate(img, 0, 0, 0);
    int wall_color = gdImageColorAllocate(img, 0, 0, 0);

    // Draw left wall
    gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);

    // Draw mass 1
    int x1 = x_margin + 2 * mass_radius;
    int y1 = height / 2;
    gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);

    // Draw spring 1
    int spring1_start_x = x_margin;
    int spring1_end_x = x1 - mass_radius;
    int spring1_y = y1;
    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);
    gdImageSetThickness(img, spring_width);
    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);
    gdImageSetThickness(img, 1);

    // Draw damper 1
    int damper1_start_x = x_margin / 2;
    int damper1_end_x = x1 - mass_radius;
    int damper1_y = y1;
    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);
    gdImageSetThickness(img, damper_width);
    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);
    gdImageSetThickness(img, 1);

    // Draw mass 2
    int x2 = width - x_margin - 2 * mass_radius;
    int y2 = height / 2;
    gdImageFilledEllipse(img, x2, y2, mass_radius, mass_radius, mass_color);

    // Draw spring 2
    int spring2_start_x = x2 + mass_radius;
    int spring2_end_x = width - x_margin;
    int spring2_y = y2;
    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);
    gdImageSetThickness(img, spring_width);
    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);
    gdImageSetThickness(img, 1);

    // Draw damper 2
    int damper2_start_x = width - x_margin + mass_radius;
    int damper2_end_x = x2 + mass_radius;
    int damper2_y = y2;
    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);
    gdImageSetThickness(img, damper_width);
    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);
    gdImageSetThickness(img, 1);

    // Draw right wall
    gdImageLine(img, width - x_margin, y_margin, width - x_margin, height - y_margin, wall_color);

    // Save the image to a file
    FILE *output_file = fopen(filename, "wb");
    gdImagePng(img, output_file);
    fclose(output_file);

    // Free the memory used by the image
    gdImageDestroy(img);
}

int main() {
    draw_system("mass_spring_damper_system.png");
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`: 引入標準輸入/輸出函式庫。

2. `#include &lt;gd.h&gt;`: 引入gd函式庫，這是一個用於處理圖形數據的函式庫。

3. `void draw_system(const char* filename) {`: 定義了一個名為`draw_system`的函式，用於繪製質點-彈簧-減震器系統。

4. `int width = 600;`, `int height = 300;`: 定義圖像的寬度和高度。

5. `int x_margin = 50;`, `int y_margin = 50;`: 定義圖像邊緣的水平和垂直邊距。

6. `int mass_radius = 20;`, `int spring_width = 4;`, `int damper_width = 4;`: 定義質點、彈簧和減震器的相關尺寸。

7. `gdImagePtr img = gdImageCreate(width, height);`: 創建一個指定寬度和高度的圖像。

8. `int background_color = gdImageColorAllocate(img, 255, 255, 255);`, `int mass_color = gdImageColorAllocate(img, 0, 0, 0);`, `int spring_color = gdImageColorAllocate(img, 0, 0, 0);`, `int damper_color = gdImageColorAllocate(img, 0, 0, 0);`, `int wall_color = gdImageColorAllocate(img, 0, 0, 0);`: 分別為背景、質點、彈簧、減震器和牆分配顏色。

9. `gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);`: 畫左牆，從圖像的左邊緣到底部。

10. `int x1 = x_margin + 2 * mass_radius;`, `int y1 = height / 2;`: 設置質點1的座標。

11. `gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);`: 在圖像上畫一個填充的橢圓，代表質點1。

12. `int spring1_start_x = x_margin;`, `int spring1_end_x = x1 - mass_radius;`, `int spring1_y = y1;`: 設置彈簧1的起點、終點和y座標。

13. `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`: 畫彈簧1。

14. `gdImageSetThickness(img, spring_width);`, `gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);`, `gdImageSetThickness(img, 1);`: 設置彈簧1的寬度，畫彈簧，然後將寬度恢復為1。

15. `int damper1_start_x = x_margin / 2;`, `int damper1_end_x = x1 - mass_radius;`, `int damper1_y = y1;`: 設置減震器1的起點、終點和y座標。

16. `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`: 畫減震器1。

17. `gdImageSetThickness(img, damper_width);`, `gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);`, `gdImageSetThickness(img, 1);`: 設置減震器1的寬度，畫減震器，然後將寬度恢復為1。

18. 類似地，繪製了質點2、彈簧2和減震器2的元素，坐標分別為`x2`、`y2`、`spring2_start_x`、`spring2_end_x`</pre>
<p><br/><img alt="" height="150" src="/images/mass_spring_damper_system.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
// System parameters
#define M1 2.0
#define M2 3.0
#define K1 0.5
#define K2 1.0
#define K3 15.0
#define C1 0.25
#define C2 0.33
#define C3 0.5
 
// Function to calculate the derivative of the state
void calculate_derivative(double t, double state[4], double derivative[4]) {
    derivative[0] = state[2];  // dx1/dt = v1
    derivative[1] = state[3];  // dx2/dt = v2
 
    double delta_x = state[0] - state[1];
 
    // dv1/dt
    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;
 
    // dv2/dt
    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;
}
 
// Euler's Method for solving the system
void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {
    FILE *output_file;
    output_file = fopen("trajectory_data.txt", "w");
 
    double t = t_initial;
    double state[4];
    for (int i = 0; i &lt; 4; ++i) {
        state[i] = initial_conditions[i];
    }
 
    while (t &lt;= t_final) {
        fprintf(output_file, "%f %f %f %f %f\n", t, state[0], state[1], state[2], state[3]);
 
        double derivative[4];
        calculate_derivative(t, state, derivative);
 
        for (int i = 0; i &lt; 4; ++i) {
            state[i] += derivative[i] * dt;
        }
 
        t += dt;
    }
 
    fclose(output_file);
}
 
int main() {
    // Define the initial conditions
    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2
 
    // Time parameters
    double t_initial = 0.0;
    double t_final = 10.0;
    double dt = 0.01;
 
    // Solve the system using Euler's Method
    euler_method(t_initial, t_final, dt, initial_conditions);
 
    return 0;
}
</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`: 引入標準輸入/輸出函式庫。

2. `#define M1 2.0`, `#define M2 3.0`, `#define K1 0.5`, `#define K2 1.0`, `#define K3 15.0`, `#define C1 0.25`, `#define C2 0.33`, `#define C3 0.5`: 定義了系統的一些參數，包括質量（M1、M2）、彈簧常數（K1、K2、K3）和阻尼常數（C1、C2、C3）。

3. `void calculate_derivative(double t, double state[4], double derivative[4]) {`: 定義了一個函式`calculate_derivative`，用於計算狀態的導數。該函式接受時間`t`、當前狀態`state`和計算得到的導數`derivative`。

4. `derivative[0] = state[2];`, `derivative[1] = state[3];`: 賦值給導數，其中`derivative[0]`和`derivative[1]`分別等於速度`v1`和`v2`。

5. `double delta_x = state[0] - state[1];`: 計算兩質點之間的位移。

6. `derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;`: 計算質點1速度`v1`的導數。

7. `derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;`: 計算質點2速度`v2`的導數。

8. `void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {`: 定義了一個使用歐拉法求解系統的函式`euler_method`。它接受初始時間、最終時間、時間步長和初始條件。

9. `FILE *output_file;`, `output_file = fopen("trajectory_data.txt", "w");`: 定義了一個文件指針`output_file`，並打開了一個名為"trajectory_data.txt"的文件，用於存儲計算的軌跡數據。

10. `double t = t_initial;`, `double state[4];`: 初始化時間`t`和狀態`state`。

11. `for (int i = 0; i &lt; 4; ++i) { state[i] = initial_conditions[i]; }`: 將初始條件複製到狀態中。

12. `while (t &lt;= t_final) {`: 進入時間迴圈，計算直到達到最終時間。

13. `fprintf(output_file, "%f %f %f %f %f\n", t, state[0], state[1], state[2], state[3]);`: 將當前時間和狀態寫入文件。

14. `calculate_derivative(t, state, derivative);`: 計算當前時間的導數。

15. `for (int i = 0; i &lt; 4; ++i) { state[i] += derivative[i] * dt; }`: 使用歐拉法更新狀態。

16. `t += dt;`: 更新時間。

17. `fclose(output_file);`: 關閉文件。

18. `int main() {`: 定義`main`函式。

19. `double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};`: 定義初始條件，包括兩個質點的初始位置和速度。

20. `double t_initial = 0.0;`, `double t_final = 10.0;`, `double dt = 0.01;`: 定義時間參數，包括初始時間、最終時間和時間步長。

21. `euler_method(t_initial, t_final, dt, initial_conditions);`: 調用`euler_method`函式求解系統。

22. `return 0;`: 返回0，表示程序運行成功。</pre>
<p><br/><br/></p>
<p><img alt="" height="225" src="/images/trajectory_plot.png" width="301"/><br/><br/></p>
<p></p><h1>C_EX</h1>
<p>1</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;

/* 输出 a, b, c 到屏幕 */
printf("a = %3.1f, b = %3.1f, c = %d\n", a, b, c);

return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這一行包含了標準的輸入/輸出庫，允許你使用 `printf` 等函數。

2. `int main()`：這一行宣告了主函數，它是任何 C 程式的進入點。

3. `{`：開始主函數的主體的大括號。

4. `float a = 0.5;`：宣告一個 `float` 型別的變數 `a`，並初始化為 `0.5`。

5. `double b = 1.2;`：宣告一個 `double` 型別（雙精度浮點數）的變數 `b`，並初始化為 `1.2`。

6. `int c = 3;`：宣告一個 `int` 型別（整數）的變數 `c`，並初始化為 `3`。

7. `b = b + a + c;`：通過將當前的 `b` 值、`a` 和 `c` 相加，更新了 `b` 的值。這相當於 `b = 1.2 + 0.5 + 3`。

8. `printf("a = %3.1f, b = %3.1f, c = %d\n", a, b, c);`：使用 `printf` 函數將 `a`、`b` 和 `c` 的值輸出到螢幕。格式指定符 `%3.1f` 用於以 3 個字符的總寬度打印浮點數（`a` 和 `b`）並在小數點後打印一位。`%d` 用於打印整數值（`c`）。`\n` 代表換行字符，將光標移到下一行。

9. `return 0;`：表示程序已成功執行，並將 0 返回給操作系統。

10. `}`：結束主函數主體的大括號。

總之，這個程式宣告和初始化了三個變數（`a`、`b` 和 `c`），執行了一個計算以更新 `b` 的值，然後將 `a`、`b` 和 `c` 的值打印到螢幕上，最後返回 0 給操作系統。</pre>
<p><img alt="" height="65" src="/images/1.png" width="304"/></p>
<p>2</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   字元範例 1
   ==================== */
#include &lt;stdio.h&gt;

int main()
{
    char x, y;

    x = 'a';
    y = (char)97;

    /* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
    printf("x = %c, y = %c, ASCII of y = %d", x, y, y);

    return 0;
}
</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `/* ====================`：這是多行註釋的開始，標明了註釋區塊的起始。

2. `字元範例 1`：這是註釋，提供了與程式碼相關的說明或標題。

3. `==================== */`：多行註釋的結束。

4. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，它允許使用 `printf` 和其他輸出功能。

5. `int main()`：主函式的開始，它是每個 C 程式的進入點。

6. `{`：主函式的主體開始。

7. `char x, y;`：宣告兩個 `char` 型別的變數 `x` 和 `y`，這些變數將用於存儲字元。

8. `x = 'a';`：將字元 `'a'` 賦值給變數 `x`。

9. `y = (char)97;`：將 ASCII 值 `97` 轉換為 `char` 型別，然後將其賦值給變數 `y`。

10. `/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */`：這是一條註釋，描述了接下來的 `printf` 語句的目的。

11. `printf("x = %c, y = %c, ASCII of y = %d", x, y, y);`：使用 `printf` 函式將 `x`、`y` 和 `y` 的 ASCII 值輸出到螢幕上。`%c` 用於打印字符，`%d` 用於打印整數。

12. `return 0;`：表示程序已成功執行，返回 0 給操作系統。

13. `}`：主函式的主體結束。

總的來說，這個程式碼演示了如何宣告、賦值和輸出字符型變數 `x` 和 `y`，以及如何使用 ASCII 值。</pre>
<p><img alt="" height="47" src="/images/2.png" width="397"/></p>
<p>3</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 64;
    int b = 0x40; // 以十六进制表示
    long c = 64L;

    // 打印变量的值
    printf("%d, %d, %ld", a, b, c);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，它允許使用 `printf` 和其他輸出功能。

2. `int main()`：主函式的開始，它是每個 C 程式的進入點。

3. `{`：主函式的主體開始。

4. `int a = 64;`：宣告一個整數變數 `a` 並初始化為 64。

5. `int b = 0x40;`：宣告一個整數變數 `b` 並初始化為 0x40，這表示以十六進制表示法給變數 `b` 賦值。在這種情況下，`0x40` 的十進制等於 64。

6. `long c = 64L;`：宣告一個長整數變數 `c` 並初始化為 64L。這裡使用 `L` 後綴表示這是一個長整數。

7. `// 打印变量的值`：這是一條單行註釋，描述了接下來 `printf` 語句的目的。

8. `printf("%d, %d, %ld", a, b, c);`：使用 `printf` 函式將變數 `a`（按十進制顯示）、`b`（按十進制顯示）、`c`（按長整數顯示）的值輸出到螢幕上。格式字符串 `%d` 表示將整數以十進制形式輸出，`%ld` 表示將長整數以十進制形式輸出。

9. `return 0;`：表示程序已成功執行，返回 0 給操作系統。

10. `}`：主函式的主體結束。

總的來說，這個程式碼演示了如何宣告、初始化和輸出整數變數，同時展示了不同進制表示法（十進制和十六進制）。</pre>
<p><img alt="" height="53" src="/images/3.png" width="274"/></p>
<p>4</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 10, b = 5;

    // 第一组比较
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    printf("\n");

    // 修改 b 的值
    b = 10;

    // 第二组比较
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，允許使用 `printf` 函式。

2. `int main()`：主函式的開始，它是每個 C 程式的進入點。

3. `{`：主函式的主體開始。

4. `int a = 10, b = 5;`：宣告並初始化兩個整數變數 `a` 和 `b` 分別為 10 和 5。

5. `// 第一组比较`：這是一條單行註釋，說明接下來的程式碼將執行第一組比較。

6. `printf("a == b is %d\n", a == b);`：使用 `printf` 函式輸出 `a == b` 的結果。 `%d` 是一個格式化占位符，用來輸出整數。在這裡，它將被 `a == b` 的值取代。

7. 類似地，後續的 `printf` 語句用於輸出其他比較運算的結果，包括 `a &gt; b`、`a &lt; b`、`a &gt;= b`、`a &lt;= b`、`a != b`。

8. `printf("\n");`：輸出一個換行符號，使輸出更易讀。

9. `b = 10;`：修改變數 `b` 的值為 10。

10. `// 第二组比较`：這是一條單行註釋，說明接下來的程式碼將執行第二組比較。

11. 後續的 `printf` 語句再次執行第二組比較，這次使用修改後的 `b` 值。

12. `return 0;`：表示程序已成功執行，返回 0 給操作系統。

13. `}`：主函式的主體結束。

總的來說，這個程式碼演示了使用比較運算符（==、&gt;、&lt;、&gt;=、&lt;=、!=）進行變數之間的比較，並輸出結果。</pre>
<p><br/><img alt="" height="235" src="/images/4.png" width="239"/></p>
<p>5</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
int a;

// 第一次输出
a = 3;
printf("%d\n", !a); // 逻辑非运算，a为真，所以输出0

// 第二次输出
a = 0;
printf("%d\n", !a); // 逻辑非运算，a为假，所以输出1
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。

2. `void main()`：主函式的開始。應注意，標準中 `main` 函式的返回類型應該是 `int`，而不是 `void`。正確的主函式應該是 `int main()`，而不是 `void main()`。

3. `{`：主函式的主體開始。

4. `int a;`：宣告一個整數變數 `a`。

5. `// 第一次输出`：這是一條單行註釋，用於標識接下來的程式碼將執行第一次輸出。

6. `a = 3;`：將變數 `a` 的值設置為 3。

7. `printf("%d\n", !a);`：使用 `printf` 函式，輸出 `!a` 的結果。`!` 是逻辑非運算符，將 `a` 的值取反。由於 `a` 是非零值（真），`!a` 為假（0）。因此，這裡輸出 `0`，接著換行。

8. `// 第二次输出`：這是一條單行註釋，用於標識接下來的程式碼將執行第二次輸出。

9. `a = 0;`：將變數 `a` 的值設置為 0。

10. `printf("%d\n", !a);`：再次使用 `printf` 函式，輸出 `!a` 的結果。由於 `a` 是零值（假），`!a` 為真（1）。因此，這裡輸出 `1`，接著換行。

11. `}`：主函式的主體結束。

總的來說，這個程式碼演示了逻辑非運算符（`!`）的使用，它將非零值取反為零，並將零值取反為非零。</pre>
<p><img alt="" height="63" src="/images/5.png" width="277"/></p>
<p>6</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    char a;

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of int is %zu\n", sizeof(int));

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of char a is %zu\n", sizeof(a));
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    char a;

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of int is %zu\n", sizeof(int));

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of char a is %zu\n", sizeof(a));
}</pre>
<p><img alt="" height="66" src="/images/6.png" width="261"/></p>
<p>7</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
计算长方形面积, 需传入长与宽.
==================== */
int rect(int x, int y)
{
    int result;
    result = x * y;
    return result; /* 返回 result */
}

/* ====================
主函数
==================== */
int main()
{
    int x = 8, y = 4;
    int a;
    a = rect(x, y);
    printf("8*4 的面积是 %d", a);
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。

2. `int rect(int x, int y)`：這是一個函式的宣告，該函式名稱為 `rect`，接受兩個整數參數 `x` 和 `y`。函式的目的是計算長方形的面積。

3. `{`：函式 `rect` 的主體開始。

4. `int result;`：宣告一個整數變數 `result`，用於存儲計算的結果。

5. `result = x * y;`：將 `result` 的值設置為 `x` 與 `y` 的乘積，即計算長方形的面積。

6. `return result;`：返回計算的結果。

7. `}`：函式 `rect` 的主體結束。

8. `int main()`：主函式的宣告。這是程式的起點。

9. `{`：主函式的主體開始。

10. `int x = 8, y = 4;`：宣告兩個整數變數 `x` 和 `y`，並將它們的值分別初始化為 8 和 4。

11. `int a;`：宣告一個整數變數 `a`，用於存儲呼叫 `rect` 函式後的結果。

12. `a = rect(x, y);`：呼叫 `rect` 函式，將 `x` 和 `y` 的值作為參數傳遞給它，然後將計算結果存儲在變數 `a` 中。

13. `printf("8*4 的面积是 %d", a);`：使用 `printf` 函式將計算結果輸出到控制台，顯示 `8*4 的面积是` 並輸出變數 `a` 的值。

14. `return 0;`：主函式返回 0，這表示程序成功結束。

15. `}`：主函式的主體結束。

總的來說，這個程式碼計算並輸出一個長方形的面積，長和寬分別為 8 和 4。</pre>
<p><img alt="" height="52" src="/images/7.png" width="316"/></p>
<p>8</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
float circle( int r ); /* 宣告 circle 的 prototype */
void main()
{
float answer;
answer = circle(8);
printf( " 圓周長度是 %f", answer );
}
/* ====================
 circle 函數, 計算 circle 的圓周長
==================== */
float circle( int r )
{
float result;
result = 3.14159 * (double)1001 * r;
return ( result );
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。

2. `float circle(int r);`：這是 `circle` 函式的原型宣告。它告訴編譯器有一個名為 `circle` 的函式，接受一個整數參數 `r`，並返回一個浮點數。

3. `void main()`：主函式的宣告。注意，正確的返回型別應該是 `int`，而不是 `void`，因為 `main` 函式應該返回一個整數值。

4. `{`：主函式的主體開始。

5. `float answer;`：宣告一個浮點數變數 `answer`，用於存儲 `circle` 函式的計算結果。

6. `answer = circle(8);`：呼叫 `circle` 函式，將整數值 8 作為參數傳遞給它，然後將計算結果存儲在 `answer` 中。

7. `printf(" 圓周長度是 %f", answer);`：使用 `printf` 函式將計算結果輸出到控制台，顯示 " 圓周長度是 " 並輸出 `answer` 的值。

8. `}`：主函式的主體結束。

9. `float circle(int r)`：`circle` 函式的定義開始。這個函式接受一個整數參數 `r`，返回一個浮點數。

10. `{`：`circle` 函式的主體開始。

11. `float result;`：宣告一個浮點數變數 `result`，用於存儲計算的結果。

12. `result = 3.14159 * (double)1001 * r;`：計算圓的周長。這裡有一個奇怪的地方，似乎將 `(double)1001` 乘以 `r`。這可能是一個錯誤，因為它看起來並不符合計算圓周長的公式。

13. `return result;`：返回計算的結果。

14. `}`：`circle` 函式的主體結束。

總的來說，這個程式碼存在一些問題。特別是在計算圓周長的部分，乘以 `(double)1001` 的目的似乎並不明確，可能是一個錯誤。
</pre>
<p><img alt="" height="51" src="/images/8.png" width="386"/></p>
<p>9</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    char ch;

    printf("输入一个字符：");

    // 检查 scanf 的返回值，确保成功读取一个字符
    if (scanf(" %c", &amp;ch) != 1) {
        printf("读取字符失败\n");
        return 1; // 或者采取其他错误处理措施
    }

    if (ch == 'a') {
        printf("您按下了 'a'\n");
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。

2. `int main()`：主函式的宣告，程式的執行從這裡開始。

3. `{`：主函式的主體開始。

4. `char ch;`：宣告一個 `char` 類型的變數 `ch`，用於存儲從用戶輸入讀取的字符。

5. `printf("输入一个字符：");`：使用 `printf` 函式輸出提示信息，要求用戶輸入一個字符。

6. `if (scanf(" %c", &amp;ch) != 1)`：使用 `scanf` 函式讀取用戶輸入的字符。`%c` 是格式化輸入指示符，用於讀取字符。注意 `%c` 前的空格，它的作用是吸收任何前面的空白字符（包括換行符、空格等），以防止之前的輸入影響。`!= 1` 用於檢查 `scanf` 的返回值，確保成功讀取了一個字符。

7. `{`：如果 `if` 條件成立，進入這個區塊。

8. `printf("读取字符失败\n");`：在控制台上輸出一條錯誤信息，表示讀取字符失敗。

9. `return 1;`：返回一個非零值，表示程序異常結束。這是一種處理錯誤的方式，通常在發現錯誤時提前終止程序。

10. `}`：結束 `if` 區塊。

11. `if (ch == 'a')`：檢查讀取的字符是否等於小寫字母 'a'。

12. `{`：如果 `if` 條件成立，進入這個區塊。

13. `printf("您按下了 'a'\n");`：在控制台上輸出一條消息，表示用戶按下了 'a'。

14. `}`：結束 `if` 區塊。

15. `return 0;`：返回零，表示程序正常結束。

16. `}`：主函式的主體結束。

總的來說，這個程式提示用戶輸入一個字符，然後檢查是否為小寫字母 'a'，如果是，則輸出相應的消息。程式碼中有錯誤處理機制，當讀取字符失敗時，會輸出錯誤消息並提前終止程序。</pre>
<p><img alt="" height="62" src="/images/9.png" width="272"/></p>
<p>10</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    int i;

    // 提示用户输入一个整数
    printf("100：");

    // 读取用户输入的整数
    scanf("%d", &amp;i);

    // 判断输入的整数，并输出相应的消息
    if (i &lt; 100)
    {
        printf("i &lt; 100\n");
    }
    else
    {
        if ((i &gt;= 100) &amp;&amp; (i &lt; 200))
        {
            printf("i &gt;= 100 且 i &lt; 200\n");
        }
        else
        {
            printf("i &gt;= 200\n");
        }
    }
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。

2. `void main()`：主函式的宣告，注意應使用 `int main()` 而不是 `void main()`。修正方式將 `void` 改為 `int`。

3. `{`：主函式的主體開始。

4. `int i;`：宣告一個整數變數 `i`，用於存儲用戶輸入的數字。

5. `printf("100：");`：使用 `printf` 函式輸出提示信息，提示用戶輸入一個整數。

6. `scanf("%d", &amp;i);`：使用 `scanf` 函式讀取用戶輸入的整數。`%d` 是格式化輸入指示符，用於讀取整數。

7. `if (i &lt; 100)`：判斷 `i` 是否小於 100。

8. `{`：如果 `if` 條件成立，進入這個區塊。

9. `printf("i &lt; 100\n");`：在控制台上輸出一條消息，表示 `i` 小於 100。

10. `}`：結束 `if` 區塊。

11. `else`：如果 `if` 條件不成立，進入 `else` 區塊。

12. `{`：`else` 區塊的開始。

13. `if ((i &gt;= 100) &amp;&amp; (i &lt; 200))`：這是一個嵌套的 `if`，檢查 `i` 是否大於等於 100 且小於 200。

14. `{`：如果嵌套 `if` 條件成立，進入這個區塊。

15. `printf("i &gt;= 100 且 i &lt; 200\n");`：在控制台上輸出一條消息，表示 `i` 大於等於 100 且小於 200。

16. `}`：結束嵌套 `if` 區塊。

17. `else`：如果嵌套 `if` 條件不成立，進入 `else` 區塊。

18. `{`：`else` 區塊的開始。

19. `printf("i &gt;= 200\n");`：在控制台上輸出一條消息，表示 `i` 大於等於 200。

20. `}`：結束 `else` 區塊。

21. `}`：結束主函式的主體。

請注意，我們建議修正 `void main()` 為 `int main()`，這是標準的主函式形式。</pre>
<p><img caption="false" height="95" src="/images/10.png" width="430"/></p>
<p>看似有問題</p>
<p>11</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 function pointer 2
========================= */
#include &lt;stdio.h&gt;
/* ====================
say “Hello”.
==================== */
void Hello(void)
{
printf(“ Hello\n”);
}
/* ====================
say “World”.
==================== */
void World(void)
{
printf(“ World\n”);
}
/* ====================
main function.
==================== */
int main()
{
void (*func[3])(void); /* 宣告一個 function pointer array */
int i = 0 ;
func[0] = Hello; /* 建立 Jumping table */
func[1] = World;
while(1)
{
printf(“Input a number between 0 and 1 : ”);
scanf( “%d”,&amp;i );
/* 若 I 大於等於 2 或是小於 0 則離開 loop */
if( (i &gt;= 2)||(i &lt; 0) )
break;
else
func[ i ]( ); /* 執行! */
}
return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。

2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 " Hello"。

3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 " World"。

4. `int main()`：主函式的宣告。

5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。

6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。

7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。

8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。

9. `while(1)`：進入一個無窮迴圈。

10. `printf("Input a number between 0 and 1 : ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。

11. `scanf("%d", &amp;i);`：使用 `scanf` 函式讀取用戶輸入的整數並將其存儲在變數 `i` 中。

12. `if ((i &gt;= 2) || (i &lt; 0))`：檢查 `i` 是否大於等於 2 或小於 0。

13. `break;`：如果條件成立，退出無窮迴圈。

14. `else`：如果條件不成立，執行以下區塊。

15. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。

16. `return 0;`：主函式的返回值，表示程式執行成功結束。</pre>
<p><img alt="" height="273" src="/images/11.png" width="302"/><br/>12</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
say “Hello”.
==================== */
void Hello(void)
{
    printf("Hello\n");
}

/* ====================
say “World”.
==================== */
void World(void)
{
    printf("World\n");
}

/* ====================
main function.
==================== */
int main()
{
    void (*func[3])(void); /* 声明一个函数指针数组 */
    int i = 0;

    func[0] = Hello; /* 建立 Jumping table */
    func[1] = World;

    while (1)
    {
        printf("Input a number between 0 and 1: ");
        scanf("%d", &amp;i);

        /* 如果 i 大于等于 2 或小于 0 则退出循环 */
        if (i &gt;= 2 || i &lt; 0)
            break;
        else
            func[i](); /* 执行函数 */
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。

2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 "Hello"。

3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 "World"。

4. `int main()`：主函式的宣告。

5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。

6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。

7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。

8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。

9. `while (1)`：進入一個無窮迴圈。

10. `printf("Input a number between 0 and 1: ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。

11. `scanf("%d", &amp;i);`：使用 `scanf` 函式讀取用戶輸入的整數並將其存儲在變數 `i` 中。

12. `if (i &gt;= 2 || i &lt; 0)`：檢查 `i` 是否大於等於 2 或小於 0。

13. `break;`：如果條件成立，退出無窮迴圈。

14. `else`：如果條件不成立，執行以下區塊。

15. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。

16. `return 0;`：主函式的返回值，表示程式執行成功結束。</pre>
<p><img alt="" height="118" src="/images/12.png" width="484"/></p>
<p>13</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
say “Hello”.
==================== */
void Hello(void)
{
    printf("Hello\n");
}

/* ====================
say “World”.
==================== */
void World(void)
{
    printf("World\n");
}

/* ====================
main function.
==================== */
int main()
{
    void (*func[3])(void); /* 声明一个函数指针数组 */
    int i = 0;

    func[0] = Hello; /* 建立 Jumping table */
    func[1] = World;

    while (1)
    {
        printf("Input a number between 0 and 1: ");

        // 检查 scanf 的返回值，确保成功读取一个整数
        if (scanf("%d", &amp;i) != 1)
        {
            printf("无效输入，请输入一个整数。\n");
            break;
        }

        /* 如果 i 大于等于 2 或小于 0 则退出循环 */
        if (i &gt;= 2 || i &lt; 0)
            break;
        else
            func[i](); /* 执行函数 */
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 和 `scanf` 函式。

2. `void Hello(void)`：定義一個名為 `Hello` 的函式，該函式不接受任何參數，並在控制台上輸出 "Hello"。

3. `void World(void)`：定義一個名為 `World` 的函式，該函式不接受任何參數，並在控制台上輸出 "World"。

4. `int main()`：主函式的宣告。

5. `void (*func[3])(void);`：宣告一個包含三個元素的函式指針陣列 `func`。這個陣列中的每個元素都是一個指向不接受參數且返回 `void` 的函式的指針。

6. `int i = 0;`：宣告一個整數變數 `i`，並初始化為 0。

7. `func[0] = Hello;`：將陣列中的第一個元素設定為指向 `Hello` 函式的指針。

8. `func[1] = World;`：將陣列中的第二個元素設定為指向 `World` 函式的指針。

9. `while (1)`：進入一個無窮迴圈。

10. `printf("Input a number between 0 and 1: ");`：在控制台上輸出提示消息，要求用戶輸入介於 0 和 1 之間的數字。

11. `if (scanf("%d", &amp;i) != 1)`：檢查 `scanf` 函式的返回值，確保成功讀取一個整數。如果輸入不是有效整數，輸出錯誤消息，並結束迴圈。

12. `break;`：如果輸入不是有效整數，退出無窮迴圈。

13. `if (i &gt;= 2 || i &lt; 0)`：檢查 `i` 是否大於等於 2 或小於 0。

14. `break;`：如果條件成立，退出無窮迴圈。

15. `else`：如果條件不成立，執行以下區塊。

16. `func[i]();`：根據用戶輸入的數字選擇要執行的函式，由於函式指針陣列的設定，它將呼叫 `Hello` 或 `World` 函式。

17. `return 0;`：主函式的返回值，表示程式執行成功結束。</pre>
<p><img alt="" height="49" src="/images/13.png" width="401"/></p>
<p>22</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 pointer to pointer – 1.
==================== */
#include &lt;stdio.h&gt;

int main() {
    char *Hello = "Hello";
    char *World = "World";
    char *GoodBye = "Good Bye";
    char *StrArray[3];
    char **Str;
    int i;

    Str = StrArray;
    StrArray[0] = Hello;
    StrArray[1] = World;
    StrArray[2] = GoodBye;

    // Print strings using array indexing
    for (i = 0; i &lt; 3; i++) {
        printf("%s ", StrArray[i]);
    }

    // Print strings using pointer arithmetic
    Str = StrArray;  // Reset the pointer to the beginning
    for (i = 0; i &lt; 3; i++) {
        printf("%s ", *Str);
        Str++;
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，使你能夠使用 `printf` 函式。

2. `char *Hello = "Hello";`：宣告一個指向字元的指標 `Hello`，指向包含字串 "Hello" 的常數字串。

3. `char *World = "World";`：宣告一個指向字元的指標 `World`，指向包含字串 "World" 的常數字串。

4. `char *GoodBye = "Good Bye";`：宣告一個指向字元的指標 `GoodBye`，指向包含字串 "Good Bye" 的常數字串。

5. `char *StrArray[3];`：宣告一個包含三個元素的字元指標陣列 `StrArray`。

6. `char **Str;`：宣告一個指向指標的指標 `Str`。

7. `int i;`：宣告一個整數變數 `i`。

8. `Str = StrArray;`：將指標 `Str` 設定為指向陣列 `StrArray` 的第一個元素。

9. `StrArray[0] = Hello;`：將陣列 `StrArray` 的第一個元素設定為指向 "Hello" 字串的指標。

10. `StrArray[1] = World;`：將陣列 `StrArray` 的第二個元素設定為指向 "World" 字串的指標。

11. `StrArray[2] = GoodBye;`：將陣列 `StrArray` 的第三個元素設定為指向 "Good Bye" 字串的指標。

12. `for (i = 0; i &lt; 3; i++) { printf("%s ", StrArray[i]); }`：使用陣列索引逐一輸出字串 "Hello", "World", "Good Bye"。

13. `Str = StrArray;`：將指標 `Str` 重新設定為指向陣列 `StrArray` 的第一個元素。

14. `for (i = 0; i &lt; 3; i++) { printf("%s ", *Str); Str++; }`：使用指標算術逐一輸出字串 "Hello", "World", "Good Bye"，這次使用指標 `Str` 和後置遞增運算子。</pre>
<p><img alt="" height="45" src="/images/22.png" width="507"/></p>
<p>23</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
float this_is_a_number1, this_is_a_number2;
int scanf_result; // Dummy variable to capture scanf's return value

/* 读取输入的浮点数 */
scanf_result = scanf("%f", &amp;this_is_a_number1);

/* 读取输入的浮点数 */
scanf_result = scanf("%f", &amp;this_is_a_number2);

/* Your code here */

return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：這是包含標準輸入/輸出庫的指令，允許你使用 `scanf` 和其他相關的輸入/輸出函式。

2. `int main()`：這是主函式的宣告，程式的執行從這裡開始。

3. `float this_is_a_number1, this_is_a_number2;`：宣告兩個浮點數變數 `this_is_a_number1` 和 `this_is_a_number2`，這裡用來存放從用戶輸入中讀取的數字。

4. `int scanf_result;`：宣告一個整數變數 `scanf_result`，這是一個虛擬變數，用來捕獲 `scanf` 函數的返回值，確保成功讀取輸入。

5. `scanf_result = scanf("%f", &amp;this_is_a_number1);`：使用 `scanf` 函數從標準輸入讀取浮點數，格式化字符串 `%f` 表示輸入的是浮點數，`&amp;this_is_a_number1` 將輸入的值存儲到變數 `this_is_a_number1` 中。`scanf_result` 用於檢查是否成功讀取輸入。

6. `scanf_result = scanf("%f", &amp;this_is_a_number2);`：同上，讀取第二個浮點數。

7. `/* Your code here */`：這是一個占位註解，表示這裡是你自己的程式碼區塊。你可以在這裡進行任何你需要對這兩個浮點數進行的操作。

8. `return 0;`：這表示主函式正常結束，並將返回值設為0。</pre>
<p><img alt="" height="70" src="/images/23.png" width="254"/></p><h1>CEX_T</h1>
<p>1</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 struct – 3.
========================= */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

/* ====================
 struct Mouse.
==================== */
struct Mouse
{
    int xPos, yPos;
    char Name[10];
};

/* ====================
 Copy Mouse 1
==================== */
void cpyMouse1(struct Mouse *tgt, struct Mouse *src)
{
    tgt-&gt;xPos = src-&gt;xPos;
    tgt-&gt;yPos = src-&gt;yPos;
    strcpy(tgt-&gt;Name, src-&gt;Name);
}

/* ====================
 main function.
==================== */
int main()
{
    struct Mouse myMouse, yourMouse;

    yourMouse.xPos = 10;
    yourMouse.yPos = 20;
    strcpy(yourMouse.Name, "Mickey");

    cpyMouse1(&amp;myMouse, &amp;yourMouse);

    printf("Name: %s, X: %d, Y: %d\n", myMouse.Name, myMouse.xPos, myMouse.yPos);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `#include &lt;string.h&gt;`：包含字串操作相關的標頭文件，允許使用 `strcpy` 函式來複製字串。

3. `struct Mouse`：定義了一個結構體 `Mouse`，包含三個成員變數：`xPos`（代表滑鼠的X座標）、`yPos`（代表滑鼠的Y座標）、`Name`（代表滑鼠的名字，以字元陣列形式存儲）。

4. `void cpyMouse1(struct Mouse *tgt, struct Mouse *src)`：定義了一個函式 `cpyMouse1`，用於將來源滑鼠結構的數據複製到目標滑鼠結構。函式接受兩個結構體指針作為參數，即目標滑鼠結構和來源滑鼠結構。

5. `tgt-&gt;xPos = src-&gt;xPos;`：將來源滑鼠的X座標複製到目標滑鼠。

6. `tgt-&gt;yPos = src-&gt;yPos;`：將來源滑鼠的Y座標複製到目標滑鼠。

7. `strcpy(tgt-&gt;Name, src-&gt;Name);`：使用 `strcpy` 函式將來源滑鼠的名字複製到目標滑鼠。這裡假設 `Name` 是以字元陣列形式表示的名字。

8. `int main()`：主函式的開始。

9. `struct Mouse myMouse, yourMouse;`：宣告了兩個 `Mouse` 結構的變數 `myMouse` 和 `yourMouse`。

10. `yourMouse.xPos = 10;`：為 `yourMouse` 的X座標賦值為10。

11. `yourMouse.yPos = 20;`：為 `yourMouse` 的Y座標賦值為20。

12. `strcpy(yourMouse.Name, "Mickey");`：將字串 "Mickey" 複製到 `yourMouse` 的名字中。

13. `cpyMouse1(&amp;myMouse, &amp;yourMouse);`：調用函式 `cpyMouse1`，將 `yourMouse` 的內容複製到 `myMouse`。

14. `printf("Name: %s, X: %d, Y: %d\n", myMouse.Name, myMouse.xPos, myMouse.yPos);`：使用 `printf` 函式輸出 `myMouse` 結構的內容，包括名字、X座標和Y座標。

15. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="52" src="/images/ct1.png" width="243"/></p>
<p>2</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 #define 的範例 2.
========================= */
#include &lt;stdio.h&gt;

#define TRUE 1
#define FALSE 0
#define BOOL int

/* ====================
如果傳入值大於 10, 則傳回 TRUE
==================== */
BOOL is_greater_than_10(int i)
{
    if (i &gt; 10)
        return TRUE;
    else
        return FALSE;
}

/* ====================
 main function.
==================== */
int main()
{
    int i;
    BOOL result;

    printf("Input a number: ");

    // 檢查 scanf 的返回值
    if (scanf("%d", &amp;i) != 1) {
        printf("Error reading input.\n");
        return 1;  // 返回非零值表示錯誤
    }

    result = is_greater_than_10(i);

    if (result == TRUE)
        printf("Greater than 10!\n"); /* 大於 10 */
    else
        printf("Not greater than 10!\n"); /* 不大於 10 */

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `#define TRUE 1`：使用 `#define` 指令定義常數 `TRUE`，其值為1。

3. `#define FALSE 0`：使用 `#define` 指令定義常數 `FALSE`，其值為0。

4. `#define BOOL int`：使用 `#define` 指令定義 `BOOL` 為 `int`，將 `BOOL` 視為整數型別。

5. `BOOL is_greater_than_10(int i)`：定義了一個函式 `is_greater_than_10`，接受一個整數參數 `i`，返回 `BOOL` 型別（實際上是 `int`）。如果 `i` 大於10，則返回 `TRUE`，否則返回 `FALSE`。

6. `int main()`：主函式的開始。

7. `int i;`：宣告一個整數變數 `i` 來接受用戶輸入的數字。

8. `BOOL result;`：宣告一個 `BOOL`（實際上是 `int`）型別的變數 `result` 來存儲函式的返回值。

9. `printf("Input a number: ");`：使用 `printf` 函式輸出提示，要求用戶輸入一個數字。

10. `if (scanf("%d", &amp;i) != 1)`：使用 `scanf` 函式讀取用戶輸入的數字，檢查其返回值，如果不等於1，表示讀取失敗，輸出錯誤消息，並返回1（非零值表示錯誤）。

11. `result = is_greater_than_10(i);`：調用函式 `is_greater_than_10`，將用戶輸入的數字傳入，並將返回值存入 `result`。

12. `if (result == TRUE)`：檢查 `result` 是否等於 `TRUE`，如果是，表示輸入的數字大於10，輸出 "Greater than 10!"。

13. `else`：如果條件不滿足，表示輸入的數字不大於10，輸出 "Not greater than 10!"。

14. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="63" src="/images/ct2.png" width="233"/></p>
<p>3</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 &amp; operator.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int *pointer_a, a;
    pointer_a = &amp;a;
    a = 10;

    printf("%d, %d\n", a, *pointer_a);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `int *pointer_a, a;`：宣告了一個整數指標 `pointer_a` 和一個整數變數 `a`。

3. `pointer_a = &amp;a;`：將變數 `a` 的地址賦值給指標 `pointer_a`。`&amp;` 運算符用於取得變數的地址。

4. `a = 10;`：將變數 `a` 的值設置為10。

5. `printf("%d, %d\n", a, *pointer_a);`：使用 `printf` 函式輸出變數 `a` 的值和指標 `pointer_a` 所指向的地址的值。`*` 運算符用於解引用指標，獲取該地址存儲的值。

6. `return 0;`：主函式正常結束，返回值為0。
</pre>
<p><img alt="" height="50" src="/images/ct3.png" width="235"/></p>
<p>4</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
pointer – 6
==================== */
#include &lt;stdio.h&gt;

int main()
{
char *str = "Eric";

printf("%c\n", *(str + 0)); /* 也可寫 printf("%c", str[0] ); */
printf("%c\n", *(str + 1)); /* 也可寫 printf("%c", str[1] ); */
printf("%c\n", *(str + 2)); /* 也可寫 printf("%c", str[2] ); */
printf("%c\n", *(str + 3)); /* 也可寫 printf("%c", str[3] ); */

return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `int main()`：定義主函式。

3. `char *str = "Eric";`：宣告一個指向字符的指標 `str`，並將其指向一個包含字符串 "Eric" 的字符陣列。在C中，字符串實際上是以null結尾的字符陣列。

4. `printf("%c\n", *(str + 0));`：使用指標的算術運算，輸出指向 `str` 開始的字符陣列的第一個元素，即 'E'。也可以寫成 `printf("%c\n", str[0]);`。

5. `printf("%c\n", *(str + 1));`：輸出 `str` 的第二個元素，即 'r'。也可以寫成 `printf("%c\n", str[1]);`。

6. `printf("%c\n", *(str + 2));`：輸出 `str` 的第三個元素，即 'i'。也可以寫成 `printf("%c\n", str[2]);`。

7. `printf("%c\n", *(str + 3));`：輸出 `str` 的第四個元素，即 'c'。也可以寫成 `printf("%c\n", str[3]);`。

8. `return 0;`：主函式正常結束，返回值為0。
</pre>
<p><img alt="" height="91" src="/images/ct4.png" width="233"/></p>
<p>5</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 2d array.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int array[3][3];
    int x, y;

    array[0][0] = 1;
    array[0][1] = 2;
    array[0][2] = 3;
    array[1][0] = 4;
    array[1][1] = 5;
    array[1][2] = 6;
    array[2][0] = 7;
    array[2][1] = 8;
    array[2][2] = 9;

    for (x = 0; x &lt; 3; x++)
    {
        for (y = 0; y &lt; 3; y++)
        {
            printf("%d,", array[x][y]);
        }
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `int main()`：定義主函式。

3. `int array[3][3];`：宣告一個3x3的整數二維陣列 `array`。

4. `int x, y;`：宣告整數變數 `x` 和 `y` 作為迴圈計數器。

5. `array[0][0] = 1;` 到 `array[2][2] = 9;`：將數字 1 到 9 分別賦值給二維陣列中的元素。

6. `for (x = 0; x &lt; 3; x++)`：外層迴圈，從0到2，遍歷二維陣列的行。

7. `for (y = 0; y &lt; 3; y++)`：內層迴圈，從0到2，遍歷二維陣列的列。

8. `printf("%d,", array[x][y]);`：輸出二維陣列中當前位置的元素值，並在每個元素值後面加上逗號。

9. `return 0;`：主函式正常結束，返回值為0。
</pre>
<p><img alt="" height="40" src="/images/ct5.png" width="250"/></p>
<p>6</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 array - 1.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int grade[5]; /* size = 5 的 array */
    int i;

    grade[0] = 75; /* 1st element */
    grade[1] = 80; /* 2nd element */
    grade[2] = 85; /* 3rd element */
    grade[3] = 70; /* 4th element */
    grade[4] = 90; /* 5th element */

    for (i = 0; i &lt; 5; i++)
    {
        printf("Number %d = %d\n", i, grade[i]);
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，允許使用 `printf` 和其他相關的輸出函式。

2. `int main()`：定義主函式。

3. `int grade[5];`：宣告一個包含5個整數元素的陣列 `grade`。

4. `int i;`：宣告整數變數 `i`，將用於迴圈計數。

5. `grade[0] = 75;` 到 `grade[4] = 90;`：將分數賦值給陣列中的每個元素。

6. `for (i = 0; i &lt; 5; i++)`：使用 `for` 迴圈，從0到4，遍歷陣列的每個元素。

7. `printf("Number %d = %d\n", i, grade[i]);`：使用 `printf` 函式，輸出當前陣列元素的索引和值。

8. `return 0;`：主函式正常結束，返回值為0。
</pre>
<p><img alt="" height="107" src="/images/ct6.png" width="232"/></p>
<p>7</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 do - while.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int i, j;
    i = 0;
    j = 10; /* 迴圈外先設定初值 */

    do
    {
        printf("i = %d, ", i);
        printf("j = %d\n", j);
        i++;
        j++;
    } while (i &lt; 6); /* 檢查條件的地方 */

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。

2. `int main()`：定義主函式。

3. `int i, j;`：宣告整數變數 `i` 和 `j`。

4. `i = 0;` 和 `j = 10;`：給變數 `i` 賦值0，`j` 賦值10。

5. `do`：開始 `do-while` 迴圈，這部分的代碼將至少執行一次。

6. `{`：迴圈的開始。

7. `printf("i = %d, ", i);` 和 `printf("j = %d\n", j);`：使用 `printf` 函式印出 `i` 和 `j` 的值。

8. `i++;` 和 `j++;`：將 `i` 和 `j` 遞增。

9. `} while (i &lt; 6);`：`do-while` 迴圈的結尾。在這裡，條件 `i &lt; 6` 被檢查，如果成立，則迴圈會再次執行。如果條件不滿足，則迴圈結束。

10. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="128" src="/images/ct7.png" width="234"/></p>
<p>8</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
99 乘法.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int x, y;

    for (x = 1; x &lt;= 9; x++)
    {
        for (y = 1; y &lt;= 9; y++)
        {
            printf("%2d ", x * y);  /* 使用 %2d 以確保數字的對齊性 */
        }
        printf("\n");
    }

    return 0;
}</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。

2. `int main()`：定義主函式。

3. `int x, y;`：宣告兩個整數變數 `x` 和 `y`，這將用於乘法表的索引。

4. `for (x = 1; x &lt;= 9; x++)`：外部 `for` 迴圈，用於遍歷乘法表的行。從1開始，一直到9，每次遞增1。

5. `{`：外部迴圈的開始。

6. `for (y = 1; y &lt;= 9; y++)`：內部 `for` 迴圈，用於遍歷乘法表的列。同樣，從1開始，一直到9，每次遞增1。

7. `{`：內部迴圈的開始。

8. `printf("%2d ", x * y);`：使用 `printf` 函式印出 `x * y` 的結果。 `%2d` 的格式確保數字的對齊性，即使是個位數的結果也會有一個空格的寬度。

9. `}`：內部迴圈的結尾。

10. `printf("\n");`：在內部迴圈執行完畢後，換行，以便開始新的一行。

11. `}`：外部迴圈的結尾。

12. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><br/><br/></p>
<p><img alt="" height="122" src="/images/ct8.png" width="162"/></p>
<p>9</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 Program "continue"
 ==================== */
#include &lt;stdio.h&gt;

int main()
{
    int i;

    for (i = 0; i &lt; 10; i++)
    {
        if ((i == 1) || (i == 2) || (i == 3))
        {
            continue; /* 忽略以後的 program, 回到 for. */
        }
        printf("i = %d\n", i);
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 等相關的輸出函式。

2. `int main()`：定義主函式。

3. `int i;`：宣告一個整數變數 `i`，將用於 `for` 迴圈的迭代。

4. `for (i = 0; i &lt; 10; i++)`：`for` 迴圈，從 `i` 等於0開始，每次遞增1，直到 `i` 小於10。

5. `{`：迴圈的開始。

6. `if ((i == 1) || (i == 2) || (i == 3))`：條件語句，檢查 `i` 是否等於1、2或3。

7. `{`：條件語句的開始。

8. `continue;`：如果條件成立，執行 `continue`，這會跳過剩餘的程式碼，直接回到 `for` 迴圈的下一次迭代，忽略以下的 `printf`。

9. `}`：條件語句的結尾。

10. `printf("i = %d\n", i);`：在未遇到 `continue` 的情況下，印出 `i` 的值。

11. `}`：迴圈的結尾。

12. `return 0;`：主函式正常結束，返回值為0。
</pre>
<p><img alt="" height="110" src="/images/ct9.png" width="179"/></p>
<p>10</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
switch - case 的範例 3.
==================== */
#include &lt;stdio.h&gt;

int main()
{
char c;

printf("Input a char: ");

// 檢查 scanf 的返回值
if (scanf("%c", &amp;c) != 1)
{
printf("Error reading input.\n");
return 1; // 返回非零值表示錯誤
}

switch (c)
{
case 'a':
printf("You pressed a\n");
break;
case 'b':
printf("You pressed b\n");
break;
case 'c':
printf("You pressed c\n");
break;
default:
printf("Unrecognized input\n");
break;
}

return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 和 `scanf` 函式。

2. `int main()`：定義主函式。

3. `char c;`：宣告一個字符變數 `c`，用於存儲從用戶輸入讀取的字符。

4. `printf("Input a char: ");`：輸出提示消息，要求用戶輸入一個字符。

5. `if (scanf("%c", &amp;c) != 1)`：使用 `scanf` 函式讀取用戶輸入的字符。檢查 `scanf` 的返回值，確保成功讀取一個字符。

6. `{`：`if` 條件語句的開始。

7. `printf("Error reading input.\n");`：如果讀取失敗，輸出錯誤消息。

8. `return 1;`：返回1，表示程式發生錯誤。

9. `}`：`if` 條件語句的結尾。

10. `switch (c)`：`switch` 語句，根據字符 `c` 的值進行分支選擇。

11. `{`：`switch` 語句的開始。

12. `case 'a':`：如果 `c` 的值等於 'a'，執行以下語句。

13. `printf("You pressed a\n");`：輸出消息表示用戶按下 'a'。

14. `break;`：跳出 `switch` 語句。

15. `case 'b':`：如果 `c` 的值等於 'b'，執行以下語句。

16. `printf("You pressed b\n");`：輸出消息表示用戶按下 'b'。

17. `break;`：跳出 `switch` 語句。

18. `case 'c':`：如果 `c` 的值等於 'c'，執行以下語句。

19. `printf("You pressed c\n");`：輸出消息表示用戶按下 'c'。

20. `break;`：跳出 `switch` 語句。

21. `default:`：如果 `c` 的值不等於 'a'、'b' 或 'c'，執行以下語句。

22. `printf("Unrecognized input\n");`：輸出消息表示輸入未被識別。

23. `break;`：跳出 `switch` 語句。

24. `}`：`switch` 語句的結尾。

25. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="67" src="/images/ct10.png" width="238"/></p><h1>ANSIC</h1>
<p>1</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main() {
    int n, x = 0;

    printf("\n\n Check whether a given number is an ugly number:\n");
    printf("----------------------------------------------------\n");

    // 检查 scanf 的返回值
    if (scanf("%d", &amp;n) != 1) {
        printf("Input is not a valid integer.\n");
        return 1;  // 退出程序，表示出现错误
    }

    if (n &lt;= 0) {
        printf("Input a correct number.\n");
    } else {
        while (n != 1) {
            if (n % 5 == 0) {
                n /= 5;
            } else if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                printf("It is not an ugly number.\n");
                x = 1;
                break;
            }
        }

        if (x == 0) {
            printf("It is an ugly number.\n");
        }
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 和 `scanf` 函式。
   
2. `#include &lt;string.h&gt;`：包含字串操作相關的庫，雖然在目前的程式碼中未使用。

3. `int main()`：定義主函式。

4. `int n, x = 0;`：宣告兩個整數變數 `n` 和 `x`，其中 `x` 被初始化為0。

5. `printf("\n\n Check whether a given number is an ugly number:\n");`：輸出提示消息，要求用戶輸入一個數字以檢查是否為"ugly number"。

6. `printf("----------------------------------------------------\n");`：輸出分隔線。

7. `if (scanf("%d", &amp;n) != 1)`：使用 `scanf` 函式讀取用戶輸入的數字。檢查 `scanf` 的返回值，確保成功讀取一個整數。

8. `{`：`if` 條件語句的開始。

9. `printf("Input is not a valid integer.\n");`：如果讀取失敗，輸出錯誤消息。

10. `return 1;`：返回1，表示程式發生錯誤。

11. `}`：`if` 條件語句的結尾。

12. `if (n &lt;= 0)`：檢查用戶輸入的數字是否小於或等於0。

13. `{`：`if` 條件語句的開始。

14. `printf("Input a correct number.\n");`：如果是，輸出消息表示輸入的數字不正確。

15. `}`：`if` 條件語句的結尾。

16. `else`：如果 `n` 大於0，執行以下語句。

17. `{`：`else` 語句的開始。

18. `while (n != 1)`：當 `n` 不等於1時，執行以下循環。

19. `{`：`while` 循環的開始。

20. `if (n % 5 == 0)`：如果 `n` 可以被5整除。

21. `{`：`if` 條件語句的開始。

22. `n /= 5;`：將 `n` 除以5。

23. `}`：`if` 條件語句的結尾。

24. `else if (n % 3 == 0)`：如果 `n` 不可被5整除，並且可以被3整除。

25. `{`：`else if` 條件語句的開始。

26. `n /= 3;`：將 `n` 除以3。

27. `}`：`else if` 條件語句的結尾。

28. `else if (n % 2 == 0)`：如果 `n` 不可被5和3整除，並且可以被2整除。

29. `{`：`else if` 條件語句的開始。

30. `n /= 2;`：將 `n` 除以2。

31. `}`：`else if` 條件語句的結尾。

32. `else`：如果 `n` 不能被5、3和2整除。

33. `{`：`else` 語句的開始。

34. `printf("It is not an ugly number.\n");`：輸出消息表示輸入的數字不是"ugly number"。

35. `x = 1;`：設置 `x` 為1，表示已經找到了結果。

36. `break;`：跳出 `while` 循環。

37. `}`：`else` 語句的結尾。

38. `if (x == 0)`：檢查 `x` 的值是否仍然為0。

39. `{`：`if` 條件語句的開始。

40. `printf("It is an ugly number.\n");`：如果是，輸出消息表示輸入的數字是"ugly number"。

41. `}`：`if` 條件語句的結尾。

42. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="87" src="/images/an1.png" width="300"/><br/><br/></p>
<p>2</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t epoch = 0;

    printf("\n自纪元开始以来的秒数：%ld\n", (long)epoch);
    printf("对应的日期和时间：%s\n", asctime(gmtime(&amp;epoch)));

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 函式。

2. `#include &lt;time.h&gt;`：包含時間相關的庫，以便使用 `time` 函式和其他時間相關的功能。

3. `int main(void)`：定義主函式，返回一個整數。

4. `time_t epoch = 0;`：宣告一個 `time_t` 型別的變數 `epoch` 並將其初始化為0。`time_t` 是一種用於表示時間的數據類型，通常是從UNIX紀元（1970年1月1日）開始的秒數。

5. `printf("\n自纪元开始以来的秒数：%ld\n", (long)epoch);`：輸出一條消息，顯示從UNIX紀元開始到目前經過的秒數。使用 `%ld` 格式化輸出長整數，`(long)epoch` 將 `epoch` 轉換為長整數。

6. `printf("对应的日期和时间：%s\n", asctime(gmtime(&amp;epoch)));`：輸出一條消息，顯示將 `epoch` 轉換為日期和時間的結果。`gmtime(&amp;epoch)` 返回 `epoch` 的格林威治標準時間（GMT）的結構體表示，`asctime` 將結構體轉換為字串形式。`%s` 用於格式化輸出字串。

7. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="83" src="/images/an2.png" width="345"/></p>
<p>3</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL);
    printf("\nThe calendar time expressed as a local Time is :");   
    printf("\nUTC:   %s", asctime(gmtime(&amp;t)));
    printf("local: %s\n", asctime(localtime(&amp;t)));

#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));
    printf("UTC:   %s", str);

    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));
    printf("local: %s", str);
#endif

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#define __STDC_WANT_LIB_EXT1__ 1`：這是一個預處理器指令，用來啟用 C11 標準庫的擴展功能，包括安全函式（安全函式的名稱帶有 `_s` 結尾）。

2. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的指令，以便使用 `printf` 函式。

3. `#include &lt;time.h&gt;`：包含時間相關的庫，以便使用 `time`、`gmtime`、`localtime`、`asctime` 函式。

4. `int main(void)`：定義主函式，返回一個整數。

5. `time_t t = time(NULL);`：宣告一個 `time_t` 型別的變數 `t`，並使用 `time(NULL)` 函式獲取當前的時間，將其賦值給 `t`。

6. `printf("\nThe calendar time expressed as a local Time is :");`：輸出一條消息，提示即將輸出本地時間。

7. `printf("\nUTC:   %s", asctime(gmtime(&amp;t)));`：使用 `gmtime` 函式將 `t` 轉換為格林威治標準時間（UTC），再使用 `asctime` 函式將其轉換為字串形式，最後使用 `printf` 函式輸出。

8. `printf("local: %s\n", asctime(localtime(&amp;t)));`：使用 `localtime` 函式將 `t` 轉換為本地時間，再使用 `asctime` 函式將其轉換為字串形式，最後使用 `printf` 函式輸出。

9. `#ifdef __STDC_LIB_EXT1__`：這是一個條件編譯指令，用於確保編譯器支持擴展功能。

10. `struct tm buf;`：宣告一個 `struct tm` 型別的結構體 `buf`，用於存儲時間的詳細信息。

11. `char str[26];`：宣告一個長度為26的字符陣列 `str`，用於存儲轉換後的時間字串。

12. `asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));`：使用 `gmtime_s` 函式將 `t` 轉換為格林威治標準時間（UTC），再使用 `asctime_s` 函式將其轉換為字串形式，並安全地將結果存儲到 `str` 中。

13. `printf("UTC:   %s", str);`：使用 `printf` 函式輸出 UTC 時間字串。

14. `asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));`：使用 `localtime_s` 函式將 `t` 轉換為本地時間，再使用 `asctime_s` 函式將其轉換為字串形式，並安全地將結果存儲到 `str` 中。

15. `printf("local: %s", str);`：使用 `printf` 函式輸出本地時間字串。

16. `#endif`：結束條件編譯區塊。

17. `return 0;`：主函式正常結束，返回值為0。</pre>
<p></p>
<p><img alt="" height="98" src="/images/an3.png" width="387"/></p>
<p>4</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    // 设置时区为“Asia/Calcutta”
    setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);   

    // 获取并打印当前日期和时间
    struct tm tm = *localtime(&amp;(time_t){time(NULL)});
    printf("\n今天是 :            %s", asctime(&amp;tm));
    printf("(夏令时 %s)\n", tm.tm_isdst ? "生效中" : "未生效");

    // 将月份减去 24，表示 24 个月前的日期和时间
    tm.tm_mon -= 24;  

    // 重新计算时间
    mktime(&amp;tm);       

    // 获取并打印 24 个月前的日期和时间
    printf("\n24个月前的日期是 : %s", asctime(&amp;tm));
    printf("(夏令时 %s)\n\n", tm.tm_isdst ? "生效中" : "未生效");

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdlib.h&gt;`：包含標準庫的 `stdlib.h` 標頭文件，該文件提供動態內存分配、亂數生成、環境變數管理等功能。

2. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，該文件提供輸入和輸出的相關函式。

3. `#include &lt;time.h&gt;`：包含時間相關的庫，以便使用 `time`、`localtime`、`mktime`、`asctime` 函式。

4. `int main(void)`：定義主函式，返回一個整數。

5. `setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);`：使用 `setenv` 函式將時區設置為“Asia/Calcutta”，這是印度的一個時區。

6. `struct tm tm = *localtime(&amp;(time_t){time(NULL)});`：宣告一個 `struct tm` 型別的結構體 `tm`，並使用 `time` 函式獲取當前時間，再用 `localtime` 函式將時間轉換為本地時間。

7. `printf("\n今天是 :            %s", asctime(&amp;tm));`：使用 `asctime` 函式將 `tm` 轉換為字串形式，然後使用 `printf` 函式輸出當前日期和時間。

8. `printf("(夏令时 %s)\n", tm.tm_isdst ? "生效中" : "未生效");`：使用 `tm_isdst` 成員判斷當前是否處於夏令時，並輸出相應的消息。

9. `tm.tm_mon -= 24;`：將 `tm` 結構體中的月份減去24，表示24個月前的日期和時間。

10. `mktime(&amp;tm);`：使用 `mktime` 函式重新計算 `tm` 結構體中的時間，確保時間的正確性。

11. `printf("\n24个月前的日期是 : %s", asctime(&amp;tm));`：使用 `asctime` 函式將 `tm` 轉換為字串形式，然後使用 `printf` 函式輸出24個月前的日期和時間。

12. `printf("(夏令时 %s)\n\n", tm.tm_isdst ? "生效中" : "未生效");`：使用 `tm_isdst` 成員判斷24個月前是否處於夏令時，並輸出相應的消息。

13. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="111" src="/images/an4.png" width="313"/></p>
<p>5</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

double powxn(double x, int n) {
    double k;
    if (n == 0) return 1;
    k = powxn(x * x, n / 2);
    if (n % 2) k = k * x;
    return k;
}

int main(void)
{
    double x = 7.0;
    int n = 2;
    printf("\nx = %f, y = %d  ", x, n);
    printf("\nResult:(x^n) : %f ",powxn(x, n));
    x = 6.2;
    n = 3;
    printf("\n\nx = %f, y = %d  ", x, n);
    printf("\nResult:(x^n) : %f ",powxn(x, n));
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `#include &lt;limits.h&gt;`：包含標準整數類型的庫的 `limits.h` 標頭文件，提供整數類型的極值常量。

3. `double powxn(double x, int n)`：定義一個名為 `powxn` 的函式，用於計算 `x` 的 `n` 次方。函式返回一個 `double` 型別的值。

4. `double k;`：宣告一個 `double` 型別的變數 `k`，用於存儲計算結果。

5. `if (n == 0) return 1;`：如果指數 `n` 為0，直接返回1，因為任何數的0次方都是1。

6. `k = powxn(x * x, n / 2);`：遞迴計算 `x` 的平方的 `(n / 2)` 次方。

7. `if (n % 2) k = k * x;`：如果指數 `n` 為奇數，乘上額外的一個 `x`。

8. `return k;`：返回計算結果 `k`。

9. `int main(void)`：定義主函式，返回一個整數。

10. `double x = 7.0;`：初始化一個 `double` 型別的變數 `x`，值為7.0。

11. `int n = 2;`：初始化一個整數型別的變數 `n`，值為2。

12. `printf("\nx = %f, y = %d  ", x, n);`：使用 `printf` 函式輸出變數 `x` 和 `n` 的值。

13. `printf("\nResult:(x^n) : %f ",powxn(x, n));`：使用 `printf` 函式輸出 `x` 的 `n` 次方的結果，調用 `powxn` 函式計算。

14. `x = 6.2;`：將變數 `x` 的值更改為6.2。

15. `n = 3;`：將變數 `n` 的值更改為3。

16. `printf("\n\nx = %f, y = %d  ", x, n);`：再次使用 `printf` 函式輸出更新後的變數 `x` 和 `n` 的值。

17. `printf("\nResult:(x^n) : %f ",powxn(x, n));`：再次使用 `printf` 函式輸出 `x` 的 `n` 次方的結果，調用 `powxn` 函式計算。

18. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="113" src="/images/an5.png" width="310"/></p>
<p>6</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">//Source: https://bit.ly/2KNsta8
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;

char* fractionToDecimal(int numerator, int denominator) {
    char *p;
    int psz, n, *dec, dsz, x;
    long long num, den, k, f;
    int i, repeat_at;
    int neg = 0;

    psz = dsz = 100; n = x = 0;
    p = malloc(psz * sizeof(char));

    neg = ((numerator &gt; 0 &amp;&amp; denominator &lt; 0) ||
           (numerator &lt; 0 &amp;&amp; denominator &gt; 0)) ? 1 : 0;
    num = numerator;
    den = denominator;
    num = (num &lt; 0) ? -num : num;
    den = (den &lt; 0) ? -den : den;

    k = num / den;
    f = num % den;

    if (neg &amp;&amp; (k || f)) p[n ++] = '-';

    n += sprintf(&amp;p[n], "%lld", k);
    if (!f) {
        p[n] = 0;
        return p;
    }

    p[n ++] = '.';

    dec = malloc(dsz * sizeof(int));

    repeat_at = -1;
    if (f &lt; 0) f = -f;
    while (f) {
        for (i = 0; i &lt; x; i += 2) {
            if (dec[i] == f) {
                repeat_at = i;
                goto done;
            }
        }
        if (x + 1 &gt;= dsz) {
            dsz *= 2;
            dec = realloc(dec, dsz * sizeof(int));
        }
        dec[x ++] = f;
        f *= 10;
        k = f / den;
        dec[x ++] = k;
        f = f % den;
    }

done:
    for (i = 0; i &lt; x; i += 2) {
        if (n + 3 &gt; psz) {
            psz *= 2;
            p = realloc(p, psz * sizeof(char));
        }
        if (repeat_at == i) {
            p[n ++] = '(';
        }
        p[n ++] = '0' + dec[i + 1];
    }
    if (repeat_at != -1) p[n ++] = ')';
    p[n ++] = 0;

    free(dec);

    return p;
}

int main(void)
{
    int n = 3;
    int d = 2;
    printf("\nn = %d, d = %d  ", n, d);
    printf("\nFractional part: %s ", fractionToDecimal(n, d));

    n = 4;
    d = 7;
    printf("\n\nn = %d, d = %d  ", n, d);
    printf("\nFractional part: %s ", fractionToDecimal(n, d));

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `#include &lt;stdlib.h&gt;`：包含標準庫的 `stdlib.h` 標頭文件，提供動態內存分配函式，如 `malloc` 和 `realloc`。

3. `#include &lt;string.h&gt;`：包含標準字串函式的 `string.h` 標頭文件。

4. `#include &lt;stdbool.h&gt;`：包含 `stdbool.h` 標頭文件，提供布林型別 `bool` 和相關的 `true`、`false` 常量。

5. `char* fractionToDecimal(int numerator, int denominator)`：定義一個函式 `fractionToDecimal`，該函式接收分子 `numerator` 和分母 `denominator`，返回一個指向字符陣列的指標。

6. `char *p;`：宣告一個指向字符的指標 `p`，用於存儲結果。

7. `int psz, n, *dec, dsz, x;`：宣告一些整數變數，其中 `psz` 和 `dsz` 分別用於表示陣列 `p` 和 `dec` 的大小，`n` 表示字符陣列 `p` 目前的位置，`x` 用於追蹤數字陣列 `dec` 的位置。

8. `long long num, den, k, f;`：宣告一些長整數變數，用於存儲分子 `numerator`、分母 `denominator`、商 `k` 和餘數 `f`。

9. `int i, repeat_at;`：宣告迴圈中使用的整數變數，`i` 用於迴圈遍歷，`repeat_at` 用於標記重複的位置。

10. `int neg = 0;`：宣告一個整數變數 `neg`，用於標記分數是否為負數。

11. `psz = dsz = 100; n = x = 0;`：初始化一些變數的大小，`psz` 和 `dsz` 設置為100，`n` 和 `x` 設置為0。

12. `p = malloc(psz * sizeof(char));`：使用 `malloc` 函式分配 `psz` 大小的內存，用於存儲結果。

13. `neg = ((numerator &gt; 0 &amp;&amp; denominator &lt; 0) || (numerator &lt; 0 &amp;&amp; denominator &gt; 0)) ? 1 : 0;`：檢查分數的正負性。

14. `num = numerator;`、`den = denominator;`：將分子和分母的值存儲在 `num` 和 `den` 中。

15. `num = (num &lt; 0) ? -num : num;`、`den = (den &lt; 0) ? -den : den;`：如果分子或分母為負，則取絕對值。

16. `k = num / den;`、`f = num % den;`：計算商 `k` 和餘數 `f`。

17. `if (neg &amp;&amp; (k || f)) p[n ++] = '-';`：如果分數為負，並且商 `k` 或餘數 `f` 不為0，將負號加入結果。

18. `n += sprintf(&amp;p[n], "%lld", k);`：使用 `sprintf` 函式將商 `k` 轉換為字符串，並將其添加到結果中。

19. `if (!f) { p[n] = 0; return p; }`：如果餘數 `f` 為0，表示分數為整數，將結果結束並返回。

20. `p[n ++] = '.';`：如果有小數部分，添加小數點。

21. `dec = malloc(dsz * sizeof(int));`：使用 `malloc` 函式分配 `dsz` 大小的整數陣列內存，用於存儲小數部分。

22. `repeat_at = -1;`：初始化 `repeat_at` 為-1，用於標記重複的位置。

23. `if (f &lt; 0) f = -f;`：如果餘數 `f` 為負，取絕對值。

24. `while (f) {`：當餘數 `f` 不為0時執行迴圈。

25. `for (i = 0; i &lt; x; i += 2) { if (dec[i] == f) { repeat_at = i; goto done; } }`：檢查小數部分是否重複，如果發現重複，標記位置並跳轉到 `done` 標籤。

26. `if (x + 1 &gt;= dsz) { dsz *= 2; dec = realloc(dec, dsz * sizeof(int

)); }`：檢查 `dec` 陣列大小是否足夠，如果不夠，則雙倍擴展其大小。

27. `dec[x ++] = f;`、`f *= 10;`、`k = f / den;`、`dec[x ++] = k;`、`f = f % den;`：更新小數部分的數字陣列 `dec`。

28. `done:`：標籤，表示已經完成查找重複的過程。

29. `for (i = 0; i &lt; x; i += 2) {`：遍歷小數部分的數字陣列 `dec`。

30. `if (n + 3 &gt; psz) { psz *= 2; p = realloc(p, psz * sizeof(char)); }`：檢查結果陣列 `p` 的大小是否足夠，如果不夠，則雙倍擴展其大小。

31. `if (repeat_at == i) { p[n ++] = '('; }`：如果遇到重複的位置，添加開始標記 `(`。

32. `p[n ++] = '0' + dec[i + 1];`：將小數部分的數字添加到結果。

33. `if (repeat_at != -1) p[n ++] = ')';`：如果有重複，添加結束標記 `)`。

34. `p[n ++] = 0;`：結束結果的字符串。

35. `free(dec);`：釋放小數部分的數字陣列 `dec` 所占的內存。

36. `return p;`：返回存儲結果的指標。

37. `int main(void)`：定義主函式，返回一個整數。

38. `int n = 3;`、`int d = 2;`：初始化兩個整數變數 `n` 和 `d`，分別表示分子和分母。

39. `printf("\nn = %d, d = %d  ", n, d);`：使用 `printf` 函式輸出分數的分子和分母。

40. `printf("\nFractional part: %s ", fractionToDecimal(n, d));`：使用 `printf` 函式輸出分數的十進制小數部分，調用 `fractionToDecimal` 函式計算。

41. `n = 4;`、`d = 7;`：更新分數的分子和分母。

42. `printf("\n\nn = %d, d = %d  ", n, d);`：再次使用 `printf` 函式輸出更新後的分子和分母。

43. `printf("\nFractional part: %s ", fractionToDecimal(n, d));`：再次使用 `printf` 函式輸出更新後的分數的十進制小數部分，調用 `fractionToDecimal` 函式計算。

44. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="94" src="/images/an6.png" width="287"/></p>
<p>7</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int fno, sno, *ptr, *qtr, sum;  // 宣告整數變數 fno, sno, sum，以及整數指標 ptr, qtr

    printf("\n\n Pointer : Add two numbers :\n");
    printf("--------------------------------\n");

    printf(" Input the first number : ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;fno) != 1) {
        fprintf(stderr, "Error: Invalid input for the first number.\n");
        return 1;
    }

    printf(" Input the second number : ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;sno) != 1) {
        fprintf(stderr, "Error: Invalid input for the second number.\n");
        return 1;
    }

    ptr = &amp;fno;  // 將 fno 的地址賦值給指標 ptr
    qtr = &amp;sno;  // 將 sno 的地址賦值給指標 qtr

    sum = *ptr + *qtr;  // 解參考 ptr 和 qtr，取得值並計算它們的和

    printf(" The sum of the entered numbers is : %d\n\n", sum);  // 輸出輸入數字的總和

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `int main()`：定義主函式，返回一個整數。

3. `int fno, sno, *ptr, *qtr, sum;`：宣告整數變數 `fno`、`sno`、`sum`，以及整數指標 `ptr` 和 `qtr`。

4. `printf("\n\n Pointer : Add two numbers :\n");`：使用 `printf` 函式輸出提示信息，表示要使用指標相加兩個數字。

5. `printf("--------------------------------\n");`：使用 `printf` 函式輸出分隔線。

6. `printf(" Input the first number : ");`：使用 `printf` 函式提示用戶輸入第一個數字。

7. `if (scanf("%d", &amp;fno) != 1) { fprintf(stderr, "Error: Invalid input for the first number.\n"); return 1; }`：使用 `scanf` 函式讀取第一個數字，並檢查是否成功讀取一個整數。如果讀取失敗，則輸出錯誤信息並返回1。

8. `printf(" Input the second number : ");`：使用 `printf` 函式提示用戶輸入第二個數字。

9. `if (scanf("%d", &amp;sno) != 1) { fprintf(stderr, "Error: Invalid input for the second number.\n"); return 1; }`：使用 `scanf` 函式讀取第二個數字，並檢查是否成功讀取一個整數。如果讀取失敗，則輸出錯誤信息並返回1。

10. `ptr = &amp;fno;`：將變數 `fno` 的地址賦值給指標 `ptr`。

11. `qtr = &amp;sno;`：將變數 `sno` 的地址賦值給指標 `qtr`。

12. `sum = *ptr + *qtr;`：使用指標 `ptr` 和 `qtr` 解參考，取得它們所指向的值，然後計算這兩個值的和，將結果賦值給變數 `sum`。

13. `printf(" The sum of the entered numbers is : %d\n\n", sum);`：使用 `printf` 函式輸出輸入數字的總和。

14. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="122" src="/images/an7.png" width="268"/></p>
<p>8</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int arr[10];  // 宣告一個大小為10的整數數組，用於存儲使用者輸入的整數
    int i;

    // 提示用戶輸入十個整數
    printf("\n\nRead and Print elements of an array:\n");
    printf("-----------------------------------------\n");
    printf("Input 10 elements in the array :\n");

    // 使用迴圈接受用戶輸入，並將整數存入數組
    for (i = 0; i &lt; 10; i++) {
        printf("element - %d : ", i);

        // 檢查 scanf 的返回值，確保成功讀取一個整數
        if (scanf("%d", &amp;arr[i]) != 1) {
            fprintf(stderr, "Error: Invalid input for element %d.\n", i);
            return 1;  // 如果輸入無效，返回錯誤碼
        }
    }

    // 顯示數組中的所有元素
    printf("\nElements in array are: ");
    for (i = 0; i &lt; 10; i++) {
        printf("%d  ", arr[i]);
    }

    printf("\n");
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `int main()`：定義主函式，返回一個整數。

3. `int arr[10];`：宣告一個大小為10的整數數組 `arr`，用於存儲使用者輸入的十個整數。

4. `int i;`：宣告整數變數 `i`，用於迴圈中計數。

5. `printf("\n\nRead and Print elements of an array:\n");`：使用 `printf` 函式輸出提示信息，表示將要讀取並打印數組元素。

6. `printf("-----------------------------------------\n");`：使用 `printf` 函式輸出分隔線。

7. `printf("Input 10 elements in the array :\n");`：使用 `printf` 函式提示用戶輸入十個整數。

8. `for (i = 0; i &lt; 10; i++) {`：使用 `for` 迴圈，從0開始，重複10次，迭代變數 `i` 用於控制迴圈。

9. `printf("element - %d : ", i);`：使用 `printf` 函式提示用戶輸入當前迴圈迭代的數組元素的索引。

10. `if (scanf("%d", &amp;arr[i]) != 1) {`：使用 `scanf` 函式讀取一個整數，並檢查是否成功讀取。如果讀取失敗，輸出錯誤信息並返回1。

11. `printf("\nElements in array are: ");`：使用 `printf` 函式輸出提示信息，表示要打印數組中的所有元素。

12. `for (i = 0; i &lt; 10; i++) {`：再次使用 `for` 迴圈，從0開始，重複10次，迭代變數 `i` 用於控制迴圈。

13. `printf("%d  ", arr[i]);`：使用 `printf` 函式打印數組中當前索引處的元素。

14. `printf("\n");`：換行。

15. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="149" src="/images/an8.png" width="285"/></p>
<p>9</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int days, years, weeks;

    days = 1329; // 總天數

    // 將天數轉換為年、週和天
    years = days / 365;  // 計算年數
    weeks = (days % 365) / 7;  // 計算週數
    days = days % 7;  // 計算剩餘的天數

    // 輸出結果
    printf("Years: %d\n", years);
    printf("Weeks: %d\n", weeks);
    printf("Days: %d\n", days);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `int main()`：定義主函式，返回一個整數。

3. `int days, years, weeks;`：宣告三個整數變數 `days`、`years` 和 `weeks`，用於存儲計算日期的相關值。

4. `days = 1329;`：給變數 `days` 賦值為1329，表示總天數。

5. `years = days / 365;`：計算變數 `days` 中包含的年數，將結果存儲在變數 `years` 中。

6. `weeks = (days % 365) / 7;`：計算變數 `days` 中剩餘的天數，將其轉換為週數，將結果存儲在變數 `weeks` 中。使用 `%` 運算符計算天數的餘數。

7. `days = days % 7;`：計算變數 `days` 中剩餘的天數，將結果存儲在變數 `days` 中。這表示不足一週的天數。

8. `printf("Years: %d\n", years);`：使用 `printf` 函式輸出計算得到的年數。

9. `printf("Weeks: %d\n", weeks);`：使用 `printf` 函式輸出計算得到的週數。

10. `printf("Days: %d\n", days);`：使用 `printf` 函式輸出計算得到的剩餘天數。

11. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="79" src="/images/an9.png" width="231"/></p>
<p>10</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    double wi1, ci1, wi2, ci2, result; // 宣告變數，用於存儲物品的重量和數量

    // 提示用戶輸入物品1的重量
    printf("Weight - Item1: ");
    if (scanf("%lf", &amp;wi1) != 1) {
        fprintf(stderr, "Error: Invalid input for weight of item1.\n");
        return 1;
    }

    // 提示用戶輸入物品1的數量
    printf("No. of item1: ");
    if (scanf("%lf", &amp;ci1) != 1) {
        fprintf(stderr, "Error: Invalid input for count of item1.\n");
        return 1;
    }

    // 提示用戶輸入物品2的重量
    printf("Weight - Item2: ");
    if (scanf("%lf", &amp;wi2) != 1) {
        fprintf(stderr, "Error: Invalid input for weight of item2.\n");
        return 1;
    }

    // 提示用戶輸入物品2的數量
    printf("No. of item2: ");
    if (scanf("%lf", &amp;ci2) != 1) {
        fprintf(stderr, "Error: Invalid input for count of item2.\n");
        return 1;
    }

    // 計算平均值
    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);

    // 輸出平均值
    printf("Average Value = %f\n", result);

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `int main()`：定義主函式，返回一個整數。

3. `double wi1, ci1, wi2, ci2, result;`：宣告五個雙精度浮點變數 `wi1`、`ci1`、`wi2`、`ci2` 和 `result`，用於存儲物品的重量、數量和計算的結果。

4. `printf("Weight - Item1: ");`：提示用戶輸入物品1的重量。

5. `if (scanf("%lf", &amp;wi1) != 1) {...}`：使用 `scanf` 函式讀取用戶輸入的浮點數值，存儲在 `wi1` 中。檢查 `scanf` 的返回值，確保成功讀取一個數字，否則輸出錯誤信息並返回1。

6. 類似地，提示用戶輸入物品1的數量，並讀取輸入值到變數 `ci1` 中。

7. 類似地，提示用戶輸入物品2的重量，並讀取輸入值到變數 `wi2` 中。

8. 類似地，提示用戶輸入物品2的數量，並讀取輸入值到變數 `ci2` 中。

9. `result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);`：計算平均值，使用公式 `(wi1 * ci1 + wi2 * ci2) / (ci1 + ci2)`。

10. `printf("Average Value = %f\n", result);`：使用 `printf` 函式輸出計算得到的平均值。

11. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="94" src="/images/an10.png" width="203"/></p><h1>ANSIC_T</h1>
<p>1</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int x;    // 用於存儲總里程的變數，以公里為單位
    float y;  // 用於存儲總耗油量的變數，以升為單位

    // 提示用戶輸入總里程並存入 'x'
    printf("Input total distance in km: ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;x) != 1) {
        fprintf(stderr, "Error: Invalid input for total distance.\n");
        return 1;
    }

    // 提示用戶輸入總耗油量並存入 'y'
    printf("Input total fuel spent in liters: ");
    // 檢查 scanf 的返回值，確保成功讀取一個浮點數
    if (scanf("%f", &amp;y) != 1) {
        fprintf(stderr, "Error: Invalid input for total fuel spent.\n");
        return 1;
    }

    // 計算並打印平均油耗
    printf("Average consumption (km/lt) %.3f ", x / y);
    printf("\n");

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件，提供輸入和輸出的相關函式。

2. `int main()`：定義主函式，返回一個整數。

3. `int x;` 和 `float y;`：宣告一個整數變數 `x` 和一個浮點數變數 `y`，用於分別存儲總里程和總耗油量。

4. `printf("Input total distance in km: ");`：提示用戶輸入總里程。

5. `if (scanf("%d", &amp;x) != 1) {...}`：使用 `scanf` 函式讀取用戶輸入的整數值，存儲在 `x` 中。檢查 `scanf` 的返回值，確保成功讀取一個數字，否則輸出錯誤信息並返回1。

6. 類似地，提示用戶輸入總耗油量，並讀取輸入值到變數 `y` 中。

7. `printf("Average consumption (km/lt) %.3f ", x / y);`：計算並輸出平均油耗，使用公式 `x / y`。`%.3f` 用於限制浮點數的小數點後顯示的位數為三位。

8. `printf("\n");`：輸出換行符，使結果更易讀。

9. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="71" src="/images/ant1.png" width="250"/><br/><br/></p>
<p>2</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    float x, y, z, P; // 宣告變數，用於存儲三角形的邊長和周長

    // 提示用戶輸入三個邊長並存入 'x', 'y', 和 'z'
    printf("\nInput the first number: ");
    if (scanf("%f", &amp;x) != 1) {
        fprintf(stderr, "Error: Invalid input for the first number.\n");
        return 1;
    }

    printf("\nInput the second number: ");
    if (scanf("%f", &amp;y) != 1) {
        fprintf(stderr, "Error: Invalid input for the second number.\n");
        return 1;
    }

    printf("\nInput the third number: ");
    if (scanf("%f", &amp;z) != 1) {
        fprintf(stderr, "Error: Invalid input for the third number.\n");
        return 1;
    }

    if (x &lt; (y + z) &amp;&amp; y &lt; (x + z) &amp;&amp; z &lt; (y + x)) // 檢查是否可以構成三角形
    {
        P = x + y + z; // 計算周長
        printf("\nPerimeter  = %.1f\n", P); // 輸出周長
    } else {
        printf("Not possible to create a triangle..!"); // 如果無法構成三角形，輸出相應的信息
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。

2. `int main()`：定義主函式，返回一個整數。

3. `float x, y, z, P;`：宣告四個浮點數變數，`x`、`y` 和 `z` 用於存儲三角形的三個邊長，`P` 用於存儲三角形的周長。

4. 提示用戶輸入第一個數字，並使用 `scanf` 函式讀取輸入值，存儲在變數 `x` 中。檢查 `scanf` 的返回值，確保成功讀取一個浮點數。

5. 類似地，提示用戶輸入第二個和第三個數字，分別存儲在變數 `y` 和 `z` 中。

6. `if (x &lt; (y + z) &amp;&amp; y &lt; (x + z) &amp;&amp; z &lt; (y + x))`：檢查三個數是否構成一個三角形。這是三角形存在的條件，即每個邊的長度都小於其他兩個邊的長度之和。

7. 如果條件滿足，則計算三角形的周長 `P`，並使用 `printf` 函式輸出周長。

8. 如果條件不滿足，則輸出相應的信息表示無法構成三角形。

9. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="100" src="/images/ant2.png" width="241"/></p>
<p>3</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和

    // 提示用戶輸入五個數字並存入數組
    for (j = 0; j &lt; 5; j++) {
        printf("\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));
        if (scanf("%d", &amp;numbers[j]) != 1) {
            fprintf(stderr, "Error: Invalid input for the %s number.\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));
            return 1;
        }
    }

    for (j = 0; j &lt; 5; j++) {
        if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數
        {
            total += numbers[j]; // 將奇數添加到總和中
        }
    }

    printf("\nSum of all odd values: %d", total); // 輸出所有奇數的總和
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。

2. `int main()`：定義主函式，返回一個整數。

3. `int j, numbers[5], total = 0;`：宣告一個整數 `j`，一個大小為5的整數數組 `numbers`，和一個用於總和的整數變數 `total`。

4. 使用 `for` 迴圈提示用戶輸入五個數字，並將它們存入 `numbers` 數組。迴圈中的 `printf` 語句根據循環變數 `j` 的值，動態生成提示信息，例如 "first"、"second" 等。同時，使用 `scanf` 函式檢查輸入的有效性。

5. 使用第二個 `for` 迴圈遍歷 `numbers` 數組，檢查每個數字是否為奇數。

6. 如果某個數字是奇數，將其加到 `total` 變數中。

7. `printf("\nSum of all odd values: %d", total);`：輸出所有奇數的總和。

8. `return 0;`：主函式正常結束，返回值為0。</pre>
<p><img alt="" height="151" src="/images/ant3.png" width="250"/></p>
<p>4</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;

int divide_two(int dividend_num, int divisor_num) {
    int sign = (float)dividend_num / divisor_num &gt; 0 ? 1 : -1;
    unsigned int dvd = dividend_num &gt; 0 ? dividend_num : -dividend_num;
    unsigned int dvs = divisor_num &gt; 0 ? divisor_num : -divisor_num;
    unsigned int bit_num[33];
    unsigned int i = 0;
    long long d = dvs;

    bit_num[i] = d;
    while (d &lt;= dvd) {
        bit_num[++i] = d = d &lt;&lt; 1;
    }
    i--;

    unsigned int result = 0;
    while (dvd &gt;= dvs) {
        if (dvd &gt;= bit_num[i]) {
            dvd -= bit_num[i];
            result += (1 &lt;&lt; i);
        } else {
            i--;
        }
    }

    if (result &gt; INT_MAX &amp;&amp; sign &gt; 0) {
        return INT_MAX;
    }
    return (int)result * sign;
}

int main(void) {
    int dividend_num = 15;
    int divisor_num = 3;
    printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));
    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。
2. `#include &lt;stdlib.h&gt;`：包含標準庫的 `stdlib.h` 標頭文件，這裡主要用於 `malloc` 和 `free` 函式。
3. `#include &lt;limits.h&gt;`：包含整數型別的限制信息，例如 `INT_MAX`。
4. `int divide_two(int dividend_num, int divisor_num)`：定義了一個自定義函式 `divide_two`，該函式接受兩個整數參數 `dividend_num` 和 `divisor_num`，並返回一個整數。
5. `int sign = (float)dividend_num / divisor_num &gt; 0 ? 1 : -1;`：確定商的正負號。如果 `(float)dividend_num / divisor_num` 大於 0，則 `sign` 為1，否則為-1。
6. `unsigned int dvd = dividend_num &gt; 0 ? dividend_num : -dividend_num;` 和 `unsigned int dvs = divisor_num &gt; 0 ? divisor_num : -divisor_num;`：將被除數和除數轉換為無符號整數，以確保它們的絕對值在之後的操作中不會出現問題。
7. `unsigned int bit_num[33];`：定義一個大小為33的無符號整數數組，用於存儲除數的倍增值。
8. `unsigned int i = 0;`：初始化循環變數 `i`。
9. `long long d = dvs;`：將 `dvs` 複製到 `d`，並使用 `long long` 類型，以防止在位元左移時溢出。
10. `bit_num[i] = d;`：將 `d` 存儲在 `bit_num` 數組的第一個位置。
11. `while (d &lt;= dvd)`：當 `d` 小於或等於被除數時，執行以下操作。
    - `bit_num[++i] = d = d &lt;&lt; 1;`：將 `d` 左移一位，同時將結果存儲在 `bit_num` 數組的下一個位置。這樣就完成了除數的倍增。
12. `i--;`：將 `i` 減1，回到最後一個有效位置。

13. `unsigned int result = 0;`：初始化 `result` 變數，用於存儲商的結果。

14. `while (dvd &gt;= dvs)`：當被除數大於等於除數時，執行以下操作。
    - `if (dvd &gt;= bit_num[i])`：如果被除數大於等於 `bit_num[i]`，則執行以下操作。
        - `dvd -= bit_num[i];`：從被除數中減去 `bit_num[i]`。
        - `result += (1 &lt;&lt; i);`：將 `result` 加上 `2^i`，即將對應位置的二進制位設置為1。
    - `else`：如果被除數小於 `bit_num[i]`，則執行以下操作。
        - `i--;`：將 `i` 減1，繼續檢查下一個位置。

15. `if (result &gt; INT_MAX &amp;&amp; sign &gt; 0)`：如果商的結果大於整數型別的最大值 `INT_MAX`，並且 `sign` 為正，則執行以下操作。
    - `return INT_MAX</pre>
<p><img alt="" height="36" src="/images/ant4.png" width="360"/></p>
<p>5</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// inline function to check if a given integer is even
inline int is_even(int n) {
    return n % 2 == 0;
}

int main() {
    int num;

    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;num) != 1) {
        fprintf(stderr, "Error: Invalid input. Please enter a valid integer.\n");
        return 1;
    }

    if (is_even(num)) {
        printf("%d is even.\n", num);
    } else {
        printf("%d is odd.\n", num);
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。

2. `inline int is_even(int n)`：定義了一個內聯函式 `is_even`，該函式接受一個整數參數 `n`，並返回一個整數。內聯函式的目的是在編譯時將函式體插入到每次調用該函式的地方，以提高效率。這個函式的實現檢查 `n` 是否為偶數，如果是，返回1（true），否則返回0（false）。

3. `int main()`：定義了程序的主函式。

4. `int num;`：聲明一個整數變數 `num`，用於存儲用戶輸入的數字。

5. `if (scanf("%d", &amp;num) != 1)`：使用 `scanf` 函式檢查是否成功讀取一個整數，如果不成功，輸出錯誤信息並返回1。

6. `if (is_even(num))`：調用 `is_even` 函式檢查輸入的數字是否為偶數。

    - 如果返回值為真（1），則執行 `printf("%d is even.\n", num);`，輸出數字是偶數的信息。
    
    - 如果返回值為假（0），則執行 `printf("%d is odd.\n", num);`，輸出數字是奇數的信息。

7. `return 0;`：返回0，表示程序正常結束。</pre>
<p><img alt="" height="61" src="/images/ant5.png" width="247"/></p>
<p>6</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;


inline float celsius_To_Fahrenheit(float celsius) {
  return (celsius * 9 / 5) + 32;
}
inline float fahrenheit_To_Celsius(float fahrenheit) {
  return (fahrenheit - 32) * 5 / 9;
}

int main() {
  float celsius = 40;
  float fahrenheit = 89.60;
  printf("%.2f Celsius is equal to %.2f Fahrenheit\n", celsius, celsius_To_Fahrenheit(celsius));
  printf("\n%.2f Fahrenheit is equal to %.2f Celsius\n", fahrenheit,
    fahrenheit_To_Celsius(fahrenheit));
  return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。

2. `inline float celsius_To_Fahrenheit(float celsius)`：定義了一個內聯函式 `celsius_To_Fahrenheit`，該函式接受一個浮點數參數 `celsius`，並返回一個浮點數。這個函式的目的是將攝氏溫度轉換為華氏溫度，根據轉換公式 `(celsius * 9 / 5) + 32` 進行計算。

3. `inline float fahrenheit_To_Celsius(float fahrenheit)`：定義了一個內聯函式 `fahrenheit_To_Celsius`，該函式接受一個浮點數參數 `fahrenheit`，並返回一個浮點數。這個函式的目的是將華氏溫度轉換為攝氏溫度，根據轉換公式 `(fahrenheit - 32) * 5 / 9` 進行計算。

4. `int main()`：定義了程序的主函式。

5. `float celsius = 40;`：聲明並初始化一個浮點數變數 `celsius`，其值為40，表示攝氏溫度。

6. `float fahrenheit = 89.60;`：聲明並初始化一個浮點數變數 `fahrenheit`，其值為89.60，表示華氏溫度。

7. `printf("%.2f Celsius is equal to %.2f Fahrenheit\n", celsius, celsius_To_Fahrenheit(celsius));`：使用 `printf` 函式輸出轉換後的攝氏溫度對應的華氏溫度。`%.2f` 用於控制浮點數輸出的小數點位數。

8. `printf("\n%.2f Fahrenheit is equal to %.2f Celsius\n", fahrenheit, fahrenheit_To_Celsius(fahrenheit));`：使用 `printf` 函式輸出轉換後的華氏溫度對應的攝氏溫度。同樣，`%.2f` 用於控制浮點數輸出的小數點位數。

9. `return 0;`：返回0，表示程序正常結束。</pre>
<p><img alt="" height="82" src="/images/ant6.png" width="359"/></p>
<p>7</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int a, b;

    // Prompt user for input
    printf("Input two pairs values (integer values):\n");

    // Read two integer values from user and store them in 'a' and 'b'
    if (scanf("%d %d", &amp;a, &amp;b) != 2) {
        fprintf(stderr, "Error: Invalid input. Please enter two integer values.\n");
        return 1;  // Return an error code for invalid input
    }

    // Check if 'a' is not equal to 'b'
    if (a != b) {
        // Check if 'b' is greater than 'a'
        if (b &gt; a) {
            printf("Ascending order\n");  // Print message for ascending order
        } else {
            printf("Descending order\n");  // Print message for descending order
        }
    }

    return 0;  // End of program
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `#include &lt;stdio.h&gt;`：包含標準輸入/輸出庫的 `stdio.h` 標頭文件。

2. `int main()`：定義了程序的主函式。

3. `int a, b;`：聲明了兩個整數變數 `a` 和 `b`，用於存儲用戶輸入的整數值。

4. `printf("Input two pairs values (integer values):\n");`：使用 `printf` 函式向用戶提示輸入兩對整數值。

5. `if (scanf("%d %d", &amp;a, &amp;b) != 2) { ... }`：使用 `scanf` 函式從用戶獲取兩個整數值，並將它們存儲在變數 `a` 和 `b` 中。檢查 `scanf` 的返回值，確保成功讀取兩個整數值。如果讀取失敗，輸出錯誤消息並返回錯誤碼。

6. `if (a != b) { ... }`：檢查讀取的兩個整數是否相等。如果它們不相等，執行下面的代碼塊。

7. `if (b &gt; a) { ... } else { ... }`：這是一個嵌套的條件語句。如果 `b` 大於 `a`，則執行第一個代碼塊，否則執行第二個代碼塊。

8. `printf("Ascending order\n");`：如果 `b` 大於 `a`，則輸出 "Ascending order"，表示輸入的兩個數字是升序排列的。

9. `printf("Descending order\n");`：如果 `b` 不大於 `a`，則輸出 "Descending order"，表示輸入的兩個數字是降序排列的。

10. `return 0;`：正常結束程序，返回0，表示沒有錯誤發生。</pre>
<p><img alt="" height="84" src="/images/ant7.png" width="294"/></p>
<p>8</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main(void) {
    unsigned char char1, char2, char3, char4, char5, char6, char7, char8;

    // Print table header
    printf("|---------------------------------------------------------------------------------------------------------|\n");
    printf("|extended ASCII table - excluding control characters                                                      |\n");
    printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\n");
    printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\n");

    // Loop through characters
    for (int i = 0; i &lt; 32; i++) {
        // Calculate characters for different ranges
        char1 = i;
        char2 = i + 32;
        char3 = i + 64;
        char4 = i + 96;
        char5 = i + 128;  // extended ASCII characters
        char6 = i + 160;
        char7 = i + 192;
        char8 = i + 224;

        // Print characters and their decimal and hexadecimal representations
        printf("|  %c %3d %#x ", char2, char2, char2);
        printf("|  %c %3d %#x ", char3, char3, char3);

        // Special case for DEL character
        if (char4 == 127) {
            printf("|%s %3d %#x |", "DEL", char4, char4);
        } else {
            printf("|  %c %3d %#x |", char4, char4, char4);
        }

        // Print extended ASCII characters for the current system.
        printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\n",
               char5, char5, char5,
               char6, char6, char6,
               char7, char7, char7,
               char8, char8, char8);
    }

    return 0;  // Indicate successful execution of the program
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `unsigned char char1, char2, char3, char4, char5, char6, char7, char8;`：聲明了八個無符號字符變數，用於存儲ASCII字符。

2. `printf("|---------------------------------------------------------------------------------------------------------|\n");`：打印表格的分隔線。

3. `printf("|extended ASCII table - excluding control characters                                                      |\n");`：打印表格的標題。

4. `printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\n");`：打印表格的列標題。

5. `printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\n");`：打印表格的分隔線。

6. `for (int i = 0; i &lt; 32; i++) { ... }`：這是一個for循環，用於遍歷ASCII字符。

7. `char1 = i; char2 = i + 32; char3 = i + 64; char4 = i + 96; char5 = i + 128; char6 = i + 160; char7 = i + 192; char8 = i + 224;`：這些語句用於計算不同範圍的字符，以便填充表格。

8. `printf("|  %c %3d %#x ", char2, char2, char2);`：打印表格中的ASCII字符、十進制和十六進制表示。

9. `if (char4 == 127) { printf("|%s %3d %#x |", "DEL", char4, char4); } else { printf("|  %c %3d %#x |", char4, char4, char4); }`：這是一個條件語句，用於處理ASCII碼127（DEL字符）的特殊情況。

10. `printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\n", char5, char5, char5, char6, char6, char6, char7, char7, char7, char8, char8, char8);`：打印擴展的ASCII字符和其十進制和十六進制表示。

11. `return 0;`：指示程序成功運行結束。</pre>
<p><img alt="" height="206" src="/images/ant8.png" width="250"/></p>
<p>9</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int x; // Declare variable x

    // Print header for the table
    printf("x+1\tx+3\tx+5\tx+7\n\n");
    printf("---------------------------\n");

    // Loop to generate and print table values
    for (x = 1; x &lt;= 15; x += 3)
        printf("%d\t%d\t%d\t%d\n", x, (x + 2), (x + 4), (x + 6));

    return 0; // Indicate successful program execution
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `int x;`：聲明了一個整數變數 `x`，用於迴圈中的計算。

2. `printf("x+1\tx+3\tx+5\tx+7\n\n");`：打印表格的標題，列出表格中每一列的標籤。

3. `printf("---------------------------\n");`：打印表格的分隔線。

4. `for (x = 1; x &lt;= 15; x += 3)`：這是一個for迴圈，從 `x` 的初始值1開始，每次迭代增加3，直到 `x` 的值大於15。

5. `printf("%d\t%d\t%d\t%d\n", x, (x + 2), (x + 4), (x + 6));`：在每次迭代中，打印表格的一行，該行包含 `x` 及其後三個數的計算結果。

6. `return 0;`：指示程序成功運行結束。</pre>
<p><img alt="" height="125" src="/images/ant9.png" width="203"/></p>
<p>10</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    // 声明变量
    float principal_amt, rate_of_interest, days, interest;
    const int yearInDays = 365; // 用于转换利率的常量

    // 提示用户输入贷款金额
    printf("输入贷款金额 (输入 0 退出): ");
    if (scanf("%f", &amp;principal_amt) != 1) {
        fprintf(stderr, "Error: Invalid input for loan amount.\n");
        return 1;
    }

    // 主循环用于处理贷款
    while ((int)principal_amt != 0) 
    {
        // 提示用户输入利率
        printf("输入利率: ");
        if (scanf("%f", &amp;rate_of_interest) != 1) {
            fprintf(stderr, "Error: Invalid input for interest rate.\n");
            return 1;
        }

        // 提示用户输入贷款期限（天）
        printf("输入贷款期限（天）: ");
        if (scanf("%f", &amp;days) != 1) {
            fprintf(stderr, "Error: Invalid input for loan term.\n");
            return 1;
        }

        // 计算利息
        interest = (principal_amt * rate_of_interest * days) / yearInDays;

        // 显示利息金额
        printf("利息金额为 $%.2f\n", interest);

        // 提示用户输入下一个贷款金额
        printf("\n\n输入贷款金额 (输入 0 退出): ");
        if (scanf("%f", &amp;principal_amt) != 1) {
            fprintf(stderr, "Error: Invalid input for loan amount.\n");
            return 1;
        }
    }

    return 0;
}</pre>
<p>解釋：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1. `float principal_amt, rate_of_interest, days, interest;`：聲明了四個浮點變數，分別表示貸款金額、利率、貸款期限（以天為單位）和計算的利息。

2. `const int yearInDays = 365;`：定義了一個常量 `yearInDays`，表示一年的天數，用於將利率轉換為每日利率。

3. `printf("输入贷款金额 (输入 0 退出): ");`：提示用戶輸入貸款金額，並要求用戶輸入0以退出程序。

4. `if (scanf("%f", &amp;principal_amt) != 1) { ... }`：使用 `scanf` 函數從用戶輸入中讀取一個浮點數，並將其存儲在 `principal_amt` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。

5. `while ((int)principal_amt != 0)`：這是一個while循環，當 `principal_amt` 不等於0時，循環將繼續運行。這允許用戶輸入多個貸款金額。

6. `printf("输入利率: ");`：提示用戶輸入利率。

7. `if (scanf("%f", &amp;rate_of_interest) != 1) { ... }`：從用戶輸入中讀取利率，並將其存儲在 `rate_of_interest` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。

8. `printf("输入贷款期限（天）: ");`：提示用戶輸入貸款期限。

9. `if (scanf("%f", &amp;days) != 1) { ... }`：從用戶輸入中讀取貸款期限，並將其存儲在 `days` 中。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。

10. `interest = (principal_amt * rate_of_interest * days) / yearInDays;`：使用公式計算利息，將其存儲在 `interest` 中。

11. `printf("利息金额为 $%.2f\n", interest);`：顯示計算得到的利息金額。

12. `printf("\n\n输入贷款金额 (输入 0 退出): ");`：提示用戶輸入下一個貸款金額。

13. `if (scanf("%f", &amp;principal_amt) != 1) { ... }`：從用戶輸入中讀取下一個貸款金額。如果輸入不是有效的浮點數，則輸出錯誤消息並返回1。

14. `return 0;`：程序運行成功，返回0。</pre>
<p><img alt="" height="142" src="/images/ant10.png" width="238"/></p><h1>期末總結</h1>
<p>上完課程後我覺得我個人分數60分。每周的上課進度和作業，我會的就盡量做不懂的就去請教會的同組同學，雖然這樣也導致同組同學花更多時間在教我，但比起甚麼都不會放棄來的好。我對於這類的課程相對來說非常不熟悉，就算是在高職有上過C++的課程聽了之後還是不解，所以在這門課我已經是想盡方法去完成作業跟進度，還請老師高抬貴手別當我感謝。</p>
<p><strong>A: 是否按照進度明確標示倉儲的改版歷程。是，有照進度標示。</strong></p>
<p><strong>B: 是否根據 IPv4 與 IPv6 網路環境設定進行作法討論。是，有錄製影片。</strong></p>
<p><strong><video controls="controls" height="150" width="300">
<source src="/images/w2-w3.mp4" type="video/mp4"/></video></strong></p>
<p><strong><span>C: 是否就 Replit、s.cycu.org 與 localhost 情境下對個人與分組倉儲進行設定操作。</span></strong></p>
<p><video controls="controls" height="150" width="300">
<source src="/images/w5.mp4" type="video/mp4"/></video></p>
<p><b><span>D: 是否完成</span><a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a><span>中的 Exercises?是，但第九周的課程內容不大了解</span></b></p>
<p><b><span>E: 是否完成 <a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span><span> </span>週任務中的 Exercises。是，成品放在個人網址上了。</span></span></b></p>
<p><b><span><span>F: 是否完成 <a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span><span> </span>週任務中的練習一與練習二。是，成品放在個人網址上了。</span></span></span></b></p>
<p><b><span><span><span>G: 是否完成 C 結合 gd 繪圖程式庫, 畫出 <a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg">規格</a><span>)</span><span>。是，成品放在個人網址上了。</span></span></span></span></b></p>
<p><b><span><span><span><span>H: 是否完成 w16 Final Project。是，但不知道是否正確完成。</span></span></span></span></b></p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>